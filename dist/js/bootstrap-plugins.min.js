"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _get(e,t,n){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){e=_superPropBase(e,t);if(e){t=Object.getOwnPropertyDescriptor(e,t);return t.get?t.get.call(n):t.value}})(e,t,n||e)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(n){var i=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return _possibleConstructorReturn(this,i?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ownKeys(t,e){var n,i=Object.keys(t);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(t),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),i.push.apply(i,n)),i}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(Object(n),!0).forEach(function(e){_defineProperty(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t(require("./dom/data.js"),require("./dom/event-handler.js")):"function"==typeof define&&define.amd?define(["./dom/data","./dom/event-handler"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).Base=t(e.Data,e.EventHandler)}(void 0,function(e,t){function n(e){return e&&"object"===_typeof(e)&&"default"in e?e:{default:e}}function r(e){"function"==typeof e&&e()}function i(n,i){var e,o,t;2<arguments.length&&void 0!==arguments[2]&&!arguments[2]?r(n):(e=function(e){if(!e)return 0;var t=window.getComputedStyle(e),n=t.transitionDuration,i=t.transitionDelay,e=Number.parseFloat(n),t=Number.parseFloat(i);return e||t?(n=n.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(n)+Number.parseFloat(i))):0}(i)+5,o=!1,t=function e(t){t.target===i&&(o=!0,i.removeEventListener(s,e),r(n))},i.addEventListener(s,t),setTimeout(function(){o||i.dispatchEvent(new Event(s))},e))}var o=n(e),a=n(t),s="transitionend",l=function(e){return(t=e)&&"object"===_typeof(t)&&void 0!==(t=void 0!==t.jquery?t[0]:t).nodeType?e.jquery?e[0]:e:"string"==typeof e&&0<e.length?document.querySelector(e):null;var t};return function(){function t(e){_classCallCheck(this,t),(e=l(e))&&(this._element=e,o.default.set(this._element,this.constructor.DATA_KEY,this))}return _createClass(t,[{key:"dispose",value:function(){var t=this;o.default.remove(this._element,this.constructor.DATA_KEY),a.default.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach(function(e){t[e]=null})}},{key:"_queueCallback",value:function(e,t){i(e,t,!(2<arguments.length&&void 0!==arguments[2])||arguments[2])}}],[{key:"getInstance",value:function(e){return o.default.get(l(e),this.DATA_KEY)}},{key:"getOrCreateInstance",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(e)||new this(e,"object"===_typeof(t)?t:null)}},{key:"VERSION",get:function(){return"5.1.1"}},{key:"NAME",get:function(){throw new Error('You have to implement the static method "NAME", for each component!')}},{key:"DATA_KEY",get:function(){return"bs.".concat(this.NAME)}},{key:"EVENT_KEY",get:function(){return".".concat(this.DATA_KEY)}}]),t}()}),function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t(require("./dom/event-handler.js"),require("./dom/manipulator.js"),require("./dom/selector-engine.js"),require("./base-component.js")):"function"==typeof define&&define.amd?define(["./dom/event-handler","./dom/manipulator","./dom/selector-engine","./base-component"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).Modal=t(e.EventHandler,e.Manipulator,e.SelectorEngine,e.Base)}(void 0,function(e,t,n,i){function o(e){return e&&"object"===_typeof(e)&&"default"in e?e:{default:e}}function r(e){return(e=function(e){var t=e.getAttribute("data-bs-target");if(!t||"#"===t){e=e.getAttribute("href");if(!e||!e.includes("#")&&!e.startsWith("."))return null;t=(e=e.includes("#")&&!e.startsWith("#")?"#".concat(e.split("#")[1]):e)&&"#"!==e?e.trim():null}return t}(e))?document.querySelector(e):null}function s(e){return!(!e||"object"!==_typeof(e))&&void 0!==(e=void 0!==e.jquery?e[0]:e).nodeType}function a(o,r,a){Object.keys(a).forEach(function(e){var t,n=a[e],i=r[e],t=i&&s(i)?"element":null==(t=i)?"".concat(t):{}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(n).test(t))throw new TypeError("".concat(o.toUpperCase(),': Option "').concat(e,'" provided type "').concat(t,'" but expected type "').concat(n,'".'))})}function l(e){e.offsetHeight}function c(){return"rtl"===document.documentElement.dir}function u(e){"function"==typeof e&&e()}function f(n,i){var e,o,t;2<arguments.length&&void 0!==arguments[2]&&!arguments[2]?u(n):(e=function(e){if(!e)return 0;var t=window.getComputedStyle(e),n=t.transitionDuration,i=t.transitionDelay,e=Number.parseFloat(n),t=Number.parseFloat(i);return e||t?(n=n.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(n)+Number.parseFloat(i))):0}(i)+5,o=!1,t=function e(t){t.target===i&&(o=!0,i.removeEventListener(g,e),u(n))},i.addEventListener(g,t),setTimeout(function(){o||i.dispatchEvent(new Event(g))},e))}var d,h,_=o(e),p=o(t),m=o(n),y=o(i),g="transitionend",b=[],v=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",k=".sticky-top",E=function(){function e(){_classCallCheck(this,e),this._element=document.body}return _createClass(e,[{key:"getWidth",value:function(){var e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}},{key:"hide",value:function(){var t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",function(e){return e+t}),this._setElementAttributes(v,"paddingRight",function(e){return e+t}),this._setElementAttributes(k,"marginRight",function(e){return e-t})}},{key:"_disableOverFlow",value:function(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}},{key:"_setElementAttributes",value:function(e,n,i){var o=this,r=this.getWidth();this._applyManipulationCallback(e,function(e){var t;e!==o._element&&window.innerWidth>e.clientWidth+r||(o._saveInitialAttribute(e,n),t=window.getComputedStyle(e)[n],e.style[n]="".concat(i(Number.parseFloat(t)),"px"))})}},{key:"reset",value:function(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(v,"paddingRight"),this._resetElementAttributes(k,"marginRight")}},{key:"_saveInitialAttribute",value:function(e,t){var n=e.style[t];n&&p.default.setDataAttribute(e,t,n)}},{key:"_resetElementAttributes",value:function(e,n){this._applyManipulationCallback(e,function(e){var t=p.default.getDataAttribute(e,n);void 0===t?e.style.removeProperty(n):(p.default.removeDataAttribute(e,n),e.style[n]=t)})}},{key:"_applyManipulationCallback",value:function(e,t){s(e)?t(e):m.default.find(e,this._element).forEach(t)}},{key:"isOverflowing",value:function(){return 0<this.getWidth()}}]),e}(),w={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},A={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},j="backdrop",C="mousedown.bs.".concat(j),O=function(){function t(e){_classCallCheck(this,t),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}return _createClass(t,[{key:"show",value:function(e){this._config.isVisible?(this._append(),this._config.isAnimated&&l(this._getElement()),this._getElement().classList.add("show"),this._emulateAnimation(function(){u(e)})):u(e)}},{key:"hide",value:function(e){var t=this;this._config.isVisible?(this._getElement().classList.remove("show"),this._emulateAnimation(function(){t.dispose(),u(e)})):u(e)}},{key:"_getElement",value:function(){var e;return this._element||((e=document.createElement("div")).className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e),this._element}},{key:"_getConfig",value:function(e){var t;return(e=_objectSpread(_objectSpread({},w),"object"===_typeof(e)?e:{})).rootElement=(t=e.rootElement,s(t)?t.jquery?t[0]:t:"string"==typeof t&&0<t.length?document.querySelector(t):null),a(j,e,A),e}},{key:"_append",value:function(){var e=this;this._isAppended||(this._config.rootElement.append(this._getElement()),_.default.on(this._getElement(),C,function(){u(e._config.clickCallback)}),this._isAppended=!0)}},{key:"dispose",value:function(){this._isAppended&&(_.default.off(this._element,C),this._element.remove(),this._isAppended=!1)}},{key:"_emulateAnimation",value:function(e){f(e,this._getElement(),this._config.isAnimated)}}]),t}(),T={trapElement:null,autofocus:!0},P={trapElement:"element",autofocus:"boolean"},S=".".concat("bs.focustrap"),N="focusin".concat(S),D="keydown.tab".concat(S),R="backward",B=function(){function t(e){_classCallCheck(this,t),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}return _createClass(t,[{key:"activate",value:function(){var t=this,e=this._config,n=e.trapElement,e=e.autofocus;this._isActive||(e&&n.focus(),_.default.off(document,S),_.default.on(document,N,function(e){return t._handleFocusin(e)}),_.default.on(document,D,function(e){return t._handleKeydown(e)}),this._isActive=!0)}},{key:"deactivate",value:function(){this._isActive&&(this._isActive=!1,_.default.off(document,S))}},{key:"_handleFocusin",value:function(e){var t=e.target,e=this._config.trapElement;t===document||t===e||e.contains(t)||(0===(t=m.default.focusableChildren(e)).length?e:this._lastTabNavDirection===R?t[t.length-1]:t[0]).focus()}},{key:"_handleKeydown",value:function(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?R:"forward")}},{key:"_getConfig",value:function(e){return e=_objectSpread(_objectSpread({},T),"object"===_typeof(e)?e:{}),a("focustrap",e,P),e}}]),t}(),L=".".concat("bs.modal"),q={backdrop:!0,keyboard:!0,focus:!0},M={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},x="hide".concat(L),I="hidePrevented".concat(L),F="hidden".concat(L),K="show".concat(L),Y="shown".concat(L),z="resize".concat(L),W="click.dismiss".concat(L),V="keydown.dismiss".concat(L),H="mouseup.dismiss".concat(L),Q="mousedown.dismiss".concat(L),i="click".concat(L).concat(".data-api"),U="modal-open",G="modal-static",J=".modal-dialog",X=function(){_inherits(i,y["default"]);var n=_createSuper(i);function i(e,t){return _classCallCheck(this,i),(e=n.call(this,e))._config=e._getConfig(t),e._dialog=m.default.findOne(J,e._element),e._backdrop=e._initializeBackDrop(),e._focustrap=e._initializeFocusTrap(),e._isShown=!1,e._ignoreBackdropClick=!1,e._isTransitioning=!1,e._scrollBar=new E,e}return _createClass(i,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;this._isShown||this._isTransitioning||_.default.trigger(this._element,K,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(U),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),_.default.on(this._dialog,Q,function(){_.default.one(t._element,H,function(e){e.target===t._element&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(e)}))}},{key:"hide",value:function(){var e,t=this;this._isShown&&!this._isTransitioning&&(_.default.trigger(this._element,x).defaultPrevented||(this._isShown=!1,(e=this._isAnimated())&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove("show"),_.default.off(this._element,W),_.default.off(this._dialog,Q),this._queueCallback(function(){return t._hideModal()},this._element,e)))}},{key:"dispose",value:function(){[window,this._dialog].forEach(function(e){return _.default.off(e,L)}),this._backdrop.dispose(),this._focustrap.deactivate(),_get(_getPrototypeOf(i.prototype),"dispose",this).call(this)}},{key:"handleUpdate",value:function(){this._adjustDialog()}},{key:"_initializeBackDrop",value:function(){return new O({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}},{key:"_initializeFocusTrap",value:function(){return new B({trapElement:this._element})}},{key:"_getConfig",value:function(e){return e=_objectSpread(_objectSpread(_objectSpread({},q),p.default.getDataAttributes(this._element)),"object"===_typeof(e)?e:{}),a("modal",e,M),e}},{key:"_showElement",value:function(e){var t=this,n=this._isAnimated(),i=m.default.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,i&&(i.scrollTop=0),n&&l(this._element),this._element.classList.add("show");this._queueCallback(function(){t._config.focus&&t._focustrap.activate(),t._isTransitioning=!1,_.default.trigger(t._element,Y,{relatedTarget:e})},this._dialog,n)}},{key:"_setEscapeEvent",value:function(){var t=this;this._isShown?_.default.on(this._element,V,function(e){t._config.keyboard&&"Escape"===e.key?(e.preventDefault(),t.hide()):t._config.keyboard||"Escape"!==e.key||t._triggerBackdropTransition()}):_.default.off(this._element,V)}},{key:"_setResizeEvent",value:function(){var e=this;this._isShown?_.default.on(window,z,function(){return e._adjustDialog()}):_.default.off(window,z)}},{key:"_hideModal",value:function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(function(){document.body.classList.remove(U),e._resetAdjustments(),e._scrollBar.reset(),_.default.trigger(e._element,F)})}},{key:"_showBackdrop",value:function(e){var t=this;_.default.on(this._element,W,function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&(!0===t._config.backdrop?t.hide():"static"===t._config.backdrop&&t._triggerBackdropTransition())}),this._backdrop.show(e)}},{key:"_isAnimated",value:function(){return this._element.classList.contains("fade")}},{key:"_triggerBackdropTransition",value:function(){var e,t,n,i,o,r=this;_.default.trigger(this._element,I).defaultPrevented||(e=this._element,t=e.classList,n=e.scrollHeight,i=e.style,!(o=n>document.documentElement.clientHeight)&&"hidden"===i.overflowY||t.contains(G)||(o||(i.overflowY="hidden"),t.add(G),this._queueCallback(function(){t.remove(G),o||r._queueCallback(function(){i.overflowY=""},r._dialog)},this._dialog),this._element.focus()))}},{key:"_adjustDialog",value:function(){var e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=0<t;(!n&&e&&!c()||n&&!e&&c())&&(this._element.style.paddingLeft="".concat(t,"px")),(n&&!e&&!c()||!n&&e&&c())&&(this._element.style.paddingRight="".concat(t,"px"))}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}}],[{key:"Default",get:function(){return q}},{key:"NAME",get:function(){return"modal"}},{key:"jQueryInterface",value:function(t,n){return this.each(function(){var e=i.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t](n)}})}}]),i}();return _.default.on(document,i,'[data-bs-toggle="modal"]',function(e){var t=this,n=r(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),_.default.one(n,K,function(e){e.defaultPrevented||_.default.one(n,F,function(){var e;s(e=t)&&0!==e.getClientRects().length&&"visible"===getComputedStyle(e).getPropertyValue("visibility")&&t.focus()})});e=m.default.findOne(".modal.show");e&&X.getInstance(e).hide(),X.getOrCreateInstance(n).toggle(this)}),function(t){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"hide",e="click.dismiss".concat(t.EVENT_KEY),i=t.NAME;_.default.on(document,e,'[data-bs-dismiss="'.concat(i,'"]'),function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),!(e=this)||e.nodeType!==Node.ELEMENT_NODE||e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))||(e=r(this)||this.closest(".".concat(i)),t.getOrCreateInstance(e)[n]())})}(X),d=X,h=function(){var e,t,n,i=(e=window.jQuery)&&!document.body.hasAttribute("data-bs-no-jquery")?e:null;i&&(t=d.NAME,n=i.fn[t],i.fn[t]=d.jQueryInterface,i.fn[t].Constructor=d,i.fn[t].noConflict=function(){return i.fn[t]=n,d.jQueryInterface})},"loading"===document.readyState?(b.length||document.addEventListener("DOMContentLoaded",function(){b.forEach(function(e){return e()})}),b.push(h)):h(),X});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,