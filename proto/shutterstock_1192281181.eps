%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: ai0029_gamma-06.eps
%%Creator: Adobe Illustrator(R) 22.1
%%For:  
%%CreationDate: 8/17/2018
%%BoundingBox: 0 0 2803 1005
%%HiResBoundingBox: 0 0 2802.9126 1004.7927
%%CropBox: 0 0 2802.9126 1004.7927
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.1.0 x312 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 6311 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFD53FFCAFFCAFD7CFFCAFFFFFFCAFD
%09FFCAFD5CFFCAFD09FFCAFD07FFCFFFFFCFFFFFFFCFFD08FFCAFFCAFD11
%FFCAFD48FFCACAA1FD0BFFA1FFFFFFA1CACACAA8FFFFCAA8FD07FFA8CACA
%CAA8FD07FFA8FD07FFCACAC9FD3AFFCFFD1DFFCAFFFFFFCACFCAFFCAFFCA
%FD56FFCAFFFFFFCACACAFD17FFCAFD07FFCACACAFFCAFD13FFCFFD0FFFCA
%FFCAFD32FFCAFFCAFFCAFD0BFFCACFFD05CAFD04FFFD04CACFCACACAFD05
%FF7D7D777D7D774C7D7D77FD07FFCACAFFCACACAFD0BFFCAFFCACACAFD30
%FFCAFFCAFD09FFCAFFFFFFA8CACAFFA8FFCACAA8FD10FF7DFD04FFA04CFF
%FF77FD05FFCACACAFFA8FFCAFFA1FFCAFFCAFD07FFA8FFCAFD25FFCACACF
%CACFCAFD17FFCFFFCAFFCFFFCAFD0FFFA8A14C764C764C4C4BFFFF7D7DA8
%FD3EFFFD07CACFFD23FFCACACFFD06FF7DFD04FFA14CFFFF7677FFFF77FD
%6AFFCFFD07FF7DFD04FFCA4BFFFFA19AFFFF7DFD4DFFCAFFCAFFCAFD09FF
%CAFD14FF7D77774C524B4B4C4CFFFF5276FFFF7D7D52FD0FFFCAFFCAFFCA
%FFCAFFCAFD56FFA8FD04FFC34CFD0AFFCAFD3FFFCAFFCAFFCAFFCAFFFFFF
%CAFFCAFFCAFFCAFFCAFD0BFFCFFFCAFD0EFFA8FF764CA19A52FF764B76FF
%FF4B7076FFA2FFCAFFCAFFCAFFCAFFFFA8FD04FFCAFFCFFFCAFFCAFFCAFF
%FFFFA8FD24FFCAFFFFFFCAFFFFFFCAFD07FFCAFD17FFCAFD05FFA8FF9A76
%76C24CFF76764BFFFF764B76FFA8CAFFFFFFCAFFFFFFA84C274CA8FFFFFF
%CAFD08FFA8214B52FD1BFFA8FFFFFFA2A1A2A1A1A1A2A1FFCAFFCAFFCAFF
%FFFFCAFFCFFFCAFD0BFFCAFFCAFD05FFCAFFCAFFCAFFCAFFA8A2A2764B76
%9A4CFF777676FFFF76704CFFA2FFCAFFCAFFCAFF4C2770CA4C2752FFCAFF
%CAFFCFFFCAFFA84C21A1A14B21A8FD18FFA17677FF769AA19AA19AA19A9A
%7DFD29FFA1A8A17DA8C24CFF7DA176FFFFA176A1FFA8FD05FFA22770CAFF
%76FFA87627A8FD06FF774B4CFFA8A1FFA12777FD16FF7D76C3A04C9AC39A
%C3BCC39AC3BC9A767776FFCAFFCAFFCFFFCAFFCAA1765276A14C7D767D76
%7DCAFFCAFFCAFD07FFCFFFFFFFCAA8FD04FF9A4CFD0AFFA8FFCAFFA24C21
%A1FFFF4CCA76FFCAA1214CA8FFCAA2214CA1FFFF76A1A1FFFF4B4BA2FD13
%FF77A0C9C3C9A14C76C3C2C3C2C3C2C39A4C9AC976CACAFFFFFFCFFFFFA1
%9A52274C9A9AA1C9C37621A2CAFFFFFFCAFFFFFFCAFD07FFA8FD04FFC24C
%FF7D7D76FFFF7D76A8CAA8FFFFCAA876FD04FFCA4BCAFD04FF52CACAFF7D
%77FD04FF7D76CBFFFFFF764CA8FD0BFFA1A8FFFFFFA876A1C3A1C9C3C3A1
%4C6FC39AC39AC36F4BA0C3A1C94CA8CAFFCAFFCAA276772176274B214CC3
%7621A121CACAFFCAFFCAFFCAFFCAFFCFFFCAFFCAA8FF764B769A52FF7670
%76FFFF70764CFFA2FFCAFFA87DFD0BFF7DCAFFCAFF77FD0AFFA8A2FF7DFD
%0AFF76A1FFFFFF4C4B704B764C764B764B4C4B704B704B4CC3C9C3CAC3C9
%76A1FFFFFFCA76C9C37676776F9AC3A127CAFF9B27FD0FFFA2CA704C52C3
%4CFF52764CFFFF764C76FFCAFD04FF7DFF4B764C76FFA14C4C4BFF7DFD04
%FF7DFF764C4C76FF764C4B76A8A8FFA176FD08FF76C376FF52FFFF7DCACA
%A8FFCACAA87D76CAA8FF764C70767676707676764B76CACA4CC9C3C37676
%5276A1A121A8FFFFFF4C4CFFCAFFCAFFCAFFCAFFCAFFCAFFCA7D4C4C2152
%9A52FF764C70FFFF4C4C76FFA1FFCAFFCA7DFF4C4B764BFF76764B4CFF7D
%CAFFCAFF77FF4B764B76FF764B4C4BA8A8A1A077A8FD07FF77C3A177C37D
%FF77FFA8A1A1A1A8FF7DA1FD04FF4C7776A1767776A17676A2FF4C4C274C
%4B4C274C4B4C21A1FD05FF4CA1FFFFFFCAFFFFFFCAFFFFFFCAFFA8FD04FF
%C24CFFA8A8A2FFFFA87DFFFFA8CAFFFFFF77FF4C764C76FFA14C764BFF21
%4C4B4C4B4CFF764C7676FF76764C76A8A876C9A1A1FD06FFA876C9C34CA1
%77FF7DA8779ACA76A1FF7D76704B767676FFFFA1A8A1A8A8FF77FFCAFF76
%CAA8CACACAA8CAA176FF9A4B4C4BFFA2FFCAFFCAFFCAFFCAA24C77A8FFA8
%A8FD04FF9A4CFFA87DA1FFFF7DA8A2A8A2FFCAFFCA7DFD0BFF4B76777676
%21FD0AFFA87D76C3C376FD06FF7DCAA1C976CAA1CB7DFF76A1A1A176FF7D
%A176769A7676FF4C9B769A7676FF7DCACACA7DFFCA274C4B52FFFF76FF76
%764C76FFA8FFFFA8FFFFFFCA7DA8FF7D7DA1FFA8FF6F7676C24CFF769A4B
%FFA14C274C52A8FFFFCAFF77FF4C764C77FFA170764CFF4BFFFFFFCA76FF
%7670767DFF76764C76A8A2A1C3C3A1FD06FF7DA1769A769AC3777DFF779A
%FFA1A1FF7D76704B9A4C76FF4C4B4C4B4C21FF777D4CFF77FFA24C6F9A76
%FFCA77FFA1A17D76FFA8FFCA4BA8CACAA84B4C274C4B52CAA8FF9A707D9A
%4CFF777676FFA8764CA87DA8FF524CCA7DFF704C764BFF76764B4CFF4C77
%7D77A14BFF4B764B76FF764B4C4BA877A19AA176FD07FF764B7652764CFF
%7DFF76A1CAA19AFF7D7DA8A8A8CB76FF76A16F9A5252CA7D4C77CA7DFFA8
%4B9ABC9AFFFF76FF76774C52FFA8FFFF27CAA1FFCAFFCA7DCAFFCAFF7DA8
%764C52C24CFF769B70FFA176767777A8FF764CFF77FF4B9B7676FFA17676
%4BFF4B776F9A774CFF9A767676FF76764C76A8A8527676A1FD08FF77A8FF
%4CFFA87DFFA8527752A1FF7D76FD04FF76FF77779A9A764BFF774C52CA77
%FFA24C6FC276FFA877FFA1A17676FFA2FFCA4C4B7652CAA8FF76A8A8FFCA
%A8A2A27DA89A52CAA87DA8FFA24C9A527DA2CA4C52A87DFFA87DA8A8FFA8
%A87DA8FF4C529A6F7D4BFFA2A87DCBFFA87DA2A8A8A2CA77CACAFD08FF7D
%FFCAA8FFFF7DFD07FF7DA1FD04FF76FF77A19AC37652FFA15277CAA1FFA8
%4B9ABCA1FFFF76FFA17D777DFFCAFFCA277627767D764C4C4C7677FF4C52
%FD044C27524C7752524B769A772752FF7652FF76A2A2A27DA27DA27DA27D
%A24B524B704C4C7DA27DA27DA27DA27DA277A8FFCAFD07FFA87D7752777D
%527D2727212721272127212727524C524C4B274C2727214C214C274C4B4C
%214C274B214B214B214B214C214C274C214C4C4C4B4C4B5221272127214B
%764B214B214B2127214B274C2127214B212721A84C4C7D52767D527D7677
%527D7677524C4B4B214B27524C764C524C764C524C7677A87DA8A8FDFCFF
%FDFCFFFDFCFFFDFCFFFDFCFFFD16FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 6 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161356, 2017/09/07-01:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">i0029_source_10_08</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-08-17T14:54:07+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-08-17T14:54:07+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-08-17T14:54:06+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 22.1 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>220</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgA3AEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq0WUdSBU0HzxpUJZaxpl8JfqtykpgYrMoNCpBK7g0NCQaHv2w8JU&#xA;ozArsVdirsVdiriwFKkCvTGlcSAKk0GKuxV2KuxV2KuxVb6icVbkAGpxrtWvzw0VtdgV2KuxV2Ku&#xA;JAFSaDxOKrXfipIUuR0Vep++gwgWq31WEasY2DNt6exNfcgkfjh4d+aLahmZ2YMhQg7VB6fOlMMo&#xA;0oKqCCKj+mQS7FXYq7FXYq7FXYq7FUh87+ZIPLfl271mcM8dqjMIlA+N+JKrUhuNSKVplmMWapRG&#xA;y8zf/nIWC40q4mttMEN6lol5aj1XlQFigcSKEtqqhemzfEw7L8WWjEWzwmFaV56j0zza2q6DE8a3&#xA;vI38V9IrCTnwf7KqoqCvYD4aDZhyNhhbMjbd6R5q/Oe20LXdQ0wWSMum8Q8gkcO3LjQhEhcbmQDr&#xA;0yEIWLLUMd8nqyhgoDHkwG5pSv0ZjFi3gV5D+c3njzR5fu4LbTpURZLRpiwgSbi/J1DAOsnYZlYY&#xA;g2RbKMQeaZ/k55u13zNol3da5KzXEM4jjZQI/g9NWrRQo3PtgyR4TsiYAS78yvzS8weXfMq6Zp1l&#xA;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&#xA;U//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:641b8568-7ce0-7447-ac36-127eaf286916</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:641b8568-7ce0-7447-ac36-127eaf286916</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:5d76cb03-e238-b647-9f97-c9b6b91f1222</stRef:instanceID>
            <stRef:documentID>xmp.did:5d76cb03-e238-b647-9f97-c9b6b91f1222</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e2a3cbcf-1191-0448-bcbf-81c30bf54e3d</stEvt:instanceID>
                  <stEvt:when>2018-07-11T11:30:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:641b8568-7ce0-7447-ac36-127eaf286916</stEvt:instanceID>
                  <stEvt:when>2018-08-17T14:54:07+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3221.715066</stDim:w>
            <stDim:h>1005.261185</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=175 B=80</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>175</xmpG:green>
                           <xmpG:blue>80</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=244 B=230</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>244</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=64 G=23 B=55</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>64</xmpG:red>
                           <xmpG:green>23</xmpG:green>
                           <xmpG:blue>55</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=226 G=128 B=61</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>226</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>61</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=149 B=63</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=231 B=229</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>229</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=212 B=181</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>212</xmpG:green>
                           <xmpG:blue>181</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=225 B=202</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>225</xmpG:green>
                           <xmpG:blue>202</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=107 G=178 B=107</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>107</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>107</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=133 G=201 B=133</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>133</xmpG:red>
                           <xmpG:green>201</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=165 G=214 B=167</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>165</xmpG:red>
                           <xmpG:green>214</xmpG:green>
                           <xmpG:blue>167</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=202 G=239 B=202</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>202</xmpG:red>
                           <xmpG:green>239</xmpG:green>
                           <xmpG:blue>202</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=227 G=252 B=227</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>227</xmpG:red>
                           <xmpG:green>252</xmpG:green>
                           <xmpG:blue>227</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=229 G=237 B=223</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>229</xmpG:red>
                           <xmpG:green>237</xmpG:green>
                           <xmpG:blue>223</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=179 G=224 B=179</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>179</xmpG:red>
                           <xmpG:green>224</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1004.79 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1004.79 li
2802.91 1004.79 li
2802.91 0 li
cp
clp
2802.91 1004.79 mo
-.000244141 1004.79 li
-.000244141 0 li
2802.91 0 li
2802.91 1004.79 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
933.54 561.095 mo
909.444 561.095 li
909.444 498.563 li
914.026 498.563 li
914.026 492.167 li
909.444 492.167 li
909.444 458.331 li
909.444 448.604 894.641 448.48 894.641 458.401 cv
797.188 419.967 li
697.091 458.561 li
697.091 457.926 li
697.091 453.838 693.778 450.524 689.689 450.524 cv
685.601 450.524 682.288 453.838 682.288 457.926 cv
682.288 492.167 li
677.442 492.167 li
677.442 498.563 li
682.288 498.563 li
682.288 826.66 li
737.129 826.624 li
933.54 826.624 li
933.54 561.095 li
cp
0 .059266 .0241703 0 cmyk
f
1033.31 816.501 mo
1033.31 828.098 li
1572.07 828.218 li
1572.07 566.809 li
1521 566.809 li
1521 479.494 li
1507.32 479.494 li
1507.32 491.315 li
1407.89 491.315 li
1407.89 478.461 li
1410.97 478.461 li
1410.97 467.277 li
1383.52 467.277 li
1383.52 478.461 li
1386.47 478.461 li
1386.47 491.315 li
1345.51 491.315 li
1345.51 479.494 li
1331.83 479.494 li
1331.83 600.91 li
1280.01 600.91 li
1280.01 591.243 li
1228.15 530.311 li
1220.53 530.311 li
1211.4 541.012 li
1205.44 540.943 li
1205.44 518.387 1205.44 506.481 1205.44 490.715 cv
1210.4 490.715 li
1210.4 481.786 li
1203.26 481.786 li
1173.42 414.22 li
1173.42 414.168 li
1143.54 481.786 li
1138.11 481.786 li
1138.11 490.715 li
1141.94 490.715 li
1141.94 541.012 li
1106.75 541.012 li
1097.63 530.311 li
1090.03 530.311 li
1038.3 590.915 li
1045.99 590.898 li
1045.99 590.915 li
1038.3 590.915 li
1038.3 816.501 li
1033.31 816.501 li
cp
f
1372.41 547.653 mo
1404.8 547.653 li
1411.42 547.653 li
1466.25 547.653 li
1466.25 537.695 li
1411.42 537.695 li
1404.8 537.695 li
1372.41 537.695 li
1372.41 547.653 li
cp
0 0 0 0 cmyk
f
1372.41 573.301 mo
1404.8 573.301 li
1411.42 573.301 li
1466.25 573.301 li
1466.25 563.343 li
1411.42 563.343 li
1404.8 563.343 li
1372.41 563.343 li
1372.41 573.301 li
cp
f
1372.41 598.948 mo
1404.8 598.948 li
1411.42 598.948 li
1466.25 598.948 li
1466.25 588.99 li
1411.42 588.99 li
1404.8 588.99 li
1372.41 588.99 li
1372.41 598.948 li
cp
f
2241.35 674.987 mo
2224.38 674.987 li
2224.38 658.015 li
2241.35 658.015 li
2241.35 674.987 li
cp
f
833.82 668.591 mo
815.598 686.813 li
815.598 697.222 li
844.229 668.591 li
833.82 668.591 li
cp
0 .156313 .0751965 0 cmyk
f
855.998 668.591 mo
815.598 708.991 li
815.598 719.399 li
866.406 668.591 li
855.998 668.591 li
cp
f
983.497 718.521 mo
873.053 828.966 li
883.461 828.966 li
983.497 728.93 li
983.497 718.521 li
cp
f
983.497 674.165 mo
828.696 828.966 li
839.105 828.966 li
983.497 684.573 li
983.497 674.165 li
cp
f
878.176 668.591 mo
815.598 731.169 li
815.598 741.578 li
888.585 668.591 li
878.176 668.591 li
cp
f
944.712 668.591 mo
815.598 797.704 li
815.598 808.113 li
955.12 668.591 li
944.712 668.591 li
cp
f
983.497 696.344 mo
850.875 828.966 li
861.282 828.966 li
983.497 706.751 li
983.497 696.344 li
cp
f
922.533 668.591 mo
815.598 775.526 li
815.598 785.935 li
932.942 668.591 li
922.533 668.591 li
cp
f
900.356 668.591 mo
815.598 753.349 li
815.598 763.756 li
910.763 668.591 li
900.356 668.591 li
cp
f
966.89 668.591 mo
815.598 819.883 li
815.598 828.966 li
816.922 828.966 li
977.298 668.591 li
966.89 668.591 li
cp
f
983.497 761.139 mo
915.669 828.966 li
926.078 828.966 li
983.497 771.547 li
983.497 761.139 li
cp
f
983.497 805.496 mo
960.027 828.966 li
970.435 828.966 li
983.497 815.903 li
983.497 805.496 li
cp
f
983.497 783.316 mo
937.848 828.966 li
948.256 828.966 li
983.497 793.725 li
983.497 783.316 li
cp
f
983.497 738.961 mo
893.491 828.966 li
903.9 828.966 li
983.497 749.368 li
983.497 738.961 li
cp
f
1985.22 723.673 mo
1985.22 733.591 li
2051.23 667.585 li
2051.23 657.666 li
1985.22 723.673 li
cp
f
1985.22 765.945 mo
1985.22 775.864 li
2051.23 709.857 li
2051.23 699.938 li
1985.22 765.945 li
cp
f
1985.22 660.269 mo
1985.22 670.188 li
2051.23 604.181 li
2051.23 594.263 li
1985.22 660.269 li
cp
f
1985.22 744.808 mo
1985.22 754.727 li
2051.23 688.72 li
2051.23 678.802 li
1985.22 744.808 li
cp
f
1985.22 702.537 mo
1985.22 712.457 li
2051.23 646.45 li
2051.23 636.531 li
1985.22 702.537 li
cp
f
1985.22 681.403 mo
1985.22 691.322 li
2051.23 625.315 li
2051.23 615.396 li
1985.22 681.403 li
cp
f
1985.22 787.081 mo
1985.22 796.999 li
2051.23 730.992 li
2051.23 721.074 li
1985.22 787.081 li
cp
f
1985.22 639.134 mo
1985.22 649.052 li
2051.23 583.046 li
2051.23 573.127 li
1985.22 639.134 li
cp
f
2036.63 830.132 mo
2051.23 815.532 li
2051.23 805.613 li
2026.71 830.132 li
2036.63 830.132 li
cp
f
2051.23 830.132 mo
2051.23 826.748 li
2047.85 830.132 li
2051.23 830.132 li
cp
f
2015.49 830.132 mo
2051.23 794.397 li
2051.23 784.479 li
2005.58 830.132 li
2015.49 830.132 li
cp
f
1985.22 808.215 mo
1985.22 818.135 li
2051.23 752.128 li
2051.23 742.208 li
1985.22 808.215 li
cp
f
1994.36 830.132 mo
2051.23 773.262 li
2051.23 763.344 li
1985.22 829.351 li
1985.22 830.132 li
1994.36 830.132 li
cp
f
2031.63 571.591 mo
1985.22 617.995 li
1985.22 627.914 li
2041.55 571.591 li
2031.63 571.591 li
cp
f
1989.36 571.591 mo
1985.22 575.726 li
1985.22 585.644 li
1999.28 571.591 li
1989.36 571.591 li
cp
f
2010.49 571.591 mo
1985.22 596.86 li
1985.22 606.779 li
2020.41 571.591 li
2010.49 571.591 li
cp
f
2078.03 827.561 mo
1872.15 827.561 li
1872.15 455.865 li
2078.03 455.865 li
2078.03 827.561 li
cp
0 .059266 .0241703 0 cmyk
f
2417.21 825.11 mo
2228.61 825.11 li
2228.61 427.641 li
2417.21 427.641 li
2417.21 825.11 li
cp
f
2375.93 465.773 mo
2269.9 465.773 li
2269.9 406.677 li
2375.93 406.677 li
2375.93 465.773 li
cp
f
2019.62 828.091 mo
2026.37 821.343 li
2026.37 811.425 li
2009.71 828.091 li
2019.62 828.091 li
cp
0 .156313 .0751965 0 cmyk
f
1977.35 828.091 mo
2026.37 779.069 li
2026.37 769.151 li
1967.43 828.091 li
1977.35 828.091 li
cp
f
1952.04 801.215 mo
1952.04 811.133 li
2026.37 736.801 li
2026.37 726.882 li
1952.04 801.215 li
cp
f
1952.04 780.079 mo
1952.04 789.998 li
2026.37 715.665 li
2026.37 705.747 li
1952.04 780.079 li
cp
f
1952.04 758.944 mo
1952.04 768.863 li
2026.37 694.531 li
2026.37 684.612 li
1952.04 758.944 li
cp
f
1956.22 828.091 mo
2026.37 757.936 li
2026.37 748.017 li
1952.04 822.349 li
1952.04 828.091 li
1956.22 828.091 li
cp
f
1998.49 828.091 mo
2026.37 800.205 li
2026.37 790.286 li
1988.57 828.091 li
1998.49 828.091 li
cp
f
1952.04 737.81 mo
1952.04 747.728 li
2026.37 673.396 li
2026.37 663.478 li
1952.04 737.81 li
cp
f
1981.54 593.074 mo
2003.52 571.091 li
1993.6 571.091 li
1981.54 583.155 li
1981.54 593.074 li
cp
f
1981.54 614.209 mo
2024.66 571.091 li
2014.74 571.091 li
1981.54 604.29 li
1981.54 614.209 li
cp
f
1952.04 718.333 mo
1952.04 728.251 li
2026.37 653.919 li
2026.37 644.001 li
1952.04 718.333 li
cp
f
1952.04 707.116 mo
1969.57 689.591 li
1959.65 689.591 li
1952.04 697.198 li
1952.04 707.116 li
cp
f
1981.54 667.698 mo
1981.54 677.616 li
2026.37 632.784 li
2026.37 622.866 li
1981.54 667.698 li
cp
f
1981.54 625.425 mo
1981.54 635.343 li
2026.37 590.511 li
2026.37 580.593 li
1981.54 625.425 li
cp
f
1981.54 646.563 mo
1981.54 656.481 li
2026.37 611.649 li
2026.37 601.73 li
1981.54 646.563 li
cp
f
1651.54 671.205 mo
1495.15 827.591 li
1505.07 827.591 li
1651.54 681.123 li
1651.54 671.205 li
cp
f
1651.54 628.935 mo
1452.88 827.591 li
1462.8 827.591 li
1651.54 638.854 li
1651.54 628.935 li
cp
f
1491.54 608.637 mo
1608.59 491.591 li
1598.67 491.591 li
1491.54 598.719 li
1491.54 608.637 li
cp
f
1362.67 727.591 mo
1263.54 826.719 li
1263.54 827.591 li
1272.59 827.591 li
1372.59 727.591 li
1362.67 727.591 li
cp
f
1651.54 650.069 mo
1474.02 827.591 li
1483.94 827.591 li
1651.54 659.988 li
1651.54 650.069 li
cp
f
1651.54 755.748 mo
1579.7 827.591 li
1589.62 827.591 li
1651.54 765.666 li
1651.54 755.748 li
cp
f
1651.54 692.34 mo
1516.29 827.591 li
1526.21 827.591 li
1651.54 702.259 li
1651.54 692.34 li
cp
f
1651.54 713.476 mo
1537.43 827.591 li
1547.34 827.591 li
1651.54 723.394 li
1651.54 713.476 li
cp
f
1651.54 734.612 mo
1558.56 827.591 li
1568.48 827.591 li
1651.54 744.531 li
1651.54 734.612 li
cp
f
1491.54 650.906 mo
1650.86 491.591 li
1640.94 491.591 li
1491.54 640.988 li
1491.54 650.906 li
cp
f
1404.94 727.591 mo
1304.94 827.591 li
1314.86 827.591 li
1414.86 727.591 li
1404.94 727.591 li
cp
f
1491.54 629.772 mo
1629.72 491.591 li
1619.8 491.591 li
1491.54 619.853 li
1491.54 629.772 li
cp
f
1383.8 727.591 mo
1283.8 827.591 li
1293.72 827.591 li
1393.72 727.591 li
1383.8 727.591 li
cp
f
1651.54 586.665 mo
1410.61 827.591 li
1420.53 827.591 li
1651.54 596.584 li
1651.54 586.665 li
cp
f
1426.07 727.591 mo
1326.07 827.591 li
1335.99 827.591 li
1435.99 727.591 li
1426.07 727.591 li
cp
f
1491.54 662.124 mo
1491.54 672.042 li
1651.54 512.042 li
1651.54 502.123 li
1491.54 662.124 li
cp
f
1447.21 727.591 mo
1347.21 827.591 li
1357.13 827.591 li
1457.13 727.591 li
1447.21 727.591 li
cp
f
1491.54 683.258 mo
1491.54 693.177 li
1651.54 533.177 li
1651.54 523.258 li
1491.54 683.258 li
cp
f
1491.54 725.527 mo
1491.54 727.591 li
1489.48 727.591 li
1389.48 827.591 li
1399.4 827.591 li
1651.54 575.446 li
1651.54 565.527 li
1491.54 725.527 li
cp
f
1468.34 727.591 mo
1368.34 827.591 li
1378.26 827.591 li
1478.26 727.591 li
1468.34 727.591 li
cp
f
1491.54 704.393 mo
1491.54 714.312 li
1651.54 554.311 li
1651.54 544.393 li
1491.54 704.393 li
cp
f
1651.54 607.801 mo
1431.75 827.591 li
1441.67 827.591 li
1651.54 617.719 li
1651.54 607.801 li
cp
f
1651.54 776.882 mo
1600.83 827.591 li
1610.75 827.591 li
1651.54 786.802 li
1651.54 776.882 li
cp
f
1651.54 798.018 mo
1621.97 827.591 li
1631.89 827.591 li
1651.54 807.936 li
1651.54 798.018 li
cp
f
1651.54 819.152 mo
1643.1 827.591 li
1651.54 827.591 li
1651.54 819.152 li
cp
f
1491.54 525.752 mo
1525.7 491.591 li
1515.78 491.591 li
1491.54 515.834 li
1491.54 525.752 li
cp
f
1263.54 753.752 mo
1289.7 727.591 li
1279.78 727.591 li
1263.54 743.834 li
1263.54 753.752 li
cp
f
1263.54 727.591 mo
1263.54 732.618 li
1268.57 727.591 li
1263.54 727.591 li
cp
f
1491.54 504.618 mo
1504.57 491.591 li
1494.65 491.591 li
1491.54 494.699 li
1491.54 504.618 li
cp
f
1491.54 589.16 mo
1589.11 491.591 li
1579.19 491.591 li
1491.54 579.242 li
1491.54 589.16 li
cp
f
1263.54 817.16 mo
1353.11 727.591 li
1343.19 727.591 li
1263.54 807.241 li
1263.54 817.16 li
cp
f
1491.54 568.025 mo
1567.97 491.591 li
1558.06 491.591 li
1491.54 558.106 li
1491.54 568.025 li
cp
f
1263.54 796.024 mo
1331.97 727.591 li
1322.06 727.591 li
1263.54 786.106 li
1263.54 796.024 li
cp
f
1491.54 546.891 mo
1546.84 491.591 li
1536.92 491.591 li
1491.54 536.972 li
1491.54 546.891 li
cp
f
1263.54 774.891 mo
1310.84 727.591 li
1300.92 727.591 li
1263.54 764.972 li
1263.54 774.891 li
cp
f
2193.71 364.655 mo
2182.08 364.655 li
2182.08 361.155 li
2193.71 361.155 li
2193.71 364.655 li
cp
0 .059266 .0241703 0 cmyk
f
2170.04 364.655 mo
2081.68 364.655 li
2081.68 361.155 li
2170.04 361.155 li
2170.04 364.655 li
cp
f
786.101 340.756 mo
775.063 340.756 li
775.063 337.256 li
786.101 337.256 li
786.101 340.756 li
cp
f
763.633 340.756 mo
679.733 340.756 li
679.733 337.256 li
763.633 337.256 li
763.633 340.756 li
cp
f
1888.62 263.522 mo
1877.7 263.522 li
1877.7 260.022 li
1888.62 260.022 li
1888.62 263.522 li
cp
f
1866.39 263.522 mo
1783.33 263.522 li
1783.33 260.022 li
1866.39 260.022 li
1866.39 263.522 li
cp
f
2230.23 347.745 mo
2141.04 347.745 li
2141.04 344.245 li
2230.23 344.245 li
2230.23 347.745 li
cp
f
999.739 373.09 mo
985.704 373.09 li
985.704 369.59 li
999.739 369.59 li
999.739 373.09 li
cp
f
1120.95 373.09 mo
1014.27 373.09 li
1014.27 369.59 li
1120.95 369.59 li
1120.95 373.09 li
cp
f
1049.28 352.676 mo
941.609 352.676 li
941.609 349.176 li
1049.28 349.176 li
1049.28 352.676 li
cp
f
1280.4 255.978 mo
1278.85 253.103 li
1278.79 252.975 1278.71 252.813 1278.61 252.623 cv
1277.64 250.678 1275.05 245.508 1267.44 243.083 cv
1268.5 239.749 li
1275.11 241.854 1278.58 245.827 1280.38 248.62 cv
1280.92 247.693 1284.38 242.271 1292.29 239.749 cv
1293.35 243.083 li
1286.28 245.338 1283.41 250.368 1283.38 250.419 cv
1280.4 255.978 li
cp
0 .393561 .289555 0 cmyk
f
1224.43 237.078 mo
1222.96 234.764 li
1222.86 234.6 1222.75 234.417 1222.63 234.219 cv
1221.59 232.474 1220.01 229.835 1214.8 228.411 cv
1215.73 225.034 li
1220.59 226.365 1223.05 228.708 1224.47 230.627 cv
1225.94 228.664 1228.38 226.348 1233.19 225.034 cv
1234.11 228.411 li
1229.04 229.798 1227.42 232.38 1226.24 234.266 cv
1224.43 237.078 li
cp
f
1974 255.689 mo
1972.45 252.814 li
1972.39 252.692 1972.31 252.539 1972.22 252.357 cv
1971.3 250.524 1968.87 245.654 1961.7 243.371 cv
1962.76 240.037 li
1968.95 242.008 1972.25 245.702 1973.97 248.352 cv
1974.7 247.177 1978.07 242.319 1985.23 240.037 cv
1986.29 243.371 li
1979.62 245.497 1976.93 250.229 1976.9 250.276 cv
1974 255.689 li
cp
f
678.441 292.014 mo
676.899 289.14 li
676.837 289.024 676.764 288.879 676.677 288.707 cv
675.819 286.99 673.537 282.432 666.829 280.294 cv
667.892 276.96 li
673.646 278.793 676.759 282.201 678.418 284.698 cv
679.285 283.323 682.421 279.054 688.99 276.96 cv
690.053 280.294 li
683.807 282.285 681.288 286.709 681.263 286.754 cv
678.441 292.014 li
cp
f
1056.99 431.858 mo
1055.45 428.983 li
1055.38 428.851 1055.29 428.683 1055.19 428.485 cv
1054.17 426.445 1051.46 421.027 1043.49 418.486 cv
1044.55 415.152 li
1051.51 417.369 1055.13 421.578 1056.97 424.489 cv
1057.25 424.004 1060.85 417.886 1069.43 415.152 cv
1070.49 418.486 li
1063.07 420.852 1060.15 425.97 1060.03 426.187 cv
1056.99 431.858 li
cp
f
985.99 250.486 mo
1026.26 250.486 li
1025.37 240.158 1016.68 232.025 1006.13 232.025 cv
995.571 232.025 986.879 240.158 985.99 250.486 cv
cp
1029.84 253.986 mo
982.414 253.986 li
982.414 252.236 li
982.414 239.162 993.051 228.525 1006.13 228.525 cv
1019.2 228.525 1029.84 239.162 1029.84 252.236 cv
1029.84 253.986 li
cp
f
2167.76 250.486 mo
2208.03 250.486 li
2207.14 240.158 2198.45 232.025 2187.89 232.025 cv
2177.34 232.025 2168.65 240.158 2167.76 250.486 cv
cp
2211.6 253.986 mo
2164.18 253.986 li
2164.18 252.236 li
2164.18 239.162 2174.82 228.525 2187.89 228.525 cv
2200.97 228.525 2211.6 239.162 2211.6 252.236 cv
2211.6 253.986 li
cp
f
1352.96 394.718 mo
1400.28 394.718 li
1399.38 382.45 1389.11 372.743 1376.62 372.743 cv
1364.12 372.743 1353.85 382.45 1352.96 394.718 cv
cp
1403.84 398.218 mo
1349.39 398.218 li
1349.39 396.468 li
1349.39 381.456 1361.61 369.243 1376.62 369.243 cv
1391.63 369.243 1403.84 381.456 1403.84 396.468 cv
1403.84 398.218 li
cp
f
1490.32 318.321 mo
1317.98 318.321 li
1317.71 316.885 li
1317.31 314.69 1317.11 312.481 1317.11 310.32 cv
1317.11 290.23 1333.46 273.886 1353.55 273.886 cv
1354.62 273.886 1355.72 273.937 1356.82 274.038 cv
1360.45 251.908 1379.72 235.432 1402.33 235.432 cv
1422.06 235.432 1439.81 248.277 1446.06 266.867 cv
1448.7 266.333 1451.39 266.063 1454.07 266.063 cv
1468.27 266.063 1481.37 273.512 1488.65 285.614 cv
1492.81 283.72 1497.37 282.725 1501.94 282.725 cv
1509.96 282.725 1517.48 285.632 1523.37 290.958 cv
1530.02 280.371 1541.64 273.886 1554.24 273.886 cv
1569.59 273.886 1583.38 283.593 1588.55 298.041 cv
1585.26 299.221 li
1580.58 286.16 1568.12 277.386 1554.24 277.386 cv
1542.16 277.386 1531.07 283.983 1525.29 294.603 cv
1524.15 296.702 li
1522.49 294.979 li
1517.06 289.334 1509.76 286.225 1501.94 286.225 cv
1497.3 286.225 1492.86 287.312 1488.76 289.456 cv
1487.24 290.251 li
1486.42 288.745 li
1479.94 276.913 1467.55 269.563 1454.07 269.563 cv
1451.13 269.563 1448.17 269.92 1445.29 270.624 cv
1443.67 271.02 li
1443.2 269.422 li
1437.87 251.47 1421.07 238.932 1402.33 238.932 cv
1380.9 238.932 1362.72 254.948 1360.05 276.188 cv
1359.83 277.943 li
1358.07 277.702 li
1356.54 277.492 1355.02 277.386 1353.55 277.386 cv
1335.39 277.386 1320.61 292.16 1320.61 310.32 cv
1320.61 311.803 1320.72 313.311 1320.93 314.821 cv
1490.32 314.821 li
1490.32 318.321 li
cp
f
1950.16 346.086 mo
2124.62 346.086 li
2123.75 329.837 2110.23 316.866 2093.75 316.866 cv
2084.14 316.866 2075.24 321.226 2069.33 328.826 cv
2067.52 331.151 li
2066.35 328.451 li
2060.63 315.345 2047.7 306.875 2033.42 306.875 cv
2021.13 306.875 2009.82 313.063 2003.17 323.43 cv
2002.11 325.082 li
2000.59 323.839 li
1995.09 319.343 1988.15 316.866 1981.04 316.866 cv
1964.56 316.866 1951.05 329.824 1950.16 346.086 cv
cp
2126.42 349.586 mo
1946.62 349.586 li
1946.62 347.836 li
1946.62 328.807 1962.06 313.366 1981.04 313.366 cv
1988.31 313.366 1995.44 315.696 2001.29 319.961 cv
2008.7 309.54 2020.57 303.375 2033.42 303.375 cv
2048.17 303.375 2061.6 311.603 2068.36 324.554 cv
2074.88 317.411 2083.98 313.366 2093.75 313.366 cv
2112.73 313.366 2128.17 328.807 2128.17 347.786 cv
2128.17 349.536 li
2126.42 349.586 li
cp
f
726.396 323.07 mo
835.649 323.07 li
834.748 310.315 824.084 300.215 811.105 300.215 cv
804.995 300.215 799.124 302.495 794.573 306.637 cv
793.013 308.055 li
791.906 306.261 li
785.386 295.701 774.123 289.396 761.777 289.396 cv
742.83 289.396 727.311 304.347 726.396 323.07 cv
cp
839.21 326.57 mo
722.853 326.57 li
722.853 324.82 li
722.853 303.357 740.314 285.896 761.777 285.896 cv
774.67 285.896 786.489 292.15 793.778 302.727 cv
798.724 298.836 804.802 296.715 811.105 296.715 cv
826.602 296.715 839.21 309.323 839.21 324.82 cv
839.21 326.57 li
cp
f
1720.05 244.128 mo
1817.49 244.128 li
1816.6 232.896 1807.17 224.028 1795.71 224.028 cv
1790.29 224.028 1785.07 226.054 1781.03 229.731 cv
1779.47 231.149 li
1778.36 229.355 li
1772.56 219.954 1762.53 214.341 1751.54 214.341 cv
1734.74 214.341 1720.96 227.549 1720.05 244.128 cv
cp
1821.06 247.628 mo
1716.5 247.628 li
1716.5 245.878 li
1716.5 226.559 1732.22 210.841 1751.54 210.841 cv
1763.08 210.841 1773.67 216.408 1780.24 225.832 cv
1784.67 222.398 1790.09 220.528 1795.71 220.528 cv
1809.69 220.528 1821.06 231.9 1821.06 245.878 cv
1821.06 247.628 li
cp
f
2342.03 326.92 mo
2432.99 326.92 li
2432.1 316.521 2423.35 308.331 2412.73 308.331 cv
2407.68 308.331 2402.83 310.216 2399.06 313.64 cv
2397.5 315.058 li
2396.4 313.264 li
2390.98 304.498 2381.64 299.265 2371.39 299.265 cv
2355.76 299.265 2342.94 311.518 2342.03 326.92 cv
cp
2436.57 330.42 mo
2338.48 330.42 li
2338.48 328.67 li
2338.48 310.526 2353.24 295.765 2371.39 295.765 cv
2382.19 295.765 2392.09 300.955 2398.27 309.746 cv
2402.42 306.563 2407.48 304.831 2412.73 304.831 cv
2425.87 304.831 2436.57 315.525 2436.57 328.67 cv
2436.57 330.42 li
cp
f
458.63 354.463 mo
443.688 354.463 430.979 366.892 430.059 381.979 cv
569.792 381.938 li
568.898 370.705 559.47 361.837 548.011 361.837 cv
542.587 361.837 537.373 363.862 533.331 367.54 cv
531.772 368.958 li
530.664 367.165 li
524.858 357.763 514.831 352.149 503.84 352.149 cv
495.013 352.149 486.82 355.732 480.769 362.237 cv
479.567 363.53 li
478.284 362.317 li
472.933 357.252 465.953 354.463 458.63 354.463 cv
cp
426.506 385.481 mo
426.506 383.73 li
426.506 365.662 440.917 350.963 458.63 350.963 cv
466.279 350.963 473.592 353.671 479.408 358.624 cv
485.935 352.265 494.744 348.649 503.84 348.649 cv
515.381 348.649 525.965 354.217 532.535 363.641 cv
536.969 360.207 542.392 358.337 548.011 358.337 cv
561.99 358.337 573.362 369.709 573.362 383.688 cv
573.362 385.437 li
426.506 385.481 li
cp
f
1064.69 347.117 mo
1233.29 347.167 li
1232.36 328.695 1216.85 313.411 1198.6 313.411 cv
1189.71 313.411 1181.24 316.796 1174.75 322.941 cv
1173.46 324.155 li
1172.26 322.863 li
1164.93 314.977 1154.99 310.633 1144.29 310.633 cv
1130.97 310.633 1118.81 317.438 1111.77 328.835 cv
1110.66 330.629 li
1109.1 329.21 li
1104.18 324.734 1097.84 322.269 1091.23 322.269 cv
1077.16 322.269 1065.6 333.264 1064.69 347.117 cv
cp
1236.83 350.669 mo
1061.14 350.615 li
1061.14 348.866 li
1061.14 332.271 1074.64 318.769 1091.23 318.769 cv
1098.03 318.769 1104.58 321.072 1109.9 325.295 cv
1117.71 313.885 1130.42 307.133 1144.29 307.133 cv
1155.4 307.133 1165.75 311.418 1173.62 319.238 cv
1180.58 313.211 1189.39 309.911 1198.6 309.911 cv
1219.68 309.911 1236.83 327.409 1236.83 348.918 cv
1236.83 350.669 li
cp
f
1523.03 270.826 mo
1520.99 267.979 li
1532.23 259.948 1538.83 247.431 1539.09 233.636 cv
1539.54 209.834 1520.54 190.105 1496.73 189.658 cv
1496.46 189.652 1496.19 189.65 1495.91 189.65 cv
1472.48 189.65 1453.2 208.486 1452.76 232.014 cv
1452.61 239.586 1454.46 247.072 1458.1 253.663 cv
1455.04 255.354 li
1451.1 248.228 1449.1 240.133 1449.26 231.947 cv
1449.74 206.515 1470.58 186.15 1495.91 186.15 cv
1496.21 186.15 1496.5 186.153 1496.8 186.158 cv
1522.53 186.643 1543.07 207.971 1542.59 233.702 cv
1542.31 248.396 1535 262.273 1523.03 270.826 cv
cp
f
2347.26 452.198 mo
2347.26 484.592 li
2347.26 491.214 li
2347.26 546.039 li
2357.22 546.039 li
2357.22 491.214 li
2357.22 484.592 li
2357.22 452.198 li
2347.26 452.198 li
cp
0 0 0 0 cmyk
f
2321.61 452.198 mo
2321.61 484.592 li
2321.61 491.214 li
2321.61 546.039 li
2331.57 546.039 li
2331.57 491.214 li
2331.57 484.592 li
2331.57 452.198 li
2321.61 452.198 li
cp
f
2295.97 452.198 mo
2295.97 484.592 li
2295.97 491.214 li
2295.97 546.039 li
2305.92 546.039 li
2305.92 491.214 li
2305.92 484.592 li
2305.92 452.198 li
2295.97 452.198 li
cp
f
830.114 484.037 mo
830.114 504.94 li
830.114 509.213 li
830.114 544.591 li
840.072 544.591 li
840.072 509.213 li
840.072 504.94 li
840.072 484.037 li
830.114 484.037 li
cp
f
804.466 484.037 mo
804.466 516.431 li
804.466 523.053 li
804.466 577.878 li
814.424 577.878 li
814.424 523.053 li
814.424 516.431 li
814.424 484.037 li
804.466 484.037 li
cp
f
778.819 484.037 mo
778.819 516.431 li
778.819 523.053 li
778.819 577.878 li
788.777 577.878 li
788.777 523.053 li
788.777 516.431 li
788.777 484.037 li
778.819 484.037 li
cp
f
753.17 484.037 mo
753.17 504.94 li
753.17 509.213 li
753.17 544.591 li
763.128 544.591 li
763.128 509.213 li
763.128 504.94 li
763.128 484.037 li
753.17 484.037 li
cp
f
453.97 622.701 mo
453.97 489.84 li
480.582 489.84 li
480.582 464.13 li
641.507 464.13 li
641.507 625.385 li
453.97 622.701 li
cp
0 .059266 .0241703 0 cmyk
f
703.659 590.682 mo
599.377 590.682 li
599.377 511.404 li
703.659 511.404 li
703.659 590.682 li
cp
f
801.193 795.173 mo
795.335 772.769 li
796.576 772.757 li
795.403 750.094 li
792.976 735.791 li
792.428 735.266 li
792.91 735.267 793.394 735.208 793.87 735.067 cv
797.17 734.091 798.848 729.928 797.617 725.77 cv
796.387 721.61 792.714 719.031 789.414 720.008 cv
786.115 720.984 784.437 725.146 785.666 729.306 cv
786.123 730.85 786.918 732.174 787.905 733.182 cv
785.759 737.902 li
777.624 751.246 li
776.148 772.82 li
779.805 773.166 li
779.318 782.69 li
779.995 783.384 li
779.805 795.349 li
767.74 820.189 li
770.381 823.541 li
788.033 798.772 li
790.448 794.076 li
793.786 797.49 li
798.687 827.306 li
802.601 827.306 li
801.193 795.173 li
cp
0 0 0 0 cmyk
f
559.86 813.682 mo
559.86 825.467 li
439.057 825.467 li
439.057 813.682 li
559.86 813.682 li
cp
f
497.428 589.255 mo
470.887 615.796 li
481.243 615.796 li
507.784 589.255 li
497.428 589.255 li
cp
.0335393 .168856 .28278 0 cmyk
f
475.369 589.255 mo
448.828 615.796 li
459.184 615.796 li
485.725 589.255 li
475.369 589.255 li
cp
f
519.498 589.255 mo
492.957 615.796 li
503.303 615.796 li
529.844 589.255 li
519.498 589.255 li
cp
f
563.627 589.255 mo
537.086 615.796 li
547.443 615.796 li
573.98 589.255 li
563.627 589.255 li
cp
f
585.687 589.255 mo
559.146 615.796 li
569.502 615.796 li
596.043 589.255 li
585.687 589.255 li
cp
f
607.757 589.255 mo
581.216 615.796 li
581.289 615.796 li
617.538 589.255 li
607.757 589.255 li
cp
f
541.557 589.255 mo
515.016 615.796 li
525.373 615.796 li
551.914 589.255 li
541.557 589.255 li
cp
f
583.249 630.555 mo
644.032 586.053 li
577.231 525.04 li
421.069 525.04 li
368.78 568.586 li
453.422 630.555 li
583.249 630.555 li
cp
0 .553887 .404578 0 cmyk
f
386.032 632.434 mo
386.032 813.695 li
486.398 813.695 li
489.556 813.695 li
578.531 813.695 li
578.531 632.117 li
386.032 632.434 li
cp
0 0 0 0 cmyk
f
246.569 629.603 mo
246.569 813.695 li
346.935 813.695 li
350.093 813.695 li
439.067 813.695 li
439.067 629.281 li
246.569 629.603 li
cp
f
756.787 813.695 mo
560.214 813.695 li
560.214 655.603 li
756.787 655.603 li
756.787 813.695 li
cp
f
559.86 825.826 mo
551.836 825.826 li
551.836 635.828 li
559.86 635.828 li
559.86 825.826 li
cp
0 .665949 .510582 0 cmyk
f
565.639 639.397 mo
246.936 639.397 li
246.936 631.54 li
565.639 631.54 li
565.639 639.397 li
cp
f
757.032 665.915 mo
560.483 665.915 li
560.483 658.058 li
757.032 658.058 li
757.032 665.915 li
cp
f
658.501 552.889 mo
541.849 649.437 li
775.153 649.437 li
658.501 552.889 li
cp
0 .393561 .289555 0 cmyk
f
342.781 524.058 mo
226.129 623.031 li
459.432 623.031 li
342.781 524.058 li
cp
f
775.719 649.451 mo
542.416 649.451 li
542.416 658.291 li
775.719 658.291 li
775.719 649.451 li
cp
0 .553887 .404578 0 cmyk
f
458.71 622.701 mo
226.129 622.701 li
226.129 631.914 li
458.71 631.914 li
458.71 622.701 li
cp
f
227.918 813.682 mo
439.057 813.682 li
439.057 825.467 li
227.918 825.467 li
227.918 813.682 li
cp
0 0 0 0 cmyk
f
778.925 813.682 mo
778.925 825.467 li
559.86 825.467 li
559.86 813.682 li
778.925 813.682 li
cp
f
379.498 770.661 mo
301.412 770.661 li
301.412 676.106 li
379.498 676.106 li
379.498 770.661 li
cp
0 .393561 .289555 0 cmyk
f
536.031 743.961 mo
463.837 743.961 li
463.837 689.157 li
536.031 689.157 li
536.031 743.961 li
cp
f
536.031 689.157 mo
463.837 689.157 li
463.837 743.961 li
536.031 743.961 li
536.031 689.157 li
536.031 689.157 li
cp
529.767 695.421 mo
529.767 737.697 li
470.101 737.697 li
470.101 695.421 li
529.767 695.421 li
529.767 695.421 li
cp
0 .665949 .510582 0 cmyk
f
681.14 812.667 mo
635.61 812.667 li
635.61 746.673 li
681.14 746.673 li
681.14 812.667 li
cp
0 .393561 .289555 0 cmyk
f
720.08 720.495 mo
699.809 698.814 li
618.325 698.775 li
597.932 720.408 li
597.932 728.756 li
720.08 728.756 li
720.08 720.495 li
cp
f
448.138 825.467 mo
439.632 825.467 li
439.632 635.469 li
448.138 635.469 li
448.138 825.467 li
cp
0 .665949 .510582 0 cmyk
f
611.309 813.979 mo
604.311 813.979 li
604.311 729.409 li
611.309 729.409 li
611.309 813.979 li
cp
0 .393561 .289555 0 cmyk
f
713.205 813.979 mo
706.208 813.979 li
706.208 729.409 li
713.205 729.409 li
713.205 813.979 li
cp
f
458.937 623.313 mo
382.376 557.21 li
389.426 549.045 li
474.736 622.701 li
458.937 623.313 li
cp
0 .665949 .510582 0 cmyk
f
631.752 575.63 mo
577.312 623.031 li
561.262 622.701 li
624.668 567.494 li
631.752 575.63 li
cp
f
564.562 632.754 mo
460.511 632.754 li
460.511 623.031 li
574.152 622.701 li
564.562 632.754 li
cp
f
721.359 728.756 mo
597.932 728.756 li
597.932 721.488 li
721.359 721.488 li
721.359 728.756 li
cp
0 .553887 .404578 0 cmyk
f
439.057 825.467 mo
326.185 825.467 li
338.875 814.007 li
439.057 814.007 li
439.057 825.467 li
cp
f
301.86 733.18 mo
358.777 676.263 li
349.993 676.263 li
301.86 724.396 li
301.86 733.18 li
cp
0 0 0 0 cmyk
f
301.86 760.363 mo
301.86 769.146 li
379.206 691.801 li
379.206 683.017 li
301.86 760.363 li
cp
f
319.585 770.141 mo
379.206 710.52 li
379.206 701.734 li
310.8 770.141 li
319.585 770.141 li
cp
f
309.83 771.202 mo
301.412 771.202 li
301.412 676.106 li
309.83 676.106 li
309.83 771.202 li
cp
0 .665949 .510582 0 cmyk
f
379.498 771.202 mo
371.08 771.202 li
371.08 676.106 li
379.498 676.106 li
379.498 771.202 li
cp
f
301.412 677.15 mo
379.498 677.15 li
379.498 684.257 li
301.412 684.257 li
301.412 677.15 li
cp
f
301.412 763.515 mo
379.498 763.515 li
379.498 770.621 li
301.412 770.621 li
301.412 763.515 li
cp
f
635.019 747.108 mo
635.019 750.359 li
638.27 747.108 li
635.019 747.108 li
cp
0 .553887 .404578 0 cmyk
f
648.051 812.2 mo
681.513 778.737 li
681.513 769.953 li
639.266 812.2 li
648.051 812.2 li
cp
f
666.768 812.2 mo
681.513 797.455 li
681.513 788.672 li
657.985 812.2 li
666.768 812.2 li
cp
f
681.513 812.2 mo
681.513 807.389 li
676.702 812.2 li
681.513 812.2 li
cp
f
635.019 787.795 mo
675.706 747.108 li
666.922 747.108 li
635.019 779.011 li
635.019 787.795 li
cp
f
635.019 797.729 mo
635.019 806.513 li
681.513 760.02 li
681.513 751.235 li
635.019 797.729 li
cp
f
635.019 769.077 mo
656.989 747.108 li
648.204 747.108 li
635.019 760.293 li
635.019 769.077 li
cp
f
682.623 752.29 mo
635.61 752.29 li
635.61 746.673 li
682.623 746.673 li
682.623 752.29 li
cp
0 .665949 .510582 0 cmyk
f
636.654 746.673 mo
641.121 746.673 li
641.121 812.667 li
636.654 812.667 li
636.654 746.673 li
cp
f
677.113 746.673 mo
681.579 746.673 li
681.579 812.667 li
677.113 812.667 li
677.113 746.673 li
cp
f
437.922 779.507 mo
423.394 779.507 li
423.394 770.205 li
437.922 770.205 li
437.922 779.507 li
cp
.0382086 .0827039 .0640269 0 cmyk
f
744.664 762.389 mo
730.136 762.389 li
730.136 753.088 li
744.664 753.088 li
744.664 762.389 li
cp
f
757.42 699.815 mo
738.333 699.815 li
738.333 690.515 li
757.42 690.515 li
757.42 699.815 li
cp
f
426.752 762.389 mo
405.413 762.389 li
405.413 753.088 li
426.752 753.088 li
426.752 762.389 li
cp
f
248.239 660.712 mo
262.766 660.659 li
262.8 669.96 li
248.272 670.014 li
248.239 660.712 li
cp
f
259.471 677.788 mo
280.809 677.711 li
280.844 687.012 li
259.505 687.09 li
259.471 677.788 li
cp
f
1609.81 368.202 mo
1738.83 368.202 li
1738.83 315.958 li
1609.81 315.958 li
1609.81 368.202 li
cp
0 0 0 0 cmyk
f
1571.7 422.385 mo
1700.72 422.385 li
1700.72 368.202 li
1571.7 368.202 li
1571.7 422.385 li
cp
f
1517.83 828.282 mo
1646.85 828.282 li
1646.85 421.845 li
1517.83 421.845 li
1517.83 828.282 li
cp
f
1902.6 421.882 mo
1848.73 421.882 li
1848.73 368.202 li
1810.62 368.202 li
1810.62 315.958 li
1738.83 315.958 li
1738.83 368.202 li
1700.72 368.202 li
1700.72 421.882 li
1646.85 421.882 li
1646.85 828.282 li
1902.6 828.282 li
1902.6 421.882 li
cp
f
1794.88 425.864 mo
1754.58 425.864 li
1754.58 389.406 li
1794.88 389.406 li
1794.88 425.864 li
cp
0 .393561 .289555 0 cmyk
f
1745.3 538.114 mo
1697.91 538.114 li
1697.91 469.535 li
1745.3 469.535 li
1745.3 538.114 li
cp
f
1845.31 540.103 mo
1797.92 540.103 li
1797.92 469.535 li
1845.31 469.535 li
1845.31 540.103 li
cp
f
1745.3 655.463 mo
1697.91 655.463 li
1697.91 586.884 li
1745.3 586.884 li
1745.3 655.463 li
cp
f
1845.31 657.451 mo
1797.92 657.451 li
1797.92 586.884 li
1845.31 586.884 li
1845.31 657.451 li
cp
f
1608.83 517.068 mo
1557.83 517.068 li
1557.83 476.029 li
1608.83 476.029 li
1608.83 517.068 li
cp
f
1608.83 634.426 mo
1557.83 634.426 li
1557.83 593.387 li
1608.83 593.387 li
1608.83 634.426 li
cp
f
1608.83 751.775 mo
1557.83 751.775 li
1557.83 710.736 li
1608.83 710.736 li
1608.83 751.775 li
cp
f
1841.08 828.282 mo
1815.52 828.282 li
1815.52 745.214 li
1815.52 738.157 1821.24 732.437 1828.3 732.437 cv
1835.36 732.437 1841.08 738.157 1841.08 745.214 cv
1841.08 828.282 li
cp
0 .553887 .404578 0 cmyk
f
1814.28 711.762 mo
1792.6 711.762 li
1792.6 700.296 li
1814.28 700.296 li
1814.28 711.762 li
cp
0 .665949 .510582 0 cmyk
f
1646.85 828.282 mo
1623.55 828.282 li
1623.55 422.488 li
1646.85 422.488 li
1646.85 828.282 li
cp
f
1701.71 421.845 mo
1678.12 421.845 li
1678.12 368.202 li
1701.71 368.202 li
1701.71 421.845 li
cp
f
1739.49 368.901 mo
1715.89 368.901 li
1715.89 315.259 li
1739.49 315.259 li
1739.49 368.901 li
cp
f
1792.09 425.175 mo
1785.57 425.175 li
1785.57 390.27 li
1792.09 390.27 li
1792.09 425.175 li
cp
f
1791.8 389.943 mo
1791.8 396.466 li
1754.72 396.466 li
1754.72 389.943 li
1791.8 389.943 li
cp
f
1744.86 539.886 mo
1738.34 539.886 li
1738.34 470.398 li
1744.86 470.398 li
1744.86 539.886 li
cp
f
1744.57 470.072 mo
1744.57 476.595 li
1698.06 476.595 li
1698.06 470.072 li
1744.57 470.072 li
cp
f
1844.87 539.886 mo
1838.34 539.886 li
1838.34 470.398 li
1844.87 470.398 li
1844.87 539.886 li
cp
f
1844.57 470.072 mo
1844.57 476.595 li
1798.06 476.595 li
1798.06 470.072 li
1844.57 470.072 li
cp
f
1744.86 657.233 mo
1738.34 657.233 li
1738.34 587.746 li
1744.86 587.746 li
1744.86 657.233 li
cp
f
1744.57 587.421 mo
1744.57 593.942 li
1698.06 593.942 li
1698.06 587.421 li
1744.57 587.421 li
cp
f
1745.3 768.11 mo
1697.91 768.11 li
1697.91 699.531 li
1745.3 699.531 li
1745.3 768.11 li
cp
0 .393561 .289555 0 cmyk
f
1744.86 769.881 mo
1738.34 769.881 li
1738.34 700.395 li
1744.86 700.395 li
1744.86 769.881 li
cp
0 .665949 .510582 0 cmyk
f
1744.57 700.068 mo
1744.57 706.59 li
1698.06 706.59 li
1698.06 700.068 li
1744.57 700.068 li
cp
f
1844.87 657.233 mo
1838.34 657.233 li
1838.34 587.746 li
1844.87 587.746 li
1844.87 657.233 li
cp
f
1844.57 587.421 mo
1844.57 593.942 li
1798.06 593.942 li
1798.06 587.421 li
1844.57 587.421 li
cp
f
1558.56 517.016 mo
1565.08 517.016 li
1565.08 476.893 li
1558.56 476.893 li
1558.56 517.016 li
cp
f
1558.85 476.566 mo
1558.85 483.089 li
1608.97 483.089 li
1608.97 476.566 li
1558.85 476.566 li
cp
f
1558.56 634.372 mo
1565.08 634.372 li
1565.08 594.249 li
1558.56 594.249 li
1558.56 634.372 li
cp
f
1558.85 593.923 mo
1558.85 600.445 li
1608.97 600.445 li
1608.97 593.923 li
1558.85 593.923 li
cp
f
1558.56 751.723 mo
1565.08 751.723 li
1565.08 711.6 li
1558.56 711.6 li
1558.56 751.723 li
cp
f
1558.85 711.273 mo
1558.85 717.795 li
1608.97 717.795 li
1608.97 711.273 li
1558.85 711.273 li
cp
f
1647.51 828.282 mo
1557.83 828.282 li
1578.4 808.608 li
1647.51 808.608 li
1647.51 828.282 li
cp
f
1802.98 828.282 mo
1792.6 828.282 li
1792.6 711.762 li
1802.98 711.762 li
1802.98 828.282 li
cp
f
1586.72 533.618 mo
1557.83 533.618 li
1570.17 517.233 li
1586.72 517.233 li
1586.72 533.618 li
cp
f
1586.72 650.893 mo
1557.83 650.893 li
1570.17 634.508 li
1586.72 634.508 li
1586.72 650.893 li
cp
f
1586.72 769.509 mo
1557.83 769.509 li
1570.17 753.124 li
1586.72 753.124 li
1586.72 769.509 li
cp
f
1892.66 657.946 mo
1872.15 657.946 li
1872.15 642.788 li
1892.66 642.788 li
1892.66 657.946 li
cp
.0382086 .0827039 .0640269 0 cmyk
f
1795.83 511.404 mo
1775.32 511.404 li
1775.32 496.246 li
1795.83 496.246 li
1795.83 511.404 li
cp
f
1669.12 755.562 mo
1648.61 755.562 li
1648.61 740.403 li
1669.12 740.403 li
1669.12 755.562 li
cp
f
1900.26 590.105 mo
1869.94 590.105 li
1869.94 574.947 li
1900.26 574.947 li
1900.26 590.105 li
cp
f
1691.88 774.757 mo
1661.56 774.757 li
1661.56 759.598 li
1691.88 759.598 li
1691.88 774.757 li
cp
f
2489.02 828.449 mo
2216.69 828.449 li
2216.69 810.659 li
2489.02 810.659 li
2489.02 828.449 li
cp
0 0 0 0 cmyk
f
2377.34 810.348 mo
2262.89 810.348 li
2262.89 676.579 li
2377.34 676.579 li
2377.34 810.348 li
cp
f
2260.08 814.503 mo
2007.89 814.503 li
2007.89 572.719 li
2133.91 496.954 li
2260.08 574.067 li
2260.08 814.503 li
cp
f
2283.65 568.914 mo
2134.48 477.83 li
1984.79 568.702 li
1990.61 576.597 li
2134.69 490.034 li
2278.04 576.597 li
2283.65 568.914 li
cp
f
2628.32 810.829 mo
2376.49 810.829 li
2376.49 563.232 li
2502.34 485.646 li
2628.32 564.613 li
2628.32 810.829 li
cp
f
2651.76 576.403 mo
2502.59 477.83 li
2352.89 568.702 li
2358.72 576.597 li
2502.8 490.034 li
2646.15 584.086 li
2651.76 576.403 li
cp
f
2269.47 828.449 mo
1997.14 828.449 li
1997.14 810.659 li
2269.47 810.659 li
2269.47 828.449 li
cp
f
2638.97 828.449 mo
2366.65 828.449 li
2366.65 810.659 li
2638.97 810.659 li
2638.97 828.449 li
cp
f
2376.07 676.579 mo
2261.01 676.579 li
2261.01 663.02 li
2376.07 663.02 li
2376.07 676.579 li
cp
0 .553887 .404578 0 cmyk
f
2365.76 828.449 mo
2270.84 828.449 li
2270.84 810.829 li
2365.76 810.829 li
2365.76 828.449 li
cp
0 .665949 .510582 0 cmyk
f
2262.89 676.579 mo
2377.34 676.579 li
2377.34 685.772 li
2262.89 685.772 li
2262.89 676.579 li
cp
f
2377.34 809.784 mo
2364.24 809.784 li
2364.24 676.579 li
2377.34 676.579 li
2377.34 809.784 li
cp
f
2271.81 809.784 mo
2260.78 809.784 li
2260.78 676.579 li
2271.81 676.579 li
2271.81 809.784 li
cp
f
2336.68 810.659 mo
2301.21 810.659 li
2301.21 745.576 li
2336.68 745.576 li
2336.68 810.659 li
cp
0 .553887 .404578 0 cmyk
f
2336.68 810.829 mo
2331.56 810.829 li
2331.56 745.712 li
2336.68 745.712 li
2336.68 810.829 li
cp
0 .665949 .510582 0 cmyk
f
2301.21 745.576 mo
2336.68 745.576 li
2336.68 751.536 li
2301.21 751.536 li
2301.21 745.576 li
cp
f
2301.21 745.576 mo
2307.51 745.576 li
2307.51 810.348 li
2301.21 810.348 li
2301.21 745.576 li
cp
f
2480.83 766.138 mo
2411.58 766.138 li
2411.58 710.915 li
2480.83 710.915 li
2480.83 766.138 li
cp
0 .393561 .289555 0 cmyk
f
2416.21 766.138 mo
2416.21 717.458 li
2474.2 717.458 li
2474.2 766.138 li
2479.83 766.138 li
2479.83 710.915 li
2410.58 710.915 li
2410.58 766.138 li
2416.21 766.138 li
cp
0 .665949 .510582 0 cmyk
f
2596.25 766.138 mo
2526.99 766.138 li
2526.99 710.915 li
2596.25 710.915 li
2596.25 766.138 li
cp
0 .393561 .289555 0 cmyk
f
2531.63 766.138 mo
2531.63 717.458 li
2589.61 717.458 li
2589.61 766.138 li
2595.25 766.138 li
2595.25 710.915 li
2525.99 710.915 li
2525.99 766.138 li
2531.63 766.138 li
cp
0 .665949 .510582 0 cmyk
f
2596.25 672.884 mo
2526.99 672.884 li
2526.99 617.661 li
2596.25 617.661 li
2596.25 672.884 li
cp
0 .393561 .289555 0 cmyk
f
2531.63 672.884 mo
2531.63 624.203 li
2589.61 624.203 li
2589.61 672.884 li
2595.25 672.884 li
2595.25 617.661 li
2525.99 617.661 li
2525.99 672.884 li
2531.63 672.884 li
cp
0 .665949 .510582 0 cmyk
f
2480.83 672.884 mo
2411.58 672.884 li
2411.58 617.661 li
2480.83 617.661 li
2480.83 672.884 li
cp
0 .393561 .289555 0 cmyk
f
2416.21 672.884 mo
2416.21 624.203 li
2474.2 624.203 li
2474.2 672.884 li
2479.83 672.884 li
2479.83 617.661 li
2410.58 617.661 li
2410.58 672.884 li
2416.21 672.884 li
cp
0 .665949 .510582 0 cmyk
f
2499.86 537.612 mo
2488.27 539.36 2479.37 549.334 2479.37 561.411 cv
2479.37 573.489 2488.27 583.463 2499.86 585.211 cv
2511.45 583.463 2520.34 573.489 2520.34 561.411 cv
2520.34 549.334 2511.45 539.36 2499.86 537.612 cv
cp
0 .393561 .289555 0 cmyk
f
2486.96 578.961 mo
2520.55 545.368 li
2520.16 544.829 2519.75 544.297 2519.33 543.779 cv
2517.92 542.576 2516.65 541.259 2515.61 539.995 cv
2480.99 574.62 li
2482.88 576.233 2484.62 578.157 2486.96 578.961 cv
cp
0 0 0 0 cmyk
f
2523.19 561.709 mo
2522.83 559.346 2522.96 556.804 2523.24 554.334 cv
2494.74 582.828 li
2505.05 582.828 li
2523.14 564.74 li
2523.09 563.722 2523.11 562.713 2523.19 561.709 cv
cp
f
2376.2 576.902 mo
2502.51 502.179 li
2628.03 584.647 li
2628.03 573.46 li
2502.29 489.975 li
2376.2 565.405 li
2376.2 576.902 li
cp
0 .665949 .510582 0 cmyk
f
2504.82 537.612 mo
2503.9 537.752 2503 537.962 2502.11 538.202 cv
2512.35 540.983 2519.89 550.297 2519.89 561.412 cv
2519.89 572.526 2512.35 581.841 2502.11 584.621 cv
2503 584.861 2503.9 585.071 2504.82 585.211 cv
2516.41 583.463 2525.31 573.489 2525.31 561.412 cv
2525.31 549.334 2516.41 539.36 2504.82 537.612 cv
cp
f
2229 766.004 mo
2159.74 766.004 li
2159.74 710.781 li
2229 710.781 li
2229 766.004 li
cp
0 .393561 .289555 0 cmyk
f
2164.38 766.004 mo
2164.38 717.323 li
2222.36 717.323 li
2222.36 766.004 li
2228 766.004 li
2228 710.781 li
2158.74 710.781 li
2158.74 766.004 li
2164.38 766.004 li
cp
0 .665949 .510582 0 cmyk
f
2229 672.749 mo
2159.74 672.749 li
2159.74 617.526 li
2229 617.526 li
2229 672.749 li
cp
0 .393561 .289555 0 cmyk
f
2164.38 672.749 mo
2164.38 624.069 li
2222.36 624.069 li
2222.36 672.749 li
2228 672.749 li
2228 617.526 li
2158.74 617.526 li
2158.74 672.749 li
2164.38 672.749 li
cp
0 .665949 .510582 0 cmyk
f
2113.59 672.749 mo
2044.33 672.749 li
2044.33 617.526 li
2113.59 617.526 li
2113.59 672.749 li
cp
0 .393561 .289555 0 cmyk
f
2048.97 672.749 mo
2048.97 624.069 li
2106.95 624.069 li
2106.95 672.749 li
2112.59 672.749 li
2112.59 617.526 li
2043.33 617.526 li
2043.33 672.749 li
2048.97 672.749 li
cp
0 .665949 .510582 0 cmyk
f
2113.59 765.319 mo
2044.33 765.319 li
2044.33 710.097 li
2113.59 710.097 li
2113.59 765.319 li
cp
0 .393561 .289555 0 cmyk
f
2048.97 765.319 mo
2048.97 716.639 li
2106.95 716.639 li
2106.95 765.319 li
2112.59 765.319 li
2112.59 710.097 li
2043.33 710.097 li
2043.33 765.319 li
2048.97 765.319 li
cp
0 .665949 .510582 0 cmyk
f
2132.61 537.478 mo
2121.02 539.226 2112.13 549.199 2112.13 561.277 cv
2112.13 573.354 2121.02 583.328 2132.61 585.076 cv
2144.2 583.328 2153.1 573.354 2153.1 561.277 cv
2153.1 549.199 2144.2 539.226 2132.61 537.478 cv
cp
0 .393561 .289555 0 cmyk
f
2120.75 581.347 mo
2152.04 548.944 li
2151.67 548.424 2151.3 547.911 2150.91 547.411 cv
2149.59 546.251 2148.41 544.98 2147.44 543.762 cv
2115.19 577.159 li
2116.95 578.716 2118.58 580.571 2120.75 581.347 cv
cp
0 0 0 0 cmyk
f
2154.5 564.706 mo
2154.17 562.427 2154.28 559.974 2154.55 557.592 cv
2128 585.076 li
2137.6 585.076 li
2154.45 567.629 li
2154.4 566.647 2154.43 565.674 2154.5 564.706 cv
cp
f
2655.04 780.502 mo
2652.72 784.781 2654.32 790.127 2658.59 792.442 cv
2666.98 776.946 li
2662.7 774.631 2657.36 776.223 2655.04 780.502 cv
cp
0 .553887 .404578 0 cmyk
f
154.477 790.966 mo
152.162 795.245 153.754 800.591 158.032 802.907 cv
166.418 787.411 li
162.139 785.095 156.793 786.687 154.477 790.966 cv
cp
f
230.227 780.555 mo
226.153 777.896 220.694 779.042 218.035 783.116 cv
232.789 792.748 li
235.448 788.674 234.302 783.215 230.227 780.555 cv
cp
f
2722.02 785.731 mo
2718.02 782.961 2712.53 783.957 2709.76 787.957 cv
2724.25 797.99 li
2727.02 793.99 2726.02 788.502 2722.02 785.731 cv
cp
0 .393561 .289555 0 cmyk
f
2008.95 576.768 mo
2135.26 502.045 li
2260.78 576.684 li
2260.78 565.497 li
2135.05 489.84 li
2008.95 565.271 li
2008.95 576.768 li
cp
0 .665949 .510582 0 cmyk
f
2137.58 537.478 mo
2136.65 537.617 2135.76 537.827 2134.87 538.068 cv
2145.1 540.849 2152.64 550.163 2152.64 561.277 cv
2152.64 572.392 2145.1 581.706 2134.87 584.486 cv
2135.76 584.728 2136.65 584.938 2137.58 585.077 cv
2149.17 583.328 2158.06 573.354 2158.06 561.277 cv
2158.06 549.199 2149.17 539.226 2137.58 537.478 cv
cp
f
2301.23 745.43 mo
2301.23 752.593 li
2308.4 745.43 li
2301.23 745.43 li
cp
f
2301.23 771.308 mo
2327.11 745.43 li
2318.33 745.43 li
2301.23 762.525 li
2301.23 771.308 li
cp
f
2301.23 799.956 mo
2301.23 808.739 li
2336.11 773.868 li
2336.11 765.086 li
2301.23 799.956 li
cp
f
2336.11 810.189 mo
2336.11 802.52 li
2328.44 810.189 li
2336.11 810.189 li
cp
f
2318.5 810.189 mo
2336.11 792.587 li
2336.11 783.805 li
2309.72 810.189 li
2318.5 810.189 li
cp
f
2301.23 781.24 mo
2301.23 790.023 li
2336.11 755.153 li
2336.11 746.37 li
2301.23 781.24 li
cp
f
1037.23 674.26 mo
837.46 674.26 li
837.46 814.558 li
1037.23 814.558 li
1037.23 674.26 li
cp
0 0 0 0 cmyk
f
1124.34 576.059 mo
1041.55 674.26 li
1037.23 674.26 li
1037.01 814.567 li
1201.24 814.567 li
1201.28 674.21 li
1124.34 576.059 li
cp
f
945.309 563.919 mo
910.377 563.921 li
821.327 668.266 li
827.321 674.26 li
1041.55 674.26 li
1124.34 576.059 li
1201.28 674.21 li
1211.11 674.229 li
1124.53 563.909 li
1012.71 563.916 li
945.309 563.919 li
cp
f
1219.57 827.721 mo
1063.36 827.721 li
1063.36 814.317 li
1219.57 814.317 li
1219.57 827.721 li
cp
f
1063.36 827.721 mo
819.329 827.721 li
819.329 814.317 li
1063.36 814.317 li
1063.36 827.721 li
cp
f
1038.96 681.851 mo
1046.34 681.851 li
1124.69 589.973 li
1190.67 672.898 li
1203 672.898 li
1124.38 576.262 li
1043.27 672.031 li
1038.76 672.031 li
1038.96 681.851 li
cp
0 .665949 .510582 0 cmyk
f
1037.23 667.872 mo
821.327 667.872 li
908.847 565.32 li
1124.53 563.516 li
1037.23 667.872 li
cp
0 .393561 .289555 0 cmyk
f
1044.03 599.426 mo
1005.29 554.094 li
953.512 554.08 li
953.506 554.087 913.501 600.143 913.501 600.143 cv
919.393 605.98 li
931.361 605.98 li
931.361 602.185 li
957.988 572.418 li
987.869 606.035 li
1037.65 606.035 li
1044.03 599.426 li
cp
0 0 0 0 cmyk
f
987.869 606.035 mo
957.988 572.418 li
931.361 602.185 li
931.361 645.128 li
987.617 645.128 li
1021.82 605.98 li
987.869 606.035 li
cp
f
1037.01 681.851 mo
837.46 681.851 li
837.46 673.866 li
1037.01 673.866 li
1037.01 681.851 li
cp
0 .665949 .510582 0 cmyk
f
1037.01 813.924 mo
1029.09 813.924 li
1029.09 673.835 li
1037.01 673.835 li
1037.01 813.924 li
cp
f
1063.36 827.327 mo
911.557 827.327 li
926.809 814.174 li
1063.36 814.174 li
1063.36 827.327 li
cp
0 .553887 .404578 0 cmyk
f
1156.2 793.218 mo
1086.36 793.218 li
1086.36 684.084 li
1156.2 684.084 li
1156.2 793.218 li
cp
0 .393561 .289555 0 cmyk
f
972.93 813.924 mo
921.108 813.924 li
921.108 725.59 li
972.93 725.59 li
972.93 813.924 li
cp
0 .553887 .404578 0 cmyk
f
928.95 813.372 mo
921.108 813.372 li
921.108 725.59 li
928.95 725.59 li
928.95 813.372 li
cp
0 .665949 .510582 0 cmyk
f
921.108 725.59 mo
971.848 725.59 li
971.848 731.707 li
921.108 731.707 li
921.108 725.59 li
cp
f
964.082 713.994 mo
898.805 713.994 li
898.805 704.835 li
964.082 704.835 li
964.082 713.994 li
cp
0 .553887 .404578 0 cmyk
f
898.805 704.835 mo
907.777 704.835 li
907.777 813.372 li
898.805 813.372 li
898.805 704.835 li
cp
f
1021.82 606.752 mo
987.869 645.128 li
987.869 606.807 li
1002.97 606.807 li
1021.82 606.752 li
cp
0 .665949 .510582 0 cmyk
f
1041.51 600.086 mo
992.729 600.086 li
953.512 554.08 li
1005.29 554.094 li
1041.51 600.086 li
cp
0 .553887 .404578 0 cmyk
f
974.337 635.85 mo
940.75 635.85 li
940.75 601.236 li
974.337 601.236 li
974.337 635.85 li
cp
0 .393561 .289555 0 cmyk
f
946.478 635.85 mo
940.75 635.85 li
940.75 601.236 li
946.478 601.236 li
946.478 635.85 li
cp
0 .665949 .510582 0 cmyk
f
940.75 601.236 mo
974.337 601.236 li
974.337 606.035 li
940.75 606.035 li
940.75 601.236 li
cp
f
908.143 714.818 mo
926.243 732.919 li
933.48 732.919 li
971.848 771.287 li
971.848 725.59 li
975.414 714.64 li
908.143 714.818 li
cp
f
1037.65 606.807 mo
988.291 606.807 li
987.875 647.363 li
1002.04 647.363 li
1037.65 606.807 li
cp
f
1098.67 792.849 mo
1156.28 735.247 li
1156.28 727.965 li
1091.39 792.849 li
1098.67 792.849 li
cp
0 0 0 0 cmyk
f
1153.5 684.194 mo
1085.8 751.893 li
1085.8 759.174 li
1156.28 688.695 li
1156.28 684.194 li
1153.5 684.194 li
cp
f
1085.8 767.408 mo
1085.8 774.69 li
1156.28 704.212 li
1156.28 696.93 li
1085.8 767.408 li
cp
f
1093.81 793.018 mo
1086.36 793.018 li
1086.36 684.084 li
1093.81 684.084 li
1093.81 793.018 li
cp
0 .665949 .510582 0 cmyk
f
1086.36 683.762 mo
1156.2 683.762 li
1156.2 690.415 li
1086.36 690.415 li
1086.36 683.762 li
cp
f
921.317 757.085 mo
952.776 725.626 li
945.494 725.626 li
921.317 749.803 li
921.317 757.085 li
cp
f
921.317 772.601 mo
968.292 725.626 li
961.01 725.626 li
921.317 765.319 li
921.317 772.601 li
cp
f
921.317 741.568 mo
937.26 725.626 li
929.978 725.626 li
921.317 734.287 li
921.317 741.568 li
cp
f
921.317 780.838 mo
921.317 788.119 li
970.869 738.567 li
970.869 731.285 li
921.317 780.838 li
cp
f
921.317 796.354 mo
921.317 803.636 li
970.869 754.083 li
970.869 746.802 li
921.317 796.354 li
cp
f
970.869 813.72 mo
970.869 807.648 li
964.798 813.72 li
970.869 813.72 li
cp
f
956.565 813.72 mo
970.869 799.414 li
970.869 792.132 li
949.282 813.72 li
956.565 813.72 li
cp
f
926.749 813.72 mo
970.869 769.6 li
970.869 762.317 li
921.317 811.87 li
921.317 813.72 li
926.749 813.72 li
cp
f
941.048 813.72 mo
970.869 783.898 li
970.869 776.616 li
933.767 813.72 li
941.048 813.72 li
cp
f
1471.67 806.282 mo
1469.32 795.703 1454.99 787.564 1437.66 787.564 cv
1420.33 787.564 1406.01 795.703 1403.66 806.282 cv
1471.67 806.282 li
cp
0 .393561 .289555 0 cmyk
f
1416.63 827.846 mo
1356.39 827.846 li
1356.39 814.988 li
1416.63 814.988 li
1416.63 827.846 li
cp
0 0 0 0 cmyk
f
1416.63 814.729 mo
1477.22 814.729 li
1477.22 827.846 li
1416.63 827.846 li
1416.63 814.729 li
cp
f
1480.31 727.041 mo
1432.35 727.041 li
1432.35 721.659 li
1417.74 682.462 li
1480.31 722.386 li
1480.31 727.041 li
cp
0 .553887 .404578 0 cmyk
f
1478.5 821.287 mo
1357.67 821.287 li
1357.67 815.938 li
1478.5 815.938 li
1478.5 821.287 li
cp
0 .665949 .510582 0 cmyk
f
2647.44 724.382 mo
2647.44 747.823 2666.44 766.825 2689.89 766.825 cv
2713.33 766.825 2732.33 747.823 2732.33 724.382 cv
2732.33 700.941 2701.86 606.847 2689.89 606.847 cv
2677.91 606.847 2647.44 700.941 2647.44 724.382 cv
cp
0 .393561 .289555 0 cmyk
f
82.1379 723.688 mo
82.1379 747.129 101.14 766.132 124.581 766.132 cv
148.022 766.132 167.025 747.129 167.025 723.688 cv
167.025 700.247 136.552 606.153 124.581 606.153 cv
112.61 606.153 82.1379 700.247 82.1379 723.688 cv
cp
f
153.414 740.438 mo
153.414 760.051 169.314 775.95 188.927 775.95 cv
208.54 775.95 224.44 760.051 224.44 740.438 cv
224.44 720.824 198.944 642.094 188.927 642.094 cv
178.91 642.094 153.414 720.824 153.414 740.438 cv
cp
f
1941.43 776.918 mo
1957.12 776.942 li
1957.59 783.846 li
1951.25 793.673 li
1943.76 799.96 li
1939.41 825.426 li
1939.41 828.926 li
1933.87 828.926 li
1936.4 799.582 li
1941.43 776.918 li
cp
f
1947.94 797.21 mo
1950.3 803.026 li
1966.29 825.11 li
1969.7 822.678 li
1959.53 801.798 li
1956.46 798.478 li
1957.12 788.106 li
1947.94 797.21 li
cp
f
1958.43 760.278 mo
1963.08 757.593 li
1963.08 757.593 1958.65 747.722 1955.71 745.883 cv
1952.77 744.044 1948.86 741.736 1948.86 741.736 cv
1948.26 737.966 li
1949.63 737.173 1950.87 735.849 1951.67 734.13 cv
1952.07 733.275 1952.32 732.401 1952.44 731.545 cv
1955.95 738.761 li
1962.56 733.957 li
1962.56 730.733 li
1954.8 724.291 li
1950.39 725.573 li
1950.17 725.409 1949.93 725.259 1949.67 725.14 cv
1946.87 723.831 1943.21 725.736 1941.51 729.395 cv
1939.8 733.053 1940.69 737.078 1943.5 738.386 cv
1943.76 738.509 1944.04 738.594 1944.31 738.661 cv
1943.19 744.77 li
1938.05 754.582 li
1939.99 761.407 li
1939.99 769.457 li
1939.41 776.918 li
1958.82 776.942 li
1953.3 756.717 li
1958.43 760.278 li
cp
0 0 0 0 cmyk
f
1252.6 774.602 mo
1252.6 774.602 1251.93 760.747 1252.82 756.729 cv
1253.71 752.71 1258.49 736.777 1258.49 736.777 cv
1258.12 736.249 1257.79 735.669 1257.52 735.035 cv
1255.96 731.315 1257 727.327 1259.85 726.125 cv
1262.7 724.923 1266.29 726.964 1267.85 730.684 cv
1269.42 734.402 1268.38 738.392 1265.52 739.594 cv
1265.18 739.74 1264.82 739.837 1264.45 739.89 cv
1266.17 747.651 li
1270.51 755.415 li
1268.78 760.242 li
1269.33 770.342 li
1270.05 774.093 li
1252.6 774.602 li
cp
f
1270.05 774.093 mo
1252.6 774.602 li
1249.56 791.716 li
1272.61 791.435 li
1270.05 774.093 li
cp
0 .393561 .289555 0 cmyk
f
1268.16 727.491 mo
1268.16 727.491 1267.04 723.119 1263.98 722.973 cv
1260.92 722.826 1257.64 723.04 1255.82 724.861 cv
1254 726.683 1251.47 743.467 1251.47 743.467 cv
1251.47 743.467 1258.63 749.592 1259.64 749.592 cv
1260.66 749.592 1259.64 729.269 1259.64 729.269 cv
1268.16 727.491 li
cp
0 .553887 .404578 0 cmyk
f
1303.97 761.925 mo
1303.97 761.925 li
1303.97 788.435 li
1283.09 788.435 li
1283.09 794.183 li
1283.09 797.579 1285.84 800.333 1289.22 800.333 cv
1323.19 800.333 li
1326.58 800.333 1329.32 797.579 1329.32 794.183 cv
1329.32 788.435 li
1330.38 788.435 li
1330.38 788.435 li
1330.38 773.794 1318.56 761.925 1303.97 761.925 cv
cp
0 .393561 .289555 0 cmyk
f
1269.95 790.056 mo
1270.04 826.478 li
1266.28 826.478 li
1261.64 794.265 li
1245.23 825.217 li
1242.28 822.063 li
1254.38 791.024 li
1269.95 790.056 li
cp
0 0 0 0 cmyk
f
2144.87 809.947 mo
2119.83 809.947 li
2119.83 797.21 li
2144.87 797.21 li
2144.87 809.947 li
cp
.0382086 .0827039 .0640269 0 cmyk
f
2168.17 794.475 mo
2143.13 794.475 li
2143.13 781.737 li
2168.17 781.737 li
2168.17 794.475 li
cp
f
2400.05 606.121 mo
2375 606.121 li
2375 593.384 li
2400.05 593.384 li
2400.05 606.121 li
cp
f
2626.96 796.393 mo
2601.92 796.393 li
2601.92 783.655 li
2626.96 783.655 li
2626.96 796.393 li
cp
f
2539.51 687.544 mo
2514.47 687.544 li
2514.47 674.807 li
2539.51 674.807 li
2539.51 687.544 li
cp
f
780.323 762.031 mo
784.312 747.851 li
790.374 750.766 li
787.297 760.644 li
787.482 772.787 li
796.576 772.757 li
795.982 752.748 li
793.438 741.072 li
785.759 737.902 li
776.162 753.644 li
775.733 770.894 li
776.148 772.82 li
784.188 772.798 li
780.323 762.031 li
cp
0 .393561 .289555 0 cmyk
f
780.169 760.278 mo
785.736 747.851 li
791.53 750.766 li
786.834 758.891 li
788.765 772.787 li
797.457 772.757 li
796.888 752.748 li
794.457 741.072 li
787.119 737.902 li
777.948 753.644 li
778.585 770.894 li
778.982 772.82 li
785.617 772.798 li
780.169 760.278 li
cp
f
2742.82 831.882 mo
61.4807 827.935 li
61.4861 824.435 li
2742.83 828.382 li
2742.82 831.882 li
cp
.656275 .916442 .462867 .549035 cmyk
f
561.964 816.331 mo
437.307 816.331 li
437.307 631.371 li
561.964 631.045 li
561.964 635.366 li
558.464 635.366 li
558.464 634.555 li
440.807 634.861 li
440.807 812.831 li
558.464 812.831 li
558.464 658.941 li
561.964 658.941 li
561.964 816.331 li
cp
f
248.319 812.831 mo
437.317 812.831 li
437.317 634.553 li
248.319 634.863 li
248.319 812.831 li
cp
440.817 816.331 mo
244.819 816.331 li
244.819 631.369 li
440.817 631.047 li
440.817 816.331 li
cp
f
303.162 769.797 mo
377.748 769.797 li
377.748 678.742 li
303.162 678.742 li
303.162 769.797 li
cp
381.248 773.297 mo
299.662 773.297 li
299.662 675.242 li
381.248 675.242 li
381.248 773.297 li
cp
f
465.587 743.097 mo
534.281 743.097 li
534.281 691.793 li
465.587 691.793 li
465.587 743.097 li
cp
537.781 746.597 mo
462.087 746.597 li
462.087 688.293 li
537.781 688.293 li
537.781 746.597 li
cp
f
460.98 631.05 mo
562.957 631.05 li
630.065 575.507 li
576.552 526.632 li
421.702 526.632 li
384.243 557.827 li
460.98 622.935 li
460.98 631.05 li
cp
564.218 634.55 mo
457.48 634.55 li
457.48 624.556 li
378.804 557.802 li
420.436 523.132 li
577.91 523.132 li
635.397 575.638 li
564.218 634.55 li
cp
f
561.964 812.831 mo
755.037 812.831 li
755.037 660.927 li
561.964 660.927 li
561.964 812.831 li
cp
758.537 816.331 mo
558.464 816.331 li
558.464 657.427 li
758.537 657.427 li
758.537 816.331 li
cp
f
544.166 657.427 mo
773.969 657.427 li
773.969 651.146 li
659.068 556.046 li
544.166 651.146 li
544.166 657.427 li
cp
777.469 660.927 mo
540.666 660.927 li
540.666 649.499 li
541.3 648.974 li
659.068 551.503 li
777.469 649.499 li
777.469 660.927 li
cp
f
227.879 631.05 mo
457.48 631.05 li
457.48 624.556 li
342.779 527.236 li
227.879 624.398 li
227.879 631.05 li
cp
460.98 634.55 mo
224.379 634.55 li
224.379 622.775 li
342.782 522.65 li
460.98 622.935 li
460.98 634.55 li
cp
f
627.775 812.783 mo
690.345 812.783 li
690.345 739.718 li
627.775 739.718 li
627.775 812.783 li
cp
693.845 816.283 mo
624.275 816.283 li
624.275 736.218 li
693.845 736.218 li
693.845 816.283 li
cp
f
637.36 812.831 mo
680.873 812.831 li
680.873 749.309 li
637.36 749.309 li
637.36 812.831 li
cp
684.373 816.331 mo
633.86 816.331 li
633.86 745.809 li
684.373 745.809 li
684.373 816.331 li
cp
f
707.958 812.783 mo
711.455 812.783 li
711.455 731.392 li
707.958 731.392 li
707.958 812.783 li
cp
714.955 816.283 mo
704.458 816.283 li
704.458 727.892 li
714.955 727.892 li
714.955 816.283 li
cp
f
606.061 812.783 mo
609.559 812.783 li
609.559 731.392 li
606.061 731.392 li
606.061 812.783 li
cp
613.059 816.283 mo
602.561 816.283 li
602.561 727.892 li
613.059 727.892 li
613.059 816.283 li
cp
f
599.682 727.892 mo
718.33 727.892 li
718.33 722.071 li
699.049 701.45 li
619.08 701.411 li
599.682 721.988 li
599.682 727.892 li
cp
721.83 731.392 mo
596.182 731.392 li
596.182 720.6 li
617.57 697.911 li
700.569 697.95 li
721.83 720.69 li
721.83 731.392 li
cp
f
229.668 824.603 mo
437.307 824.603 li
437.307 816.317 li
229.668 816.317 li
229.668 824.603 li
cp
440.807 828.103 mo
226.168 828.103 li
226.168 812.817 li
440.807 812.817 li
440.807 828.103 li
cp
f
561.61 826.353 mo
558.11 826.353 li
558.11 812.817 li
770.47 812.817 li
770.47 816.317 li
561.61 816.317 li
561.61 826.353 li
cp
f
440.807 826.353 mo
437.307 826.353 li
437.307 814.567 li
440.807 814.567 li
440.807 826.353 li
cp
f
327.935 772.088 mo
324.435 772.088 li
324.435 676.992 li
327.935 676.992 li
327.935 772.088 li
cp
f
355.249 772.088 mo
351.749 772.088 li
351.749 676.992 li
355.249 676.992 li
355.249 772.088 li
cp
f
379.498 710.403 mo
301.412 710.403 li
301.412 706.903 li
379.498 706.903 li
379.498 710.403 li
cp
f
501.209 744.387 mo
497.709 744.387 li
497.709 690.103 li
501.209 690.103 li
501.209 744.387 li
cp
f
536.031 715.542 mo
499.459 715.542 li
499.459 712.042 li
536.031 712.042 li
536.031 715.542 li
cp
f
574.152 625.337 mo
226.129 625.337 li
226.129 621.837 li
574.152 621.837 li
574.152 625.337 li
cp
f
775.719 652.072 mo
542.416 652.072 li
542.416 648.572 li
775.719 648.572 li
775.719 652.072 li
cp
f
720.08 723.044 mo
597.932 723.044 li
597.932 719.544 li
720.08 719.544 li
720.08 723.044 li
cp
f
1612.22 366.452 mo
1737.74 366.452 li
1737.74 317.708 li
1612.22 317.708 li
1612.22 366.452 li
cp
1741.24 369.952 mo
1608.72 369.952 li
1608.72 314.208 li
1741.24 314.208 li
1741.24 369.952 li
cp
f
1574.1 420.095 mo
1699.63 420.095 li
1699.63 369.952 li
1574.1 369.952 li
1574.1 420.095 li
cp
1703.13 423.595 mo
1570.6 423.595 li
1570.6 366.452 li
1703.13 366.452 li
1703.13 423.595 li
cp
f
1520.24 826.532 mo
1645.76 826.532 li
1645.76 423.595 li
1520.24 423.595 li
1520.24 826.532 li
cp
1649.26 830.032 mo
1516.74 830.032 li
1516.74 420.095 li
1649.26 420.095 li
1649.26 830.032 li
cp
f
1649.26 826.532 mo
1901.5 826.532 li
1901.5 423.632 li
1847.64 423.632 li
1847.64 369.952 li
1809.53 369.952 li
1809.53 317.708 li
1741.24 317.708 li
1741.24 369.952 li
1703.13 369.952 li
1703.13 423.632 li
1649.26 423.632 li
1649.26 826.532 li
cp
1905 830.032 mo
1645.76 830.032 li
1645.76 420.132 li
1699.63 420.132 li
1699.63 366.452 li
1737.74 366.452 li
1737.74 314.208 li
1813.03 314.208 li
1813.03 366.452 li
1851.14 366.452 li
1851.14 420.132 li
1905 420.132 li
1905 830.032 li
cp
f
1756.33 423.643 mo
1790.78 423.643 li
1790.78 391.156 li
1756.33 391.156 li
1756.33 423.643 li
cp
1794.28 427.143 mo
1752.83 427.143 li
1752.83 387.656 li
1794.28 387.656 li
1794.28 427.143 li
cp
f
1699.66 538.353 mo
1743.55 538.353 li
1743.55 471.285 li
1699.66 471.285 li
1699.66 538.353 li
cp
1747.05 541.853 mo
1696.16 541.853 li
1696.16 467.785 li
1747.05 467.785 li
1747.05 541.853 li
cp
f
1799.67 538.353 mo
1843.56 538.353 li
1843.56 471.285 li
1799.67 471.285 li
1799.67 538.353 li
cp
1847.06 541.853 mo
1796.17 541.853 li
1796.17 467.785 li
1847.06 467.785 li
1847.06 541.853 li
cp
f
1699.66 655.701 mo
1743.55 655.701 li
1743.55 588.634 li
1699.66 588.634 li
1699.66 655.701 li
cp
1747.05 659.201 mo
1696.16 659.201 li
1696.16 585.134 li
1747.05 585.134 li
1747.05 659.201 li
cp
f
1799.67 655.701 mo
1843.56 655.701 li
1843.56 588.634 li
1799.67 588.634 li
1799.67 655.701 li
cp
1847.06 659.201 mo
1796.17 659.201 li
1796.17 585.134 li
1847.06 585.134 li
1847.06 659.201 li
cp
f
1794.35 826.532 mo
1801.23 826.532 li
1801.23 713.512 li
1794.35 713.512 li
1794.35 826.532 li
cp
1804.73 830.032 mo
1790.85 830.032 li
1790.85 710.012 li
1804.73 710.012 li
1804.73 830.032 li
cp
f
1804.73 826.532 mo
1865.25 826.532 li
1865.25 713.512 li
1804.73 713.512 li
1804.73 826.532 li
cp
1868.75 830.032 mo
1801.23 830.032 li
1801.23 710.012 li
1868.75 710.012 li
1868.75 830.032 li
cp
f
1794.35 710.012 mo
1812.53 710.012 li
1812.53 702.046 li
1794.35 702.046 li
1794.35 710.012 li
cp
1816.03 713.512 mo
1790.85 713.512 li
1790.85 698.546 li
1816.03 698.546 li
1816.03 713.512 li
cp
f
1816.03 710.012 mo
1873.67 710.012 li
1873.67 702.046 li
1816.03 702.046 li
1816.03 710.012 li
cp
1877.17 713.512 mo
1812.53 713.512 li
1812.53 698.546 li
1877.17 698.546 li
1877.17 713.512 li
cp
f
1868.75 826.532 mo
1901.45 826.532 li
1901.45 810.358 li
1868.75 810.358 li
1868.75 826.532 li
cp
1904.95 830.032 mo
1865.25 830.032 li
1865.25 806.858 li
1904.95 806.858 li
1904.95 830.032 li
cp
f
1520.24 806.858 mo
1645.76 806.858 li
1645.76 800.881 li
1520.24 800.881 li
1520.24 806.858 li
cp
1649.26 810.358 mo
1516.74 810.358 li
1516.74 797.381 li
1649.26 797.381 li
1649.26 810.358 li
cp
f
1649.26 806.858 mo
1790.85 806.858 li
1790.85 800.881 li
1649.26 800.881 li
1649.26 806.858 li
cp
1794.35 810.358 mo
1645.76 810.358 li
1645.76 797.381 li
1794.35 797.381 li
1794.35 810.358 li
cp
f
1868.75 806.858 mo
1901.5 806.858 li
1901.5 800.881 li
1868.75 800.881 li
1868.75 806.858 li
cp
1905 810.358 mo
1865.25 810.358 li
1865.25 797.381 li
1905 797.381 li
1905 810.358 li
cp
f
1520.24 826.532 mo
1645.76 826.532 li
1645.76 810.358 li
1520.24 810.358 li
1520.24 826.532 li
cp
1649.26 830.032 mo
1516.74 830.032 li
1516.74 806.858 li
1649.26 806.858 li
1649.26 830.032 li
cp
f
1794.35 830.032 mo
1645.76 830.032 li
1645.76 806.858 li
1699.51 806.858 li
1699.51 810.358 li
1649.26 810.358 li
1649.26 826.532 li
1790.85 826.532 li
1790.85 810.358 li
1755.66 810.358 li
1755.66 806.858 li
1794.35 806.858 li
1794.35 830.032 li
cp
f
1559.58 515.318 mo
1607.08 515.318 li
1607.08 477.779 li
1559.58 477.779 li
1559.58 515.318 li
cp
1610.58 518.818 mo
1556.08 518.818 li
1556.08 474.279 li
1610.58 474.279 li
1610.58 518.818 li
cp
f
1588.2 531.868 mo
1607.08 531.868 li
1607.08 518.818 li
1588.2 518.818 li
1588.2 531.868 li
cp
1610.58 535.368 mo
1584.7 535.368 li
1584.7 515.318 li
1610.58 515.318 li
1610.58 535.368 li
cp
f
1531.95 531.868 mo
1584.97 531.868 li
1584.97 518.818 li
1531.95 518.818 li
1531.95 531.868 li
cp
1588.47 535.368 mo
1528.45 535.368 li
1528.45 515.318 li
1588.47 515.318 li
1588.47 535.368 li
cp
f
1559.58 632.676 mo
1607.54 632.676 li
1607.54 595.137 li
1559.58 595.137 li
1559.58 632.676 li
cp
1611.04 636.176 mo
1556.08 636.176 li
1556.08 591.637 li
1611.04 591.637 li
1611.04 636.176 li
cp
f
1588.2 649.225 mo
1607.54 649.225 li
1607.54 636.176 li
1588.2 636.176 li
1588.2 649.225 li
cp
1611.04 652.725 mo
1584.7 652.725 li
1584.7 632.676 li
1611.04 632.676 li
1611.04 652.725 li
cp
f
1531.95 649.225 mo
1584.97 649.225 li
1584.97 636.176 li
1531.95 636.176 li
1531.95 649.225 li
cp
1588.47 652.725 mo
1528.45 652.725 li
1528.45 632.676 li
1588.47 632.676 li
1588.47 652.725 li
cp
f
1559.58 750.025 mo
1607.54 750.025 li
1607.54 712.486 li
1559.58 712.486 li
1559.58 750.025 li
cp
1611.04 753.525 mo
1556.08 753.525 li
1556.08 708.986 li
1611.04 708.986 li
1611.04 753.525 li
cp
f
1588.2 766.575 mo
1607.54 766.575 li
1607.54 753.525 li
1588.2 753.525 li
1588.2 766.575 li
cp
1611.04 770.075 mo
1584.7 770.075 li
1584.7 750.025 li
1611.04 750.025 li
1611.04 770.075 li
cp
f
1531.95 766.575 mo
1584.97 766.575 li
1584.97 753.525 li
1531.95 753.525 li
1531.95 766.575 li
cp
1588.47 770.075 mo
1528.45 770.075 li
1528.45 750.025 li
1588.47 750.025 li
1588.47 770.075 li
cp
f
1817.27 826.532 mo
1852.7 826.532 li
1852.7 750.721 li
1852.7 740.953 1844.76 733.006 1834.99 733.006 cv
1825.22 733.006 1817.27 740.953 1817.27 750.721 cv
1817.27 826.532 li
cp
1856.2 830.032 mo
1813.77 830.032 li
1813.77 750.721 li
1813.77 739.022 1823.29 729.506 1834.99 729.506 cv
1846.68 729.506 1856.2 739.022 1856.2 750.721 cv
1856.2 830.032 li
cp
f
1842.83 828.282 mo
1839.33 828.282 li
1839.33 750.721 li
1839.33 743.313 1834.66 736.626 1827.7 734.08 cv
1828.91 730.793 li
1837.23 733.843 1842.83 741.851 1842.83 750.721 cv
1842.83 828.282 li
cp
f
1585.31 517.068 mo
1581.81 517.068 li
1581.81 476.029 li
1585.31 476.029 li
1585.31 517.068 li
cp
f
1723.36 540.103 mo
1719.86 540.103 li
1719.86 469.535 li
1723.36 469.535 li
1723.36 540.103 li
cp
f
1585.31 634.422 mo
1581.81 634.422 li
1581.81 593.383 li
1585.31 593.383 li
1585.31 634.422 li
cp
f
1585.31 751.577 mo
1581.81 751.577 li
1581.81 710.538 li
1585.31 710.538 li
1585.31 751.577 li
cp
f
1745.3 495.767 mo
1697.91 495.767 li
1697.91 492.267 li
1745.3 492.267 li
1745.3 495.767 li
cp
f
1745.3 518.983 mo
1697.91 518.983 li
1697.91 515.483 li
1745.3 515.483 li
1745.3 518.983 li
cp
f
1823.36 540.103 mo
1819.86 540.103 li
1819.86 469.535 li
1823.36 469.535 li
1823.36 540.103 li
cp
f
1845.31 495.767 mo
1797.92 495.767 li
1797.92 492.267 li
1845.31 492.267 li
1845.31 495.767 li
cp
f
1845.31 518.983 mo
1797.92 518.983 li
1797.92 515.483 li
1845.31 515.483 li
1845.31 518.983 li
cp
f
1823.36 658.015 mo
1819.86 658.015 li
1819.86 587.447 li
1823.36 587.447 li
1823.36 658.015 li
cp
f
1845.31 613.679 mo
1797.92 613.679 li
1797.92 610.179 li
1845.31 610.179 li
1845.31 613.679 li
cp
f
1845.31 636.896 mo
1797.92 636.896 li
1797.92 633.396 li
1845.31 633.396 li
1845.31 636.896 li
cp
f
1723.36 658.015 mo
1719.86 658.015 li
1719.86 587.447 li
1723.36 587.447 li
1723.36 658.015 li
cp
f
1745.3 613.679 mo
1697.91 613.679 li
1697.91 610.179 li
1745.3 610.179 li
1745.3 613.679 li
cp
f
1745.3 636.896 mo
1697.91 636.896 li
1697.91 633.396 li
1745.3 633.396 li
1745.3 636.896 li
cp
f
1699.66 768.349 mo
1743.55 768.349 li
1743.55 701.281 li
1699.66 701.281 li
1699.66 768.349 li
cp
1747.05 771.849 mo
1696.16 771.849 li
1696.16 697.781 li
1747.05 697.781 li
1747.05 771.849 li
cp
f
1723.36 770.662 mo
1719.86 770.662 li
1719.86 700.095 li
1723.36 700.095 li
1723.36 770.662 li
cp
f
1745.3 726.326 mo
1697.91 726.326 li
1697.91 722.826 li
1745.3 722.826 li
1745.3 726.326 li
cp
f
1745.3 749.543 mo
1697.91 749.543 li
1697.91 746.043 li
1745.3 746.043 li
1745.3 749.543 li
cp
f
2595.61 641.305 mo
2526.2 641.305 li
2526.2 637.805 li
2595.61 637.805 li
2595.61 641.305 li
cp
f
2573.85 674.035 mo
2570.35 674.035 li
2570.35 618.377 li
2573.85 618.377 li
2573.85 674.035 li
cp
f
2551.31 674.035 mo
2547.81 674.035 li
2547.81 618.377 li
2551.31 618.377 li
2551.31 674.035 li
cp
f
2595.61 734.995 mo
2526.2 734.995 li
2526.2 731.495 li
2595.61 731.495 li
2595.61 734.995 li
cp
f
2573.85 767.726 mo
2570.35 767.726 li
2570.35 712.067 li
2573.85 712.067 li
2573.85 767.726 li
cp
f
2551.31 767.726 mo
2547.81 767.726 li
2547.81 712.067 li
2551.31 712.067 li
2551.31 767.726 li
cp
f
2480.05 734.995 mo
2410.64 734.995 li
2410.64 731.495 li
2480.05 731.495 li
2480.05 734.995 li
cp
f
2458.3 767.726 mo
2454.8 767.726 li
2454.8 712.067 li
2458.3 712.067 li
2458.3 767.726 li
cp
f
2435.75 767.726 mo
2432.25 767.726 li
2432.25 712.067 li
2435.75 712.067 li
2435.75 767.726 li
cp
f
2480.05 641.522 mo
2410.64 641.522 li
2410.64 638.022 li
2480.05 638.022 li
2480.05 641.522 li
cp
f
2458.3 674.253 mo
2454.8 674.253 li
2454.8 618.595 li
2458.3 618.595 li
2458.3 674.253 li
cp
f
2435.75 674.253 mo
2432.25 674.253 li
2432.25 618.595 li
2435.75 618.595 li
2435.75 674.253 li
cp
f
2376.88 810.147 mo
2625.21 810.147 li
2625.21 574.405 li
2501.4 493.169 li
2376.88 567.978 li
2376.88 810.147 li
cp
2628.71 813.647 mo
2373.38 813.647 li
2373.38 565.997 li
2501.48 489.036 li
2502.4 489.64 li
2628.71 572.515 li
2628.71 813.647 li
cp
f
2501.48 489.036 mo
2502.4 489.64 li
2644.36 582.778 li
2647.91 577.92 li
2501.19 480.97 li
2354.08 570.272 li
2357.82 575.346 li
2501.48 489.036 li
cp
2645.22 587.53 mo
2501.4 493.169 li
2356.9 579.984 li
2348.99 569.269 li
2501.27 476.827 li
2652.9 577.023 li
2645.22 587.53 li
cp
f
2412.39 765.322 mo
2478.15 765.322 li
2478.15 713.6 li
2412.39 713.6 li
2412.39 765.322 li
cp
2481.65 768.822 mo
2408.89 768.822 li
2408.89 710.1 li
2481.65 710.1 li
2481.65 768.822 li
cp
f
2527.81 765.758 mo
2593.56 765.758 li
2593.56 714.035 li
2527.81 714.035 li
2527.81 765.758 li
cp
2597.06 769.258 mo
2524.31 769.258 li
2524.31 710.535 li
2597.06 710.535 li
2597.06 769.258 li
cp
f
2412.39 672.067 mo
2478.15 672.067 li
2478.15 620.345 li
2412.39 620.345 li
2412.39 672.067 li
cp
2481.65 675.567 mo
2408.89 675.567 li
2408.89 616.845 li
2481.65 616.845 li
2481.65 675.567 li
cp
f
2527.81 672.503 mo
2593.56 672.503 li
2593.56 620.78 li
2527.81 620.78 li
2527.81 672.503 li
cp
2597.06 676.003 mo
2524.31 676.003 li
2524.31 617.28 li
2597.06 617.28 li
2597.06 676.003 li
cp
f
2367.42 827.591 mo
2634.47 827.591 li
2634.47 813.647 li
2367.42 813.647 li
2367.42 827.591 li
cp
2637.97 831.091 mo
2363.92 831.091 li
2363.92 810.147 li
2637.97 810.147 li
2637.97 831.091 li
cp
f
2501.18 539.996 mo
2488.86 539.996 2478.83 550.022 2478.83 562.346 cv
2478.83 574.669 2488.86 584.695 2501.18 584.695 cv
2513.5 584.695 2523.53 574.669 2523.53 562.346 cv
2523.53 550.022 2513.5 539.996 2501.18 539.996 cv
cp
2501.18 588.195 mo
2486.93 588.195 2475.33 576.6 2475.33 562.346 cv
2475.33 548.092 2486.93 536.496 2501.18 536.496 cv
2515.43 536.496 2527.03 548.092 2527.03 562.346 cv
2527.03 576.6 2515.43 588.195 2501.18 588.195 cv
cp
f
2228.37 641.171 mo
2158.96 641.171 li
2158.96 637.671 li
2228.37 637.671 li
2228.37 641.171 li
cp
f
2206.61 673.9 mo
2203.11 673.9 li
2203.11 618.243 li
2206.61 618.243 li
2206.61 673.9 li
cp
f
2184.06 673.9 mo
2180.56 673.9 li
2180.56 618.243 li
2184.06 618.243 li
2184.06 673.9 li
cp
f
2228.37 734.861 mo
2158.96 734.861 li
2158.96 731.361 li
2228.37 731.361 li
2228.37 734.861 li
cp
f
2206.61 767.591 mo
2203.11 767.591 li
2203.11 711.933 li
2206.61 711.933 li
2206.61 767.591 li
cp
f
2184.06 767.591 mo
2180.56 767.591 li
2180.56 711.933 li
2184.06 711.933 li
2184.06 767.591 li
cp
f
2112.81 641.389 mo
2043.4 641.389 li
2043.4 637.889 li
2112.81 637.889 li
2112.81 641.389 li
cp
f
2091.05 674.118 mo
2087.55 674.118 li
2087.55 618.46 li
2091.05 618.46 li
2091.05 674.118 li
cp
f
2068.5 674.118 mo
2065 674.118 li
2065 618.46 li
2068.5 618.46 li
2068.5 674.118 li
cp
f
2270.72 827.633 mo
2363.92 827.633 li
2363.92 813.647 li
2270.72 813.647 li
2270.72 827.633 li
cp
2367.42 831.133 mo
2267.22 831.133 li
2267.22 810.147 li
2367.42 810.147 li
2367.42 831.133 li
cp
f
2261.83 810.014 mo
2373.38 810.014 li
2373.38 679.263 li
2261.83 679.263 li
2261.83 810.014 li
cp
2376.88 813.514 mo
2258.33 813.514 li
2258.33 675.763 li
2376.88 675.763 li
2376.88 813.514 li
cp
f
2261.47 675.763 mo
2373.38 675.763 li
2373.38 665.703 li
2261.47 665.703 li
2261.47 675.763 li
cp
2376.88 679.263 mo
2257.97 679.263 li
2257.97 662.203 li
2376.88 662.203 li
2376.88 679.263 li
cp
f
2288.78 809.843 mo
2347.07 809.843 li
2347.07 735.071 li
2288.78 735.071 li
2288.78 809.843 li
cp
2350.57 813.343 mo
2285.28 813.343 li
2285.28 731.571 li
2350.57 731.571 li
2350.57 813.343 li
cp
f
2302.03 810.014 mo
2334 810.014 li
2334 748.261 li
2302.03 748.261 li
2302.03 810.014 li
cp
2337.5 813.514 mo
2298.53 813.514 li
2298.53 744.761 li
2337.5 744.761 li
2337.5 813.514 li
cp
f
2261.47 813.514 mo
2062.06 813.514 li
2062.06 810.014 li
2257.97 810.014 li
2257.97 567.755 li
2134.19 493.011 li
2009.64 567.844 li
2009.64 810.014 li
2039.93 810.014 li
2039.93 813.514 li
2006.14 813.514 li
2006.14 565.863 li
2134.2 488.925 li
2261.47 565.78 li
2261.47 813.514 li
cp
f
1986.83 570.138 mo
1990.58 575.211 li
2134.2 488.925 li
2277.07 575.204 li
2280.62 570.351 li
2133.98 480.813 li
1986.83 570.138 li
cp
2278.01 579.856 mo
2134.19 493.011 li
1989.65 579.85 li
1981.74 569.134 li
2133.99 476.715 li
2134.9 477.271 li
2285.69 569.345 li
2278.01 579.856 li
cp
f
2160.56 765.623 mo
2226.32 765.623 li
2226.32 713.9 li
2160.56 713.9 li
2160.56 765.623 li
cp
2229.82 769.123 mo
2157.06 769.123 li
2157.06 710.4 li
2229.82 710.4 li
2229.82 769.123 li
cp
f
2045.15 671.933 mo
2110.9 671.933 li
2110.9 620.21 li
2045.15 620.21 li
2045.15 671.933 li
cp
2114.4 675.433 mo
2041.65 675.433 li
2041.65 616.71 li
2114.4 616.71 li
2114.4 675.433 li
cp
f
2112.81 733.958 mo
2043.4 733.958 li
2043.4 730.458 li
2112.81 730.458 li
2112.81 733.958 li
cp
f
2091.05 766.688 mo
2087.55 766.688 li
2087.55 711.03 li
2091.05 711.03 li
2091.05 766.688 li
cp
f
2068.5 766.688 mo
2065 766.688 li
2065 711.03 li
2068.5 711.03 li
2068.5 766.688 li
cp
f
2045.15 764.503 mo
2110.9 764.503 li
2110.9 712.78 li
2045.15 712.78 li
2045.15 764.503 li
cp
2114.4 768.003 mo
2041.65 768.003 li
2041.65 709.28 li
2114.4 709.28 li
2114.4 768.003 li
cp
f
2160.56 672.368 mo
2226.32 672.368 li
2226.32 620.646 li
2160.56 620.646 li
2160.56 672.368 li
cp
2229.82 675.868 mo
2157.06 675.868 li
2157.06 617.146 li
2229.82 617.146 li
2229.82 675.868 li
cp
f
2270.72 829.383 mo
2267.22 829.383 li
2267.22 813.514 li
1998.39 813.514 li
1998.39 829.383 li
1994.89 829.383 li
1994.89 810.014 li
2270.72 810.014 li
2270.72 829.383 li
cp
f
2133.93 539.862 mo
2121.61 539.862 2111.58 549.888 2111.58 562.211 cv
2111.58 574.534 2121.61 584.561 2133.93 584.561 cv
2146.26 584.561 2156.28 574.534 2156.28 562.211 cv
2156.28 549.888 2146.26 539.862 2133.93 539.862 cv
cp
2133.93 588.061 mo
2119.68 588.061 2108.08 576.465 2108.08 562.211 cv
2108.08 547.958 2119.68 536.362 2133.93 536.362 cv
2148.19 536.362 2159.78 547.958 2159.78 562.211 cv
2159.78 576.465 2148.19 588.061 2133.93 588.061 cv
cp
f
839.21 812.174 mo
1035.48 812.174 li
1035.48 675.616 li
839.21 675.616 li
839.21 812.174 li
cp
1038.98 815.674 mo
835.71 815.674 li
835.71 672.116 li
1038.98 672.116 li
1038.98 815.674 li
cp
f
1202.99 815.674 mo
1035.26 815.674 li
1035.48 672.014 li
1040.74 672.014 li
1124.39 572.895 li
1189.46 655.813 li
1186.7 657.974 li
1124.3 578.438 li
1042.37 675.514 li
1038.97 675.514 li
1038.76 812.174 li
1199.49 812.174 li
1199.51 674.21 li
1203.01 674.21 li
1202.99 815.674 li
cp
f
1214.68 675.985 mo
1200.41 675.958 li
1186.65 657.99 li
1124.3 578.439 li
1042.37 675.616 li
826.596 675.616 li
818.947 667.966 li
909.57 561.778 li
945.309 561.776 li
945.309 565.276 li
911.185 565.278 li
823.708 667.778 li
828.045 672.116 li
1040.74 672.116 li
1124.39 572.893 li
1189.42 655.846 li
1202.14 672.462 li
1207.53 672.472 li
1186.63 645.479 li
1123.68 565.266 li
1012.71 565.272 li
1012.71 561.772 li
1125.39 561.766 li
1189.39 643.327 li
1214.68 675.985 li
cp
f
923.143 812.174 mo
970.092 812.174 li
969.813 727.34 li
922.864 727.34 li
923.143 812.174 li
cp
973.604 815.674 mo
919.655 815.674 li
919.352 723.84 li
973.301 723.84 li
973.604 815.674 li
cp
f
900.463 812.174 mo
906.027 812.174 li
906.027 712.104 li
973.571 712.104 li
973.571 706.585 li
900.553 706.585 li
900.463 812.174 li
cp
909.527 815.674 mo
896.959 815.674 li
897.057 703.085 li
977.071 703.085 li
977.071 715.604 li
909.527 715.604 li
909.527 815.674 li
cp
f
965.832 712.244 mo
973.571 712.244 li
973.571 706.585 li
965.832 706.585 li
965.832 712.244 li
cp
977.071 715.744 mo
962.332 715.744 li
962.332 703.085 li
977.071 703.085 li
977.071 715.744 li
cp
f
1065.11 825.577 mo
1217.82 825.577 li
1217.82 815.674 li
1065.11 815.674 li
1065.11 825.577 li
cp
1221.32 829.077 mo
1061.61 829.077 li
1061.61 812.174 li
1221.32 812.174 li
1221.32 829.077 li
cp
f
821.079 825.577 mo
1061.61 825.577 li
1061.61 815.674 li
821.079 815.674 li
821.079 825.577 li
cp
1065.11 829.077 mo
817.579 829.077 li
817.579 812.174 li
1065.11 812.174 li
1065.11 829.077 li
cp
f
1088.11 791.146 mo
1154.45 791.146 li
1154.45 685.512 li
1088.11 685.512 li
1088.11 791.146 li
cp
1157.95 794.646 mo
1084.61 794.646 li
1084.61 682.012 li
1157.95 682.012 li
1157.95 794.646 li
cp
f
942.5 634.1 mo
972.587 634.1 li
972.587 602.986 li
942.5 602.986 li
942.5 634.1 li
cp
976.087 637.6 mo
939 637.6 li
939 599.486 li
976.087 599.486 li
976.087 637.6 li
cp
f
988.656 605.057 mo
1036.9 605.057 li
1041.66 600.127 li
1004.48 556.615 li
954.31 556.602 li
952.62 558.546 945.549 566.688 915.897 600.825 cv
920.113 605.002 li
929.611 605.002 li
929.611 602.287 li
957.991 570.56 li
988.656 605.057 li
cp
1038.39 608.557 mo
987.083 608.557 li
957.984 575.819 li
933.111 603.625 li
933.111 608.502 li
918.673 608.502 li
911.106 601.005 li
912.18 599.768 li
912.18 599.768 952.084 553.826 952.19 553.705 cv
952.713 553.102 li
1006.09 553.115 li
1046.39 600.27 li
1038.39 608.557 li
cp
f
933.111 644.149 mo
986.823 644.149 li
1017.96 608.508 li
987.084 608.558 li
957.984 575.819 li
933.111 603.625 li
933.111 644.149 li
cp
988.412 647.649 mo
929.611 647.649 li
929.611 602.287 li
957.991 570.56 li
988.655 605.056 li
1025.68 604.996 li
988.412 647.649 li
cp
f
989.619 645.899 mo
986.119 645.899 li
986.119 606.807 li
989.619 606.807 li
989.619 645.899 li
cp
f
920.733 607.877 mo
918.053 605.627 li
957.492 558.658 li
993.504 598.336 li
1044.03 598.336 li
1044.03 601.836 li
991.953 601.836 li
957.594 563.979 li
920.733 607.877 li
cp
f
1038.04 669.622 mo
821.327 669.622 li
821.327 666.122 li
1036.41 666.122 li
1123.19 562.393 li
1125.88 564.639 li
1038.04 669.622 li
cp
f
1110.85 792.695 mo
1107.35 792.695 li
1107.35 684.556 li
1110.85 684.556 li
1110.85 792.695 li
cp
f
1135.32 792.695 mo
1131.82 792.695 li
1131.82 684.556 li
1135.32 684.556 li
1135.32 792.695 li
cp
f
1156.2 719.478 mo
1086.36 719.478 li
1086.36 715.978 li
1156.2 715.978 li
1156.2 719.478 li
cp
f
1156.2 757.833 mo
1086.36 757.833 li
1086.36 754.333 li
1156.2 754.333 li
1156.2 757.833 li
cp
f
1412.56 814.16 mo
1350.72 814.16 li
1350.72 805.594 li
1412.56 805.594 li
1412.56 814.16 li
cp
0 0 0 0 cmyk
f
1480.31 727.041 mo
1355.13 727.041 li
1355.13 722.386 li
1417.74 682.462 li
1480.31 722.386 li
1480.31 727.041 li
cp
f
1480.31 727.284 mo
1355.13 727.284 li
1355.13 722.63 li
1417.74 682.705 li
1480.31 722.63 li
1480.31 727.284 li
cp
f
1407.54 801.75 mo
1404.64 799.789 li
1410.38 791.3 1423.34 785.814 1437.66 785.814 cv
1449.23 785.814 1460.17 789.437 1466.92 795.505 cv
1464.58 798.106 li
1458.45 792.602 1448.39 789.314 1437.66 789.314 cv
1424.47 789.314 1412.64 794.195 1407.54 801.75 cv
cp
.656275 .916442 .462867 .549035 cmyk
f
1359.16 807.549 mo
1356.91 804.867 li
1366.77 796.606 1379.28 792.057 1392.15 792.057 cv
1394.99 792.057 1397.83 792.274 1400.6 792.704 cv
1400.07 796.163 li
1397.47 795.761 1394.81 795.557 1392.15 795.557 cv
1380.11 795.557 1368.39 799.815 1359.16 807.549 cv
cp
f
1352.86 813.238 mo
1411.2 813.238 li
1411.2 807.604 li
1352.86 807.604 li
1352.86 813.238 li
cp
1414.7 816.738 mo
1349.36 816.738 li
1349.36 804.104 li
1414.7 804.104 li
1414.7 816.738 li
cp
f
1414.7 813.238 mo
1482.59 813.238 li
1482.59 807.604 li
1414.7 807.604 li
1414.7 813.238 li
cp
1486.09 816.738 mo
1411.2 816.738 li
1411.2 804.104 li
1486.09 804.104 li
1486.09 816.738 li
cp
f
1358.53 826.355 mo
1415.62 826.355 li
1415.62 816.738 li
1358.53 816.738 li
1358.53 826.355 li
cp
1419.12 829.855 mo
1355.03 829.855 li
1355.03 813.238 li
1419.12 813.238 li
1419.12 829.855 li
cp
f
1418.77 826.355 mo
1475.86 826.355 li
1475.86 816.738 li
1418.77 816.738 li
1418.77 826.355 li
cp
1479.36 829.855 mo
1415.27 829.855 li
1415.27 813.238 li
1479.36 813.238 li
1479.36 829.855 li
cp
f
1357.23 725.551 mo
1478.95 725.551 li
1478.95 723.605 li
1418.06 684.769 li
1357.23 723.605 li
1357.23 725.551 li
cp
1482.45 729.051 mo
1353.73 729.051 li
1353.73 721.688 li
1418.19 680.533 li
1419.14 681.302 li
1482.45 721.688 li
1482.45 729.051 li
cp
f
1419.88 784.028 mo
1416.38 784.028 li
1416.38 737.079 li
1419.88 737.079 li
1419.88 784.028 li
cp
f
1434.49 727.301 mo
1430.99 727.301 li
1430.99 722.236 li
1416.45 683.301 li
1419.73 682.076 li
1434.49 721.604 li
1434.49 727.301 li
cp
f
1360.3 738.829 mo
1356.67 738.829 1353.73 735.884 1353.73 732.263 cv
1353.73 727.301 li
1357.23 727.301 li
1357.23 732.263 li
1357.23 733.953 1358.6 735.329 1360.3 735.329 cv
1361.99 735.329 1363.36 733.953 1363.36 732.263 cv
1366.86 732.263 li
1366.86 735.884 1363.92 738.829 1360.3 738.829 cv
cp
f
1369.93 738.829 mo
1366.31 738.829 1363.36 735.884 1363.36 732.263 cv
1366.86 732.263 li
1366.86 733.953 1368.24 735.329 1369.93 735.329 cv
1371.62 735.329 1372.99 733.953 1372.99 732.263 cv
1376.49 732.263 li
1376.49 735.884 1373.55 738.829 1369.93 738.829 cv
cp
f
1379.56 738.829 mo
1375.94 738.829 1372.99 735.884 1372.99 732.263 cv
1376.49 732.263 li
1376.49 733.953 1377.87 735.329 1379.56 735.329 cv
1381.25 735.329 1382.63 733.953 1382.63 732.263 cv
1386.13 732.263 li
1386.13 735.884 1383.18 738.829 1379.56 738.829 cv
cp
f
1389.19 738.829 mo
1385.57 738.829 1382.63 735.884 1382.63 732.263 cv
1386.13 732.263 li
1386.13 733.953 1387.5 735.329 1389.19 735.329 cv
1390.88 735.329 1392.26 733.953 1392.26 732.263 cv
1395.76 732.263 li
1395.76 735.884 1392.81 738.829 1389.19 738.829 cv
cp
f
1398.82 738.829 mo
1395.2 738.829 1392.26 735.884 1392.26 732.263 cv
1395.76 732.263 li
1395.76 733.953 1397.13 735.329 1398.82 735.329 cv
1400.51 735.329 1401.89 733.953 1401.89 732.263 cv
1405.39 732.263 li
1405.39 735.884 1402.44 738.829 1398.82 738.829 cv
cp
f
1408.46 738.829 mo
1404.84 738.829 1401.89 735.884 1401.89 732.263 cv
1405.39 732.263 li
1405.39 733.953 1406.76 735.329 1408.46 735.329 cv
1410.15 735.329 1411.52 733.953 1411.52 732.263 cv
1415.02 732.263 li
1415.02 735.884 1412.08 738.829 1408.46 738.829 cv
cp
f
1418.09 738.829 mo
1414.47 738.829 1411.52 735.884 1411.52 732.263 cv
1415.02 732.263 li
1415.02 733.953 1416.4 735.329 1418.09 735.329 cv
1419.78 735.329 1421.15 733.953 1421.15 732.263 cv
1424.65 732.263 li
1424.65 735.884 1421.71 738.829 1418.09 738.829 cv
cp
f
1427.72 738.829 mo
1424.1 738.829 1421.15 735.884 1421.15 732.263 cv
1424.65 732.263 li
1424.65 733.953 1426.03 735.329 1427.72 735.329 cv
1429.41 735.329 1430.79 733.953 1430.79 732.263 cv
1434.29 732.263 li
1434.29 735.884 1431.34 738.829 1427.72 738.829 cv
cp
f
1437.35 738.829 mo
1433.73 738.829 1430.79 735.884 1430.79 732.263 cv
1434.29 732.263 li
1434.29 733.953 1435.66 735.329 1437.35 735.329 cv
1439.04 735.329 1440.42 733.953 1440.42 732.263 cv
1443.92 732.263 li
1443.92 735.884 1440.97 738.829 1437.35 738.829 cv
cp
f
1446.98 738.829 mo
1443.36 738.829 1440.42 735.884 1440.42 732.263 cv
1443.92 732.263 li
1443.92 733.953 1445.29 735.329 1446.98 735.329 cv
1448.68 735.329 1450.05 733.953 1450.05 732.263 cv
1453.55 732.263 li
1453.55 735.884 1450.6 738.829 1446.98 738.829 cv
cp
f
1456.62 738.829 mo
1453 738.829 1450.05 735.884 1450.05 732.263 cv
1453.55 732.263 li
1453.55 733.953 1454.93 735.329 1456.62 735.329 cv
1458.31 735.329 1459.68 733.953 1459.68 732.263 cv
1463.18 732.263 li
1463.18 735.884 1460.24 738.829 1456.62 738.829 cv
cp
f
1466.25 738.829 mo
1462.63 738.829 1459.68 735.884 1459.68 732.263 cv
1463.18 732.263 li
1463.18 733.953 1464.56 735.329 1466.25 735.329 cv
1467.94 735.329 1469.31 733.953 1469.31 732.263 cv
1472.81 732.263 li
1472.81 735.884 1469.87 738.829 1466.25 738.829 cv
cp
f
1475.88 738.829 mo
1472.26 738.829 1469.31 735.884 1469.31 732.263 cv
1472.81 732.263 li
1472.81 733.953 1474.19 735.329 1475.88 735.329 cv
1477.57 735.329 1478.95 733.953 1478.95 732.263 cv
1478.95 727.301 li
1482.45 727.301 li
1482.45 732.263 li
1482.45 735.884 1479.5 738.829 1475.88 738.829 cv
cp
f
2691.64 826.962 mo
2688.14 826.962 li
2688.14 715.177 li
2691.64 715.177 li
2691.64 826.962 li
cp
f
2691.45 763.858 mo
2688.32 762.286 li
2701.68 735.717 li
2704.81 737.289 li
2691.45 763.858 li
cp
f
2689.89 608.597 mo
2686.97 608.597 2678.16 621.592 2665.83 657.395 cv
2656.19 685.374 2649.19 713.546 2649.19 724.382 cv
2649.19 746.82 2667.45 765.075 2689.89 765.075 cv
2712.32 765.075 2730.58 746.82 2730.58 724.382 cv
2730.58 713.546 2723.58 685.374 2713.94 657.395 cv
2701.61 621.592 2692.8 608.597 2689.89 608.597 cv
cp
2689.89 768.575 mo
2665.52 768.575 2645.69 748.75 2645.69 724.382 cv
2645.69 711.721 2654.16 680.525 2662.52 656.254 cv
2670.56 632.916 2681.84 605.097 2689.89 605.097 cv
2697.93 605.097 2709.21 632.916 2717.25 656.254 cv
2725.61 680.525 2734.08 711.72 2734.08 724.382 cv
2734.08 748.75 2714.25 768.575 2689.89 768.575 cv
cp
f
126.331 829.438 mo
122.831 829.438 li
122.831 714.482 li
126.331 714.482 li
126.331 829.438 li
cp
f
126.145 763.164 mo
123.018 761.592 li
136.381 735.022 li
139.508 736.595 li
126.145 763.164 li
cp
f
124.581 607.903 mo
121.67 607.903 112.86 620.898 100.525 656.7 cv
90.885 684.68 83.8879 712.853 83.8879 723.688 cv
83.8879 746.127 102.143 764.382 124.581 764.382 cv
147.02 764.382 165.275 746.127 165.275 723.688 cv
165.275 712.853 158.278 684.68 148.637 656.7 cv
136.302 620.898 127.493 607.903 124.581 607.903 cv
cp
124.581 767.882 mo
100.213 767.882 80.3879 748.057 80.3879 723.688 cv
80.3879 711.026 88.8533 679.831 97.2161 655.561 cv
105.257 632.223 116.531 604.403 124.581 604.403 cv
132.631 604.403 143.906 632.223 151.947 655.561 cv
160.309 679.831 168.775 711.026 168.775 723.688 cv
168.775 748.057 148.949 767.882 124.581 767.882 cv
cp
f
190.677 828.654 mo
187.177 828.654 li
187.177 732.734 li
190.677 732.734 li
190.677 828.654 li
cp
f
190.49 773.597 mo
187.364 772.024 li
198.544 749.793 li
201.671 751.365 li
190.49 773.597 li
cp
f
188.927 777.7 mo
173.359 777.7 159.298 767.885 153.935 753.276 cv
157.221 752.071 li
162.079 765.307 174.821 774.2 188.927 774.2 cv
207.544 774.2 222.69 759.055 222.69 740.438 cv
222.69 731.398 216.843 707.865 208.785 684.48 cv
198.585 654.876 191.192 643.844 188.927 643.844 cv
185.708 643.844 175.406 662.917 164.436 698.729 cv
161.089 697.704 li
165.474 683.39 170.577 669.376 175.089 659.256 cv
182.562 642.493 186.41 640.344 188.927 640.344 cv
195.831 640.344 205.336 663.726 212.094 683.341 cv
218.884 703.045 226.19 729.317 226.19 740.438 cv
226.19 760.984 209.474 777.7 188.927 777.7 cv
cp
f
1964.88 826.145 mo
1947.93 802.99 li
1946.28 797.735 li
1949.61 796.685 li
1951.09 801.389 li
1967.71 824.076 li
1964.88 826.145 li
cp
f
1964.6 830.171 mo
1962.14 827.681 li
1967.62 822.271 li
1966.66 820.023 li
1964.85 815.286 1959.37 802.584 1955.47 799.924 cv
1954.47 799.239 li
1954.76 798.06 li
1955.75 794.035 1955.56 785.33 1955.56 785.243 cv
1959.06 785.163 li
1959.07 785.51 1959.23 793.101 1958.39 797.787 cv
1963.64 802.572 1969.24 816.99 1969.9 818.71 cv
1971.78 823.084 li
1964.6 830.171 li
cp
f
1954.45 742.26 mo
1950.68 729.567 li
1954.03 728.571 li
1956.3 736.207 li
1960.61 732.664 li
1960.22 731.278 1959.28 728.709 1957.37 727.265 cv
1954.03 724.75 1951.55 726.854 1951.45 726.944 cv
1949.14 724.31 li
1950.76 722.893 1955.01 721.105 1959.47 724.47 cv
1963.3 727.356 1964.25 732.808 1964.29 733.038 cv
1964.45 734.035 li
1954.45 742.26 li
cp
f
1944.78 742.02 mo
1944.28 742.02 1943.79 741.951 1943.33 741.811 cv
1939.24 740.571 1937.52 734.088 1938.83 729.547 cv
1939.06 728.733 1939.82 728.169 1940.67 728.169 cv
1940.68 728.169 1940.68 728.169 1940.69 728.169 cv
1940.64 731.669 li
1940.65 731.669 1940.66 731.669 1940.67 731.669 cv
1941.37 731.669 1942 731.198 1942.19 730.518 cv
1941.24 733.849 1942.64 737.944 1944.34 738.461 cv
1945.48 738.809 1947.47 737.713 1948.94 735.917 cv
1950.15 736.91 li
1951.98 736.524 li
1952.18 737.492 li
1951.65 738.142 li
1949.62 740.607 1947.06 742.02 1944.78 742.02 cv
cp
f
1943.32 728.311 mo
1947.72 728.311 li
1950.42 733.431 li
1950.48 733.275 1950.53 733.122 1950.58 732.969 cv
1951.01 731.534 1950.93 729.952 1950.36 728.632 cv
1949.84 727.447 1949 726.601 1948.04 726.311 cv
1946.59 725.864 1944.63 726.64 1943.32 728.311 cv
cp
1949.33 740.946 mo
1948.6 737.486 li
1945.61 731.811 li
1939.9 731.811 li
1938.61 730.234 li
1938.9 729.334 li
1940.36 724.646 1945.02 721.732 1949.06 722.962 cv
1951 723.55 1952.64 725.106 1953.57 727.233 cv
1954.48 729.336 1954.61 731.734 1953.93 733.987 cv
1953.49 735.429 1952.7 736.865 1951.64 738.143 cv
1949.33 740.946 li
cp
f
1962.52 780.368 mo
1960.79 777.003 li
1962.73 762.362 li
1960.65 758.334 li
1963.76 756.729 li
1966.34 761.733 li
1964.4 776.374 li
1965.63 778.765 li
1962.52 780.368 li
cp
f
1925.59 775.465 mo
1924.47 772.148 li
1928.39 770.826 li
1936.59 761.94 li
1938.42 758.277 li
1941.55 759.842 li
1939.5 763.95 li
1930.36 773.855 li
1925.59 775.465 li
cp
f
1936.62 827.905 mo
1933.12 827.737 li
1934.47 800.239 li
1939.72 776.539 li
1943.14 777.297 li
1937.92 800.852 li
1936.62 827.905 li
cp
f
1941.16 830.676 mo
1929.78 830.676 li
1929.78 827.176 li
1937.66 827.176 li
1937.66 825.166 li
1937.74 824.917 li
1937.79 824.745 1942.97 807.608 1942.78 800.811 cv
1942.76 800.085 li
1953.57 788.683 li
1954.52 787.538 1955.23 786.178 1955.62 784.744 cv
1956.06 783.109 1956.1 781.372 1955.74 779.721 cv
1954.9 776.215 li
1958.31 775.404 li
1959.15 778.935 li
1959.64 781.163 1959.59 783.481 1959 785.662 cv
1958.47 787.597 1957.51 789.433 1956.22 790.971 cv
1956.15 791.051 li
1946.28 801.458 li
1946.16 808.745 1941.82 823.494 1941.16 825.684 cv
1941.16 830.676 li
cp
f
1943.77 746.722 mo
1940.7 745.044 li
1942.24 745.883 li
1940.7 745.047 li
1940.72 745.018 1942.26 742.138 1942.41 739.464 cv
1945.9 739.651 li
1945.71 743.131 1943.85 746.576 1943.77 746.722 cv
cp
f
1936.87 778.71 mo
1938.37 759.719 li
1936.13 753.657 li
1940.69 745.063 li
1943.78 746.702 li
1939.96 753.915 li
1941.92 759.229 li
1940.66 775.175 li
1955.47 775.037 li
1951.71 754.646 li
1956.96 756.879 li
1958.48 758.081 li
1960.07 756.922 li
1958.32 752.874 1954.16 745.339 1949.41 744.524 cv
1948.33 744.34 li
1946.69 738.735 li
1950.05 737.75 li
1951.1 741.338 li
1958.8 743.713 1963.64 756.354 1963.85 756.916 cv
1964.31 758.162 li
1958.39 762.476 li
1956.43 760.922 li
1959.66 778.498 li
1936.87 778.71 li
cp
f
1304.89 788.26 mo
1301.39 788.26 li
1301.39 759.679 li
1305.22 759.679 li
1319.64 759.679 1331.37 771.408 1331.37 785.825 cv
1331.37 787.873 li
1327.87 787.873 li
1327.87 785.825 li
1327.87 773.338 1317.71 763.179 1305.22 763.179 cv
1304.89 763.179 li
1304.89 788.26 li
cp
f
1263.84 742.022 mo
1262.16 742.022 1260.36 741.339 1258.59 740.004 cv
1260.7 737.209 li
1262.23 738.367 1263.7 738.782 1264.72 738.351 cv
1266.41 737.639 1267.31 731.573 1265.82 727.883 cv
1269.07 726.572 li
1270.94 731.211 1270.35 739.778 1266.08 741.575 cv
1265.37 741.875 1264.62 742.022 1263.84 742.022 cv
cp
f
1246.5 826.624 mo
1243.47 824.868 li
1260.36 795.729 li
1263.39 797.485 li
1246.5 826.624 li
cp
f
1246.73 829.45 mo
1239.9 823.821 li
1242.1 818.815 li
1252.41 791.898 li
1255.68 793.15 li
1245.34 820.147 li
1244.17 822.806 li
1248.95 826.749 li
1246.73 829.45 li
cp
f
1271.54 827.728 mo
1268.04 827.728 li
1268.04 792.848 li
1267.88 791.68 li
1271.34 791.189 li
1271.54 792.725 li
1271.54 827.728 li
cp
f
1275.66 829.685 mo
1264.54 829.685 li
1259.48 792.762 li
1262.94 792.287 li
1267.59 826.185 li
1275.66 826.185 li
1275.66 829.685 li
cp
f
1247.46 793.491 mo
1251.13 773.138 li
1254.57 773.759 li
1251.66 789.94 li
1270.58 789.709 li
1268.32 774.348 li
1271.79 773.838 li
1274.63 793.16 li
1247.46 793.491 li
cp
f
1251.14 775.9 mo
1251.1 774.185 li
1250.73 757.524 1251.7 751.953 1253.75 746.984 cv
1256.98 748.318 li
1255.19 752.672 1254.31 757.685 1254.57 772.391 cv
1267.94 772.35 li
1267.58 770.438 li
1267.01 759.984 li
1268.6 755.573 li
1263.53 746.424 li
1261.71 740.448 li
1265.05 739.429 li
1266.82 745.225 li
1272.43 755.257 li
1270.55 760.5 li
1271.07 770.127 li
1272.17 775.836 li
1251.14 775.9 li
cp
f
1253.25 742.68 mo
1254.07 745.334 1256.45 746.432 1258.14 746.883 cv
1258.23 728.257 li
1265.22 726.445 li
1264.82 725.986 1264.44 725.603 1264.16 725.434 cv
1262.06 724.188 1258.78 724.146 1256.93 726.234 cv
1255.3 728.075 1253.81 736.841 1253.25 742.68 cv
cp
1261.63 750.765 mo
1259.81 750.688 li
1259.48 750.675 1251.58 750.266 1249.78 743.275 cv
1249.7 742.98 li
1249.73 742.677 li
1249.97 740.141 1251.29 727.317 1254.31 723.911 cv
1257.49 720.339 1262.67 720.479 1265.94 722.424 cv
1267.58 723.395 1269.31 726.036 1269.64 726.556 cv
1270.92 728.583 li
1261.72 730.968 li
1261.63 750.765 li
cp
f
1284.41 790.01 mo
1284.41 794.125 li
1284.41 796.583 1286.41 798.583 1288.86 798.583 cv
1323.41 798.583 li
1325.87 798.583 1327.87 796.583 1327.87 794.125 cv
1327.87 790.01 li
1284.41 790.01 li
cp
1323.41 802.083 mo
1288.86 802.083 li
1284.48 802.083 1280.91 798.513 1280.91 794.125 cv
1280.91 786.51 li
1331.37 786.51 li
1331.37 794.125 li
1331.37 798.513 1327.8 802.083 1323.41 802.083 cv
cp
f
1276.42 776.529 mo
1259.24 767.308 li
1254.89 755.874 li
1258.17 754.632 li
1262.04 764.843 li
1278.08 773.445 li
1276.42 776.529 li
cp
f
1302.74 818.774 mo
1300 816.597 li
1313.78 799.244 li
1316.52 801.422 li
1302.74 818.774 li
cp
f
1315.43 819.527 mo
1281.8 776.595 li
1276.33 776.595 li
1276.33 773.095 li
1283.51 773.095 li
1318.19 817.369 li
1315.43 819.527 li
cp
f
1320.72 816.815 mo
1318.25 816.815 1316.23 818.833 1316.23 821.313 cv
1316.23 823.793 1318.25 825.811 1320.72 825.811 cv
1323.21 825.811 1325.22 823.793 1325.22 821.313 cv
1325.22 818.833 1323.21 816.815 1320.72 816.815 cv
cp
1320.72 829.311 mo
1316.32 829.311 1312.73 825.723 1312.73 821.313 cv
1312.73 816.903 1316.32 813.315 1320.72 813.315 cv
1325.14 813.315 1328.72 816.903 1328.72 821.313 cv
1328.72 825.723 1325.14 829.311 1320.72 829.311 cv
cp
f
1298.67 816.815 mo
1296.19 816.815 1294.17 818.833 1294.17 821.313 cv
1294.17 823.793 1296.19 825.811 1298.67 825.811 cv
1301.15 825.811 1303.16 823.793 1303.16 821.313 cv
1303.16 818.833 1301.15 816.815 1298.67 816.815 cv
cp
1298.67 829.311 mo
1294.26 829.311 1290.67 825.723 1290.67 821.313 cv
1290.67 816.903 1294.26 813.315 1298.67 813.315 cv
1303.08 813.315 1306.66 816.903 1306.66 821.313 cv
1306.66 825.723 1303.08 829.311 1298.67 829.311 cv
cp
f
771.507 824.902 mo
768.616 822.93 li
785.499 798.179 li
785.499 798.179 li
785.498 798.18 786.811 796.141 788.359 793.323 cv
791.427 795.009 li
789.809 797.953 788.47 800.028 788.414 800.115 cv
771.507 824.902 li
cp
f
771.145 828.828 mo
765.079 821.409 li
777.963 795.131 li
776.991 790.381 777.169 782.031 777.177 781.662 cv
780.677 781.742 li
780.674 781.832 780.484 790.787 781.504 794.93 cv
781.656 795.548 li
769.21 820.933 li
773.854 826.613 li
771.145 828.828 li
cp
f
800.853 826.394 mo
799.451 795.401 li
794.501 772.842 li
797.919 772.092 li
802.941 795.094 li
804.349 826.235 li
800.853 826.394 li
cp
f
807.249 829.056 mo
797.2 829.056 li
792.158 798.376 li
780.081 787.393 li
778.741 785.794 777.784 783.964 777.239 781.954 cv
776.631 779.721 776.576 777.346 777.079 775.087 cv
777.716 772.41 li
781.12 773.221 li
780.49 775.872 li
780.115 777.554 780.157 779.349 780.615 781.036 cv
781.019 782.518 781.716 783.869 782.69 785.056 cv
795.414 796.604 li
800.173 825.556 li
807.249 825.556 li
807.249 829.056 li
cp
f
774.573 773.175 mo
774.407 771.604 li
772.429 752.926 783.348 738.174 784.325 736.896 cv
787.141 732.477 li
790.092 734.357 li
787.14 738.977 li
787.032 739.116 776.658 752.694 777.754 769.665 cv
783.47 769.648 li
783.48 773.148 li
774.573 773.175 li
cp
f
793.587 737.587 mo
791.399 737.588 788.938 736.332 786.89 734.093 cv
785.384 733.139 786.125 731.747 786.158 731.688 cv
786.295 731.438 787.062 730.241 788.749 731.097 cv
788.738 731.121 li
788.755 731.131 li
788.973 731.261 789.16 731.372 789.357 731.603 cv
790.918 733.376 792.985 734.418 794.138 734.001 cv
794.919 733.72 795.641 732.607 796.021 731.098 cv
796.454 729.374 796.386 727.437 795.839 725.917 cv
795.715 725.572 795.305 724.824 795.053 724.403 cv
798.055 722.604 li
798.186 722.822 798.851 723.948 799.132 724.732 cv
799.917 726.912 800.021 729.544 799.415 731.951 cv
798.735 734.655 797.243 736.604 795.323 737.294 cv
794.776 737.491 794.192 737.587 793.587 737.587 cv
cp
f
785.943 783.584 mo
784.644 780.334 li
787.939 779.016 li
785.257 761.258 li
788.934 749.401 li
792.278 750.438 li
788.837 761.529 li
791.814 781.236 li
785.943 783.584 li
cp
f
785.365 782.123 mo
779.225 761.404 li
783.205 747.373 li
786.573 748.328 li
782.869 761.383 li
788.721 781.129 li
785.365 782.123 li
cp
f
786.522 733.921 mo
786.17 733.654 li
782.369 730.491 781.477 725.06 784.031 720.971 cv
784.11 720.847 li
785.681 718.367 788.734 716.91 791.874 717.149 cv
795.088 717.387 797.704 719.266 799.052 722.305 cv
799.816 724.025 li
792.074 726.802 li
790.893 723.507 li
794.793 722.108 li
793.722 720.987 792.426 720.699 791.617 720.64 cv
789.764 720.501 787.942 721.339 787.067 722.72 cv
785.516 721.898 li
787 722.826 li
785.367 725.438 785.948 728.916 788.348 730.915 cv
788.637 731.132 li
786.522 733.921 li
cp
f
788.163 773.143 mo
788.148 769.643 li
794.77 769.614 li
794.238 752.964 li
791.695 741.225 li
791.233 735.943 li
794.719 735.639 li
795.171 740.809 li
797.731 752.692 li
798.383 773.099 li
788.163 773.143 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.1.0
%%For: ( ) ()
%%Title: (ai0029_gamma-06.eps)
%%CreationDate: 8/17/2018 2:54 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB7&XZdcgXWSnJ'*3+E@t%`V'c-Z!:FEtfaK$,QaUG4riNgM^*$"<uOim`ki\n;OVc<EH?gl;gP]?B1JF7\S6Y7En'+Hm)N*
%nO&FeSA_A?OK,O7r+C<NY]=Hb"sJ])-nmaaQbj`[.bI5to.n@MNa[K93U@bFo:<J?BW!F<DmW\&ZY!CC/RRk2hXI*$,rh[smYk>o
%r99-joR%DMBLh&TZ;NKAVH)7&4t4^;7fJ*`^1oqe5_-nN?%+f66W;!<[t-i\NSr!be%68P9kY#0*5h;/*&%_tE"X/3OsDP/[P085
%qUR9C=@W!)m'*eTMrJ^VE<QA."9=SU0o1RNA6FFM":';Z4.lQVkP6_i01i5n&o`D'#r)K6M$VB6#VPeSo*hgC.KS^D8RQCK=[d"a
%5g*mYRU[UG,/B_e.>04%#2p,^<rj5"]?lK\b++83W/N.B?Ua)l8L6^p$6[4"^`Z1mU!s_0l`*Qb?UBV2<F-5R8f[,P"2[ntG(G9P
%#\$hs<L*2c30A?0&SZKXo]iC_R,AgH>"*$+4HK[M8C1ZEQ&6m$<*(_Zj9Z,a;+.c;QkZW6G7o_#O[3%4b(I]1"U0%Bn;[Z4!SLoc
%<1Dt.MNM&K6^Zt;*js!;Wl'uj=9>&e.@OA0(C3sFUp-@V5ST&F+h5D!TKr]`[,$k2'K7iU!6FsgGZYS):.EN/<Y@YF+:?b-6I%tb
%AU"eK913S;\r't+-^[<a:_H?#+`PO(,G6`!Q!ji8M7&+3UJts8/\PFE)c*9-FsPI[b8<sESq%+$o!.\&%8QcZ7T&X(g,'@h4X`:+
%#CMd2GnXCcU_gTS9E$[>5Pg@>\dcs"&<$R8@)GKZbkZLU5j>)nEMUEJ!/^5sVfM9f*U;3CZppE.BuMisFks(+^6I<TB@a"?CO4_X
%=cnEB%'(R#2T,q0&'@n_Oc<+K89(H#XG?j#!JHEq-1CmMN#fpj%'_@f!EKj#?G1`$r2:Gs[sWsc?8*olD/**5;u$gL,H!48\-dmH
%b:l7b<]S8+\a7fSl`*frK=J9_V1q/k$UtTDkb1W"FHTF*=sT^u6rpch7N2O:ZdqE(Dtt*e3Hs&RVt==#VL$'*Eo&Vk=nA(9*Q"lh
%;UCDK`Q&%@^aCf1OC+ZrK-a[GTh'RN`f!A!KnEWb+7t+@Mu`$AV,V/FToXsC<O)jb"05>`N=A,Z6<iI.T^S9G$S/AeebQW+#A(9s
%7`/(7bIthh?"4?X50_^oZfOqFf?c%H9ZX/ai_trX.)]44Y.&Q#43t3?\3GDh?YuPA-Q2^<H2NmPr)?\oN5_;fT#\T.O(W_Zcgj1]
%RnT"5[$r<aQmCWL8O>+&681u'-68n^MD2&f0Im!^m]).PWet2/KV&McM]l1RL0\:D4;3Vr9JVH;P=\=ih31D581&$uau![tE^XWi
%Ze3egch#L(ru`0$KqAX*E]MRrF!q`O+q+g4T1!im*OIWFKqJ,LKu-VR7?p;=UJU_WAB+dg7_+U1eLBS[_,)ud7$qKtgDh^Uk,G5W
%/ubl?PBNeN;ZS<DPWML00^kCO!MM^`L,.a9U8!C<P1+K\iU?i`:e&LR<&M$=b(u\b%0`PVJ=eakfS#k&L,.a92(!G^Wa*[IdWBkf
%0^j7L@lhaVeNJL]jZ0oGdSg/Po9;+)RGrD67R<OdKL#VZ+%63%G:GU9NABK@Jl,lF)6$qUBDb.7'G.i;?LC2o<?J&'4l(*ja(ZO.
%,Ks)QThaPLM.9biIEEY^4f(i;8!nK/j2aaD7kf]^78FNBoCU(8Sd$\;Che<s+Gq@7I]+dkU7_.1mS<EJilk8#0+OqY4#,+R7+/d3
%9hsdDXR55_B+<qD;((Vb;i/Dp_m2Xt,,SXcFMK!rCSseUro#h_WqVkZ#Qjt]qb)F3]-u+)hI$+(bOg/M0E"`^qHZt0e.qjNe**df
%?htFqddOlaoEVtJj0Yf[Qi86CoR$$[rF*9%G+M2Ci[;,erU,'.Io/[1L^@NGSj]]@p_;+i2=_]QA+Z/P)SRF2PobhT<8@;paN5^8
%PAMoL)eYBV17"d1KgUDJa#&bZOD$BUJ'!bk@Onf9PTp#OLc#??dC3CU2GNP2-KDa..C*qPb;"cuP&pr;V7tCs@8(j$5hd^)]IcP"
%kt[[m0'U5F"[G\!,a.TtWf[lAF\75t8U!0)s((sT`9?)"h&]'#Aa__,37QbFV^bVY=3XSkk_3T0']h^b7Yolo$#,5Z))^/.W;S>`
%\_A1g**AA(W%P'TP'.)b/Ju?[`e$_orIo_uj:4W.'V]k:6.@)W<H5[()qlPR]<"9q7tt/'q(!,^PAKP/HOa^_UGOf.eL3"gXS@<_
%<14G^EIk>=UZN^(U@9g*Bo/?23R!AN@rJj2FRc(%&C3`?4EQW?p)1TJ;pRXlqVWf;@7P_PWcM,Z$3NEKEE&6?_ndLK?SlX7N@mGa
%b;/cEktXN(TeD_D1!SA-hi.]"EhdA)eo.i.j%rHX&BVA[bo1n75<;LN@N;>5L2U/bQio7"@tc=GQ]4o@U][O"jHl]m7l&ubBi13(
%`F3V6(NLEa3Q*[<,HT)0]^8]E*!R.7Cs*5H'`8]V/p4WmM/7iB+UW]Rb"sXT3iXa1)OetI<RG[1+ZU9g0K:`tCfSK[)g,Fh6E,eJ
%;=>LdK2AI,Q=7'h:1KC,kd31tYVQ8HGd&H@^eR#3\uN_o69W=Y@sEfZd?^^7Qdf;25oq]]8GE6)r$BS]\SF.9GLNjJ0&f8a2jJ?\
%-(O7^N%W%X)PmebZICVeQm9X&[0Wds^d:G(kT@I.X>D9$`d$F4j:sZ6HG;ug6rTdbl[#6fKFkbR*',8^!lbp>")7rL)s@7W&-DQP
%M:tN.&pekB8:pPQrc.MBaAG-39NEFb$FWg+PS/gi`>S'Sri`!m?oZ"Jre9c,9M/4#iNEBA!DO+:7+&=JqRJ.u/:%Tu,Uf-0DM)iL
%Z/'E$s0lWb`<g*'j2d2HFmt)NL3nIQN5d=<4hi+Kg+c+(09uh][4.@OLB34@W')]ihe9KY_.,;Ur+c"n:j9LFj&!XePYr-:JKBl:
%eL2g"UCQK.6Q5UC'@kKHmYi;[e[@6<#>(b8/%QH9VW`P>gRWM_+QOr.p=JY5Vo]@\&^R6+W(+i^d2R[ojW+fN:mpC:r>/<T*(Wl,
%NbtRGUVX`gh1H26,L&c.jZ#SGXN9'Yn'H,:;`T3_[RE_2Vju+]j;OgJRo'`$"2nTG!T4Co?`3=TA[D\kP4#\%!Fi$XA!Wm9#<lZ4
%NTMAS=$i5sbf_9kO:!%l^F\Ut,!aHnLAs;#Mp-6c=sU7a]5,hX6kQ\5DVJ)AE&?RQP]WG5;cIpdN+gTT29M8VQ-j]p+,tK/<fps4
%;N87AaeZlHS[!s1!n<KGfiGOlf<e<+9@GW;XAS8Q_dbmm=CR%2WN>rZ0p18:XDp!4.Qmo0#SX@OgZpiMM./N#&C7dXZ5?0)`0K"X
%Pf<nb0[W[djE\[2`YSq=X@@QoBOFZOMeU\RG0!4_ls55lG+%@.I[mt\'aB^F@Lo@P62_@u6VDHqU2prhT<2Z;[WXD>U:o&cO0BlT
%j*eAu0Hm304'Fl];'a@N=M,jZ<O8[:D2f=(>&`8R@nH>*Vc=!C*[R_i,)jSW#p!kr!l8QFhU%/f*+/',N03.R]">76LW%#[WXWTc
%<9oni#GW<I6H46=+]aDZNcmO_C3IU\SUnXLXgGM[c4JH<q+V6Fr"l\:Be2k+El^:V!)a!ZM)[(:$d4^)1XNG_nH$l*m_mZ#:38CF
%C]Ie^)5<MgW$c&&n)Rb%RAj%f9<@OP[a\he6+XGU*KGH1Q\70>q?4(*H(&.I#ZQbC(YIaV.Fld:&1u9n&J!&[h1iF*N3c7Apjgkp
%nS+G8XR;$4p*`:#>YkQ<Q]<sL)/r^HLj4YA";h`87r"H0\tIseTP>$<ELLIC4VkHA3LWR&@=(>@f^\B/%echM]CS.M)uTf$#VdZa
%qOsd.g"e+ULe6S_VPo1L>/FWG-5iCb[(]"IaXiSeBT8&OKYBn@(FXoH3r76"e.C#ilPF-q0TnukJXGJM+@t@Wr6hk^\O-s"GLS2L
%PW3jEQgdAn<MC>5'F(>I2lMj49>4l3k5Ob"EO6jnP6Vf+>nSF7TdTNEd:V+W4skc!RY%7Gf>UP09sW#+*`=n51fTSMA\RmT[9u'*
%=VN'K+1GRp9(l5&3RK85'b'snB%HKM<3(@g,Aii+ZXf]qI3Ic/7_@-VYMtXuQST:9<#TubjcBG3d<!H']%2Fr#F=%W*]8i;+9,Km
%$>.TQ>oWUJBiY-f$GQ,e)ghtef#WPp?e3ZsJ-3N0@D[>e)>F>CZDLi\O.M'>jK%n(9E2M!1p)'7!GtOfIMarKksA)&]O4FboS.8Z
%aGDOd<94@Td6UPkPR(s0Da!&9XB$"a6Eh#g!W4#>\5%;mQ)ZZq:lmTkCB$,m.N5Bhl]CGVVA2#g1d8gEW>b/OGn?n0qKK0Pg7>[7
%8Z&[$&5Q6NK,[d)2>@e?CUHdNYVLL)P4Kr:>&TaUd@/H2[(=DU?[IMoj3]b<(h5Vr:pT_*\WZ\UX\Pq`bF3%FMg`P>/g^6PEXI/>
%+e&4,c^D15X55/_DFoJH/,>Wrq:04!hOGE9P?Nt;#1_&('K3b"!1MH8ID3YuJ!X?Jf-j71EgEY7njG:/B_7q^d]o:>M[G=)Rl$,g
%Rn<^gQ>,[XVXs1JnOu%k;5c`()3ZU9KZX/A+YffC\PJq?D,mYo+PZZHSP%Z#"h7]Ri^Q":VQ;]c&q1=$VMA&sJ^N"2HA4bYNiO]u
%:M-a?+Q9_J_oQHafXD%ADGO2DB#,V1nOai]FQh;Z:JO?+COaoN%6,4,c%)\-(m#1c!)U!QI1R`4Y1*fEd3'!jDt=5=[I-WaB`CE(
%iT(p#0ZsLSAd4>T9)V">oNK:iqM?O?"4kib'FG\]iAN#.N#,??GnB#fj@&KLO0VV3Q.m?*E<)oi,(Fp#j3Pi(TH1^Z[:WQk@6YR)
%;Xbe:!_l9(PEb^B?,iM[<$]#4lt#]1>T`Tm2c6G(-ZYh0V9u97kM,hD_i%:F^lpO$]49qd(X"R;SXPnXiW)_)YCme`F)c5Hb=GgV
%HcKg\^#]+mpdkeD0Ji)'<&gKXfHP:E_psYep-DL&&N_[Hb8[(37sfY6<u:ZsiL9_$ld(cjOo7s+(WRW`IZ!_aV(jS]p'ksH2(ARJ
%QlR\q*7,S7(Pt6\1c]j$1?]@fC`6ha`e,[&cj@`#R=hogXNX&Ar$F$eZ19mWRrP4eMp/)>;`8W_:Z\Iu,-s%i'BW6(s,F"J#=Hh8
%Eg**;H!"1:cfCsA-<IQr#_h!#=_Z.DEmp9Fk&\*/>])`lS*dbVn;ZRN+mqG9jucdWAnH,@Cbkt\\Z#&9W+F+t_>O+I?_En-q$nE"
%aX$U"N0bStDln1+DZ$Gp8"t5XSDE+eOt0W"N#Sbqi='Ue<PX1BBsfF:,<B/Bl)pL=\6HdB7P%4e-$k]ib=Gj)i)&_k4Jk;hRDiXY
%BR^R&1E>`D7(/MBEXu.Om`+\EF=Ur]>&Ct3`@f&6-<@'#h??UNfeaYfQNZYtR?W4ZXIO8lAtD,(n7R%E`3ZXDpf6pk!+j&B8iR?n
%>$;rIW99.6?M>dC+8@srs!'6P$I1`nioRq:d&/IbL<(Tj51dh^*`V[]"K0/=2_h1WOWl&sP/@+'IZcQXg8m-b.<"N$)o%GnN'6[,
%lsXNRMk2T)$V^Ma!RH%9l:7)rGth\X9f$R+T!)G]R'mF]@9BIgRi8hsJO#E>/MAl<>6*oO6($U&b_$=1dVj8[g"2,j]GDI\)+[[^
%0H,DLlf>WWBp\-TgP[aA2)a#8D=WL6q;D%/PWs"plW7,5^CkpX2!CoIPml1'9NF73"7:Hhj0s%`hrXHJePY[Wg?%@/K?TQ5TRF:T
%5,&9rVLOe*bVX*4b:rqdE1LWjho9lMDhALG\-_'@$^H_gNAuHPSY(=s?!2jg^5M6Fc-/9eAnLJ0n`"*Znik.P<c=F-Z]*3hoM@J?
%iABVBV6P=:RaU9iSSe])Ep(k5H2Vq6FPgL[kr6[d3=j_GAgb;?E0nT5$Leqi"ma8=diK>I2G;?Nh>K>e(#u@u46*1:S_r3%^NOPq
%e-=L*$p6?FJ:^E)Mpel9hImb6N):fQ)t:.&4k+%@Y,6KS%e=c<L:^,O^2\LHgc<^Hh$Fb//\t(XR/RO[hkHR_H#TgPWI2>a1Fo4p
%][CQGoXo`.TfLYm1HFMM53JPVk`G0nr7l2Ncq>hN!)Bp8:46=8YREBFBq_[33Y,;>B;;4#QQMt^aW),7HV%!tZHdRT2c$lLp/(L(
%C\CFcn&*%0e]agC0>`,2a6XL'DFQ+=Q_&KUYu@-^5s9mc9;F311EsW4Z44TF8k@,J-*.@I$AAi$M9h)n?-l/7eM%qK7*=[Sp!*fo
%^&*J'!Dc<=^%PD)26Oa_c^AY+nsD6_jJ50V4c!&+o%YJt2)-gJPcgmM_UY0H%(/^Fcop0`Ok4CE;q&pEHPbnAKOR(==3`4>.KOCr
%.BW`1Q<Er;XqIsqc7JTWV=#f&DYu*s^;5HT6HX['b#D']o&"./MAK]5AbfeiGG9=;_mBZ'Q\V`ggfB[;pY(K[Iq.Da0?TN\S9p*o
%=W)PJHVm8bA\JuB^EoM-WPOP[7IcTVVLL8A\#AK\he=a$(L^oe[/$#7;:to"]dTJBE9bohHnWXL<n-`S-rZ>e4P=2t6iFXb7EL%W
%]dR3?R?a`N2m:ZRigq&a[erJCR%u<Hqr)glG'M7`0mc^OQlSQl<\>`@_7+`>Tm$&@-dP_:RD90IZmio9MUALfl0#ZA;#5B#ok1"U
%okR?kRHLu]j>CYCf0$!>T%E+MD4]?k,-N:DBUP3&o5\]:e!bh_3mVR4XS0''2D<YD`S*GTc*Q,Ja_L5o68'"^^--<_nXtJ`H:`:W
%/ca27kj)Y&cbmhV$KbbR&#2=\&K.5)@5fAFqU3iI6l53c.PaO)l,oVf/R?hT^&6&t"&;7Wq7D>C.&kWC(r]*Wr4=HUG!\%q]cHk>
%?j7G6V!N";F`ZoE94mS%1nQ(Xq*SjcMDfr4c0l81)a9L@p%$Uo)0dW*X,5/Eq-90['3usGB0J5j0g8Wk:W<XS&NGN[&NJbH4nlH[
%D?fZs-b`8YC%T)F<;9gfkY>`>Y,<(qccd_bDrU[JDW@@Kb:Z_C8$YViS+^q^QGJ(0imD<)pb;#.ZN]sio?Oj.oagZI,SNJfO_uMP
%J;;+XlF7Qb[kSG-@MQ6T)9,r\lB=N$@-R#D"tp:m3l1a[7>>g:Z2/"h-RZeJ/*!TN'>Ki[Vg`I3X\-312qhRfQC/a<J():O^Vq<U
%M\dSOB\W?RIe,Z"k1>*4g\'HRq2p'rlbCo;G3@J,kLY4Hf72u8J%mD_r;,m3?N6S2d:9bks,uXZY5iW;`+()R^ZIVS.pGrd&2_/a
%429o>^ZPFT6GPr+:am/A/L+jcTP/%anZec/'.\.:##<1uK>RMY-RI:rUK01#IP+g+;C]-V+I'peML(A%Yf"DZ"qR]G@hiDRjje8I
%i)?6EVL>8J_ttA^8tI@*mWXK3=3+u`L!3J1T.cCf'Q(QX2I@g&>!IJ"QhSdlaejEQN)oS5P%>Ji#ZQXM":!jXac-.rQo1WZZ&D#f
%[.MAjle:t'ZUm9"a2;Yh;1id.f:-$L'2*S-#FY5!.eQP`ga`X,L*[(F_TOe+$<`0U@F[3^]d[q^d7DsPgJ#2lQT(MERRS@@&aKg_
%7`/LY2sP`+0_&chWjsbhf]t<'Z?k:_p,f>sGr"9)q.O5H3,pY"HU"AZWQl;djpNj6KpVVPbC&8[^@3mbGkl7f]=?'O(LHH.(pa,r
%?[/!u)<cJ,jXU]lPH0n]cT[u#=[:-^PGagT62GK.e:)+$48&4:DtgVqWE=-7>mXrJ+#`*>!<MeI9h^<Ne,HQX0/?5u_^<$77%=0Q
%n[lKRj4cb3U/l!+oubp&=S'@KMA+]kE1Dq4A_IC0n*hU"02AjNIXq'^GNWJrUhqr<!n6mi!n.tP3e."Sr96k<E`;Ah,u`A&k0Nir
%CAq9U;Y7Zjb4kCAXnc8u;c==Qr9`hl?5-NZQZ`-_NVkdsfCC,<LUXAuT]lrIWR"m_Z.Lhc(_)d.n<fAO/`tB9N;nfWJA5UMml;8Q
%2Tu$<9*_e5Pkb`)(1q6]^at!'Tg(%2:]%S:\4M[(+]e4XN0iO6K!bj,Ha-,pn@"[a$TQs#nP[k3YbpfiA'?%'4C?-r_3og1?cSP-
%3R,dO@jp5B*Q*dDo6$"kSa"F'bg4lqk3El5AsrHU`dAe:7b0;5L=Xp=D;^i.cb@<p/H7AAI@8f%&N)WBo6adBiT]3(2t3Vrb'R58
%R@-S211:]Sj2pO;,AA%a*M\bk1*mcfT9O.$1XiM6oA^U0qpkr_/mG<#El($(8I8J*F9mQRR9B'#576fPWFT<,;]Aj1-To]s1t3Q,
%-hs>X0.Co?S=u(>c(?faHc5c8cPcR+Nu;ED*o;@q2SBOGk2`?5Se"Kb;Z@LaZgMBm,%)H"O5I;-nWh-!rN:jHCra\@C+q9cntP(:
%H2<AqWd<A8&q9"2:F<VOqmDp+jpS#XHO@rDUCCR:7%*c9?CpL<1Y]UU#W)FK]m<'<bIG1,k8+iHf`_Niq`SP/.D?7?r2gapRJCUq
%9WlCE5F_9BK=1JGeu/,MgsA#>agmqNHoI\Bc"D+hg"^s52_f['B609*c$:]ZkHh_f0Uq\''S?-sDUPjO%n<!`k,*&PpNsAMc)5XS
%l.gYI2kSCo:JU)kD`"!mZ/8tVkK+o(1SODPPNe^fh3_fJAEdDUl[1nj*ThG#m;37QVEXSV1/*.WlL>)T)0l\HbWf0<rd;rcF!YGf
%\IoPime\95J*-hMP?BT?6+KTp\\=?0l1o)48"7`"T!,MND0]:lD7+lD]W@p^E0KiSO)L>VR5jacc`Dds&fkm;UZh/0-YDW[3PG:@
%Zk'%km_,[Y\iOMea'$Er=)OMppZ6[FTS`Vrc'[0,n+66.9,R"M.>RNm#-(@'pJg;I5u1+QT4Leo,,j1u3tHb(m+oMfG*nMA*qmda
%3`],()d^e?%mHW$rZa-[^Me=.`[1(l&H:f&3fuNe)To"p2il/"0%c!i!PF20UAn5mG<B0flp=H>*g3<Hn4]G2<BeAPUddn#]9^"t
%3uK25+Cu(8hmJno?3pF^Ec/D1`.HZ0IWDqmr7NnG`g6hpFd\S>o@!&VYdF;UgS02L_lfmhWQpErfdMa?2:91a8B/p[1L1]C[ggJe
%9%$X&jF"QSr2CN#kDS/GF*^e+#NI]H!_phN4;9$jES'm\A.YVB"ts]#3l*B67>>fCn`c6gT:?>Hf0-$]<;^W\F`jb50%UP.0:/'*
%nZc,/VtJ3bFd`'`35l2@4uc;-OYZ<VUDFfFI;o,D1i)@]8FLhJ4uQ0NNW*S2``ZP4T"f)\>)T!0P8%ZM*l!tuRIl=(oa:,*q6%2&
%+.+gAHdLnNR3b;rr4tdSO84Ebre9.jA*e]?Nk-g7gPd+unOEh'()#ZW%p]Fe]CiueTNOtZFWJhSGgs_aAI3B=cfmrO9m<'$?3T51
%IDj1p^E[WZ0f8LJa9[3LLLc'#<8^^TP`4M/ats]McMpQ3_bMu`BD<V`J&aZ-E381/[HH%0d'qb;LR/Y#j0HGeajf5-6HKYgB'Nl]
%p$s<\RB3=BL@T:BiN,JqbSSddB`pb0].Fq%Z=<d0`LL)D.*VKL>aoHn\XIO*FoAQUH;`<@9RO#iY%4Gm^RWD&&sds)Dsh5Dj(8P&
%l"99ERE^n]745Z,KM6CT55VFX2d/X'Dc2rhTE"Hk#?/D&n[1DplH@Ik\aVnuDR,Q"I-G.*Fi]k-X]Cq;E;m#TcF6pTSh68CM1[Iq
%"DM"#@[WQNUX4E,&nr#al/g-*U]CjK6qta?NuFie_gU[.s-tsg3JF%tf/iDH:>TL_$u#l$BDA3%VcEG]l4(F;=MAjW!'G^RdRVX'
%oNJ@pU'%t9RPi@D-@C"-jUnCL"2;"a&.$\0c>O82%"B\A3"?&a4t'1qYma!KnK17[5Q1KGX7Voo[57SCn.p];8]1JZ+Q"k"f,h^J
%FNA2mi&PH.,p["WQ$TcKFFb:d3IWql[d`1VN\-Ue&XHCM@piU^Q=N:C"?bTWM%S]3k#HuQ;_0SC,.=]q.nV9O&-^U.X!&Bo(YJ+.
%r,rK=Dp\1keDiX`4ZkI5_B3af&gIN-(P"fW8K>FrmER12a<g-73_ScrUYRi,E9S?7,7CNqYs]Lq<J`Of")W"M19;V@2Qpm,Q[kd[
%[`H<?BFi(lr<kL:J)ZOhV":@g[rt-1/S1RRB3Ng,Kk<JTm848_&hi_[,>/@Or^PBWQ5#1>&I"6:,i@>;%\c)<@A,QiUG0,!<PUS9
%We[,'H!04u5iHrZZ&u(2T]`;O</Kuck6(f>E;V-N]lRIZLc1;D.gZ9q7Tba377%H6Zj`"n30@&QUeaNi",k*[,Ua2-npj[Rqrm^D
%E/66+#YIP8.YG_M.l-</ou8\u+sUjAd@!PE!b/gbYuH"A6dQCB!*4sD(U*j<:O.OA.#:XWAMae9.8,8OGXY'Z=gU=>aGd&1!aoBN
%!hY!smjHJ3W[eYlSto9=JEu3G,VY`^8V$q'@NeTGn3BhcL:8UO6pE5kK2W"Goq1Qti^Mj;XJ@6gYlbP;-n31U'_F7FOMPPE&A^kQ
%_/b'e<<i(RE3;ilO]d73hG;$T;/N!l']Kkg0;/OB!G`;q,Fii=_ApH&3+2csXolNWhY(i@P=Q*RZGI6P?s/^q!)I"L!@=b\D@<+K
%+c\9ld-u#07rn*h6P<X^(!/-0EA,GB@u*mMbDq7!$Xs/IJU%Go!lt7=#0o5.GY)@!JKVS;8jl$ueCi2F`2t`qM45V7M8Ug#1!3)j
%Z4*7EW,R\@;p66"XY#fT&MTN7`*>30W->59Cc$+6lO>=WSl0!BPo$AuMN\Nr/jW]44JM,gk30_R5cj[OlVR[]OB>s,=XB*R1RuP?
%`,*o'S1:`gQt/LYBoc1!f.t0$&@M](]#Fb]E/N^o8-kH7m%bUi`n\pV62et0&P)IHpBU'C\USI`M=&*O%)7#UHNGhdV!W922rJk7
%eZVt#.2Xr>.[&afSV$da@L1+^E\d6eShk/<lMnE<i.9I!'PsZ,B"h2&)XY&k#.6"sCcW#-0]CWt8KBXtApbguO.SW;E-DNZha6of
%;&M=?=ap0cU:U9.[aJj&r6VQHjO76]!98o3=0T<l[/.P_]W)l^j7BfD^t$YVebJcfH\<%;FCQd'bZ,SV:<_%&$isK"R>fNW,LUfJ
%e.)Cq3lO<bb(ja5b:h^O;8K:ZSg)(1V'k[:?V_#55J3ltKUiU.7lg13<nj]O62LJ\0"TT]EM3ER:l%L-T).?#S':&"JH+C%I'6@a
%'n8u0J'UA,Dq-?5mutao7SqdB-q_4u91,n2+Le7Mg_3G/0=d^fHm+kIOi`jaWIUVt]0b0F2'mjR$n$g1OlJZkbB^q;#N6ZLWK8gP
%8KO])oX63k_3E"DkpL57+3B^&gJDX\N+2\>Wg#]^kXV!XmPHe$"\G'Q3bQt/1^_]/<krB-'n"Mj[U+K1lX+$hrQ!,5(@4I':Hmrn
%-;BFn?TV_"?[);LlD.2(QdQhLNa=JgBsZK,p,^RQNn+W6JBiN/ieHip;gl7-cC)7DnFbYa6+YNA+p8ouI+8EpQd&:[=0g%&.F*XK
%NSCJ%\qL[n!2)s#f;ec1:_c!A;oV`/EP>\=6Pfj)YGjGi$S^*m[GJS),;Ms%P?t:LTu]$MmL%32fP0]4aA'?E(aN89>?/:0YknKW
%<_moRXOT/^4c=#E5-<9lI@#8\D-/rp,uNaBnNsQGb8=]]?g3iA$"=jH*J:F'Gh$C:nY\L6/>MOrT)uX+oI1;g`,)&jC!10-edoZb
%2?%Fh&qrq^cW+_F[Sm73'!Le1e;h_moYqETQ0G8lmGZPC<'#0ZV#b>rfG>sJ&N2+FP+^(.d/]4O4LBO>71iSe"qJdsC:),hM\=W_
%d;_6MYKM3hh1Pe(Usj:^3nU[VKR&-87>CfOA9-pa%BhJlU<N*X-h[SO'b=-B/935<8dZ\_61nIc4IA>p44@^tWq);k]=ka;P:sn^
%k48"2_e^!3>1XX@A=go39m<$<SWa:91T/hWNFo*>l7&FAmj2")mbWQ=Z##mQdha#Fh8GX8IMfI)Y/U0n>m!HoW`9slYLU)*C2\28
%;L\XbSM=l7H5jL$a;`]-]L>SV*nn61.5S0Zd$+=!h%3_Zg*17O/?BCp_JXEo[A.91<ce33g9=CXE-=X$OBc8[NHW8G>1$P!!(Z:K
%%5Bdu'X6@c##Z@fW.nI=)H#bQ.1H\C%FEoAirF,s$P"\D5MLV(Pfodu;E4>0`->P*r-cZA7[8Ci:9t8cg@CB>"MXILL=NX\,D"Y`
%2k;d83ZT1\ah8tOf>Aep)u9TJ5md_'e]C0q5,=@F<LT$@E.R1JaL`aWO`AYN0%%A*!iIsHc!M7>m&dZ<)mrG"T(@K8ntoD@$6sNc
%2UBTjs7n<L$%c+-Ud/V<:>SM2OlK:_S\aAVr$U7^5@#DW#GYZ8FV1s&ES77JIfIA!'-1.Aa6ek%T4`74k//`6QLRXU,&k-oKqi@/
%o9pR^3mRN#Y@7,eb#`9gj4bMD4c`6,n09[aeV2AFoJL00dB\)kS^$#%B(O9kKl`N&?,nAY+2GI-m"TGElIBh`6f0F1_fXbr<#&p%
%lag)5%Df@qf]bo`Bc5jg,git_@O_n6,OA_o&QLR0F!LJ]a@[J),](#glD$f8K%;%NH@p%'K-bR\TCjo5P0lp:MSOts:\a;*fm*&a
%Q6&Mp[ahO7$hRUZEG<>]#i$tQ*T"39c>iG>7a,&\+>2kun^4"#J6iuSi?.0R-lRg:'V-h@CR2@4r'HbbI(<Uu\-9d3226+HddY+/
%0O'<PZe"=JiF,)XKl@WeAD+?hq?X07KtAc\7s;On$s`7\g#G?gAcj`qETY^G:`PFAQP^gV@\7jm**mu43(>hPO7k?Ra@lT4C_-G3
%dABop0i7>b>U'n&dBcuWe;OoiZjW8-QWlXA=YO$E;St;1]g\.P7j=YfA<Qn:ba\=4>s:o@K5dS@P>ar=mIH%3_$-:2s/LN=S62['
%G-49>bZHQ>2gW"3TuU=?Wtj3*MXic0?d<%L;'fUFIFn>:c32R/@/]drWhKb\NP)as^tn\0B)%RK!YAtMd.tIq!MX-Ad,[?nk!r09
%d'Z%\LiX'>^ChEB.rTmp1&umeo>`iW`&2#\1)c6LptV)0;8B#*A^/:Qd`OLaq-P4(4oreb>&CJ2r8SHRm7OKV[::BdUoin+DK't1
%pu<U7rX*G6#T@!0ot13j&JP7[d(/`5=HkDmrq8?=aIDQh]8&#_M.:+K_#eC]p[Bu)4H]Y"TI*WFPt'1!%*im1OT,_IDg`Ig'F&45
%3SjNcs7`"fD%8-)NsBi.ZQ;a4Y<ff!aTHdKmnj*eCp_*6g*\`g!jt)"ejj%?&N-\bfioC41UO]knY6NB!ep7u8rWno<H&HAOe#_8
%L/HB=A`R>LS9&./s2;<q.i(GD%q?L)62f:-KI0Y*3%VWF7=K?Q6eJ\N0J(,<e<+,@puG:p+XHCQQ'gF6rW&>ID5ul#+&4^r]*`2f
%^)J<[Mj\l1Ad+62R@Eg?A&.hk)`OJ,>/so&7_27I\1""1O?V9bhsee,#KnEc:"`#s=Ke*neNU2_Jm%$4<m*2=X_8f/inR7HJ"2]/
%A\>QJDj3G@FKQ=fTuU#K<@^e2!&^bu"I<80#BssZ?&m1b&L?cFX)urYaU62K>+l>>?;DJm@)f=c\<b:mb=r-%_pp+.Pm@_G@-Iib
%c1pp#_7hbriPc)V.tq5A(@=OC[LDioVaVp01,7M-"#\-CK.F_U3D>&<L0!*0`iffaqIe^f\^kR8]%+PPf=b-;YjU0IF>]*[29GqM
%NG>TGL'[!"g&q=re>W4_'><.c>^hd^Ii,(;6`iUeCBH3BPq:D2Rl=p"+`U0T3FYjhHThO#j%&9.bo^p$"gWN$4:rO2AX$"Y,CGhf
%HMU99r\S@tUnZ8%DDPI9Pc&)%7n8FR#6bmaSWq<H^H^+Ce&TiPs5!)q+5]1F<$Ot_g"M9pMPl@]5'#f[>;qLj76%s8h`BY5X-Mc1
%j'Tt)?)O2t3Cl%-qWffL5O]Tcqq"mcr;O+a"[K,EWPnU>]cSBWkOu$9,8LcT/GtsejJPlb%[Jd+@mN,2mMcCqUQmS9M#5e"mf>CM
%>pWhkYPFr'r#-_cUV%5m_lr5;3.%:T_QS7U<DtOF-60*=+S'AD8\Z#!.'S>2ZU!Y\26:Z1QZ[sb\3*lrT(-d,EJE9_Yt?OYM-gRi
%@Q]#UC;E2l-"iDr_g9A,=84Y;GhmdT_ZLoC<&)O\Eu+RDV,;e&8Z_XdP-O#qc<o#5e1;tf=_8hf*UdZM5..lF7lNeL/c4C.:*u_$
%*9_b:.?RigHAEA=&!u<(*WDI?NTcQ2oY^esD:)_Qi^`nq(LML@@U?7kbJ4$[BeEQcP&sqX8_MJH4dYYnU7:9@DU>WpFN6VactL:s
%U2@d?l90!+SR&Nd4,XKFlei.b`9u!$%&0nr4@=J'iW(WJTo%'%i69S[O("G9:%TX9Vsoa[@J1giGCQSt(A:e'M9SJ?E3pB5]fub^
%]@EIjMKug_&:KdLUXcK``r>j@-0k'"*nk]-2oP&\6"-VdY1:cp-b5d13gZY+r,o*HF1;rYS>Os;pV"3Z9Vdha'#2r<s7OuUp%ZHI
%ghg9$Xej&-QBp4VDo=-%!oD6Jf,o4SEMKoh-glo7kl0/d>BTP5(_l'-"+)o@cY;I=Fa0M!0cM/#jDM4.p3[6;6gDWXr2=SA$L"4l
%r>Hc[M9@n^hJ<pPc,q-5_5d?bJ[067%(&s1QKe1f_.\EN*b_Vi$LYr8F.*^K0>rdB7m7tW4l%,8XDQA"Lbo(m?OX.^s!![ire85J
%S)5=&&\r[oR,>Z&gdY$TCkDoBT,.?UZeK^(qNe]fS=Nh"5j[]?Hbs]ZaYd"*rfV.c[GZKa:f?d^#bBbcia5f5g@?n7`6\?S>VP>J
%Q6D,eG0WO8K%2I8^q[<ZHgh7Q):Q?L&deGf(CO+?`qAr25P1=fo7qC\J:Fn)g$plkoS&oSabHEpCbPV[cB[H,=141gd`1:Q?Y3Xr
%^Tr@3qphK]khiuB5Pl[NEY#a2BB;VVn*V6hqtI7;9)ebn)tZY0f&Qb^_r?S=Z!o<\PNhgis5A"id=68p>kFYA3gr:00>I;.p4<<p
%H:9mc?f\SO5BCorpog(>/,sbTD8C^;DC#/S00<_jo6>U.qk#NVO8db4\Dbb>?Y94igZF[6=P-@Db>=,nX"2Df^V4jbmPiJ0#QFJq
%c+Ca(_&Y0'O7^`7@P`>AYS(5H=]d33?7c:iHd"gT[J[VOSEc4?Sis1XR0E+tlZb]U>?tHhCc*7MG$"A(Kmi:TI3DY*bUb$3:P=Fs
%Vk_s4lLF@kiOj+Z/6paY)@KX6lg2J/",J#+g;:^"`rE?+WrqTqjG7$=>QKHQ@e4<-R9#?09RHG)>$T-N98b=;??n8%ak\M&1=G,*
%bMOb,iX-c4<9edFEVhUk>hm)A]3gMh*M4u+AshXglDD/!R!u[Z(:.p@TuFX__!9pCg0@b0e%2r#PVVpN2t#`9a=K5%A*(\\MH3na
%38Z5=X_u'L9>TeDne)TrH!:p[=7mm4n`>15pS@%\MT+9!V*ePs/Y*)a`21Y:f$;]<GjAc%EUu6)Ui.hK//:rVb"L::<bJDb4pWh=
%,FohtZb1=*Q<FcA<Zd[]1VL%E[C+r`p=[UVEg/"bQ4M+SjlOsTS\T88%du(./[TG_T53!Ojhb4j>(1gD9eSG`q>,u`TF39Ne\]9t
%Gbs8%&`eYeb#XsZ=P9lkCHuLn5e9-^3PDOQ<jF4p4"L%A#ItS?W<b"#6[W!M`,ELCSP\6VFes3o=q)@=\#[C=;g:0?&U@W@Ss[C[
%d<VUnRXX&J>J7#;2-6D3jjVbSF;J2aViG(agXZ6cb_E1148uX,;8$8!<,$,bk=oZo-'FDF[8Y//CY;0hAaT"bc`\(DS#Nf!P`aPN
%d?B:"C=L<02IjRF5Ye/!"+/@rE8]Y;h?p'reO&3f3-Gs[2>nnRb&/!:"Q!pO\@rr4&$C[h*Z!A(Vtg/chP!bO5NJ/ionsP`?b\CV
%kB/3:+4mQYVharRq=5(*"A2HU:,-+-Oi)lX0`K3/K4c.n>4C\HedC[MXl\KqW=f]L(G98AZa'50(u=,57qWdq+nK+ed7RFtcL\0W
%NOu)F^QF$-'-$ULod7&maAt[%jkX<8h?ms?mHjcuFAaWXTkj1\&%t0`S;+'&bAsO[\nAmrkeh+:>05=3qrK/f$(kJ+h1Vt1gIkuR
%jQ\F(4)WP+(QS=Yc-YQ`DGqu8MOUlriUc4-<h&!Z^H-i#"EtP=hp]n3Ao18sB)&FG.^LMf8`mOR?=^33nJ`g!_2Cth#d_]ECFLCD
%Z=e__FsdqOZU[&tb$LJka6)$AaYjXXfA,qD7H:nKeKD>:->M=-m.l[R>n8#r"X>75n#=9+4qQ$sGY&1RnhK\-MGMFCA,]&*g?7?k
%,t1qG3G3l$Yh>$?Kq3(+76&!h/dSrP95VMT>A=HrI]4UtX6XV"]oa,LK32qm]\5IYM"sl(&`5OuASHQU\gJrnl_0Q%DJ#^2A`cG(
%e^eK`]6^q1Y<NAWX9K#'*8qC!:N#:[?*5Xn/9>*7'l^B;4hjk&%hG/P8Lu>>pUcPDV/imAVCnJ/F"1gmUt+\OF]5tEPdf1E@gO>d
%g"t@bYM<E"D'^"rOM:Du[dK)pF/tJ[M$'0edRh]B#dK"m,T^<07C)H]<2=JS]GbMMbfr&P[O?%^a5/<#l#Qc:>?;jJg[E,Yf:C:F
%?#4.t]b&gVe'%QXQg:K3S`[2umqs,8=M$Zbgsb]EanjEQbP`m$^i$L,>hKL=@b&0J1[AcD]U;C\l,eq[T%2?@rQXqdc$`=K=8+Ld
%bPqH,^"V!6cVIQ#f,lJGU2X2^DFuiVm;5iV7p!1#Dc-2%;idM,)(YP'4]mY$XaC]$`560QHq`Qu]<P&AI2jd"%^+hb\",ij5!Ni%
%O3b`&psVr?M`5!=1PsAAh+AlkX9TA>O+&ZX=g-^/=)Zr!aiJ's9qE6QX(:Y2h)b%D"a1BoORdd<'KAH8#>`P=dt@C&^cH#UPLs;+
%D,h*bbDG&mqKf8c[#mN)4jjC_\"g!ZI-g&k4g9qK*U`9=f2rG&B<pWsj79U_Ha7hocoTjjJ%e*tl(8=)ZdMUN.Fqd>kCpgCUJmR\
%D*:n5IX!p`Yl<t;h+BMIR_>_?Vf0t=s"#Rbb%I0-GW<;I(XLClgQ1mrn7aXu*e.e3o7r%F`qatU\shd(qI9;7n$/(*Bg9'[r(k;W
%Kp"8/0$`"TAKZ%k$qc)o[EUOL\];J,Qe0CBhIZZPl8Z+aXB]<H2D9->kOUqplX+lFAsM`>FuI%AG+L:nMn,n]r:T&Lo\j?Hl9;P(
%EFi]+eSF]#LV5l'n"*i%<t]F1JS7LQ1,iC9G]e)2/2,d\`SJJ7FSPKOHQHFMgm4t<q7GSNP'e'q]#rhl4`JQW?`t14\&t\`qs;=g
%H!a>M;@dTK[Jk-^Q_#9+cahlP^eWbd(gF/u5<e4u]2/F(n-Y8&MO\PFSus\$W@'K+PFi"a>'rO.h\Vn8o(pm0q!'@!EjWj/0DX@C
%n22=.F^APe[efjud*CrM8%D-<Du]Z'^Y_h"oZg>1+r@d`VfUIDlZCEUcX#[uZh?8<a_+fD6f'pcdL4Jml)eoeB<4GuqB95Pa,F]-
%GOD4q/JblJnqZ]0iq^i9VcYP=o-L!gO%ST'Q'YCVAbsUJ73b]*Dq;,8[Ame<KZ??REcJM[:hcGrYV:KhdeTZIb[[mVegqj/<7R7;
%Tm@a2jD+"_WRnQl(J=(t_]&3%g\Pf9IlgT45BFs,`p0#(g.8<NO,a&aZX[moiO4#ZaPWBHh!T?LA'Pm[l-.=ddgZ)6J]tas\gtMP
%*9disT+;mlIe`0]H<HRF>(Pe0qL?,jq)[]-g!XFn?^tpBVe[0O+LkKcL1";6:>K\KilCZP:DOr$*fb!C%_4c2>/%bXJR[,4(bSRZ
%j2i*MMlhmAm^!)80tg/&gK'('64I?!_Uc4oh)T#!mYSp=P`<,R:D=shegfL6C82Se*DoSVL7']!B&/9459'5qb2Hp5%p6o[ogV6V
%>h=+Qf7Y/Rh(A4?itW-Vfn/k4&uNQ5f$^&4cQEMrA.*"VGEM&5,ELI_3>Rnf<bZrgPJi#HJursMgi^U2kq%s0bMZ/[h(jBFZJi.a
%?hdeo)dTK*qcPfq^6Xd09Kp/K6a$lZIZAoA37;#UP!2kSk]F;ELOE5UJf$[UZsOp7?Y7@1"GcT:%A,r"R'8l=QLmee=)$$15*s0*
%pjd<"5m-3B[7s&R2gc@GF&2P\FP?1"hUqle!jAES[TiN;1LU!V&LTY#HH7LGRi_?%#Il[M4bbF<?`-c?a,bqp7'kngJ2qOJR\*lh
%kVM2Z-bHp8IRGh#C">e@IN7QEUNDCFhE8+VrH.X6+*dLsX..q@V3d.9O"[RqTNS<nGB5l9'q]CM+%,+QS^SS8fD0Cpj837j"38K@
%T%uXYgMi=;j1nna9rf32Cd4`E'49B'lWjn*2opJrH-Z;h$6N+dQ'P2q%4B2UhK[GGTb#TIW(X40cN\jqmhkjg7AF#`E7i9SEbH,m
%dCr$9GVVCE)R0*/UB4shEa:.VYh`f:@\u>WFkpcn702VkHJ?N,47uiGYLH`=TChDN0"$[In?\Ss4t'FPp.UG-Cu5\mA+`=(-Ur:V
%+E)\9`7O"m2:?uEWpPQ^rq^a:W[kQr32LsPf`lfq8b=_X)T\S1JpZP=\.(0Fl1;p.I8fnpA22qf@<@0,OL:VS_b2^F&FG*Q@W[@q
%ErXZ+G1$hQ&=fYfmTmj.1o67nLQ=5sJ+iE$@6NITng2mI.R9t5.9=#]r4a!sh@#Bn:%]#gp_6&uar9h*_:*?[`_%:!93U1-F*]pE
%s"^\,hbm@UcM:ShJVY/+e;Iajk#<CBN"(3ba?u4TQtTm1$nsLh@bh?gQcm.\hYG;]E;O6[258uG*:k]DU$045:bQaP)ZJcmIq*=Q
%<mege-0a\K+Y@U!?QJL)$@?!Va48XeX-8m6$1:bqL3`P<_mJEAn^7WJZlaQ'YO?CJ1gBjZ'5eK)lpjs&bCM]l7n\URWVp\MaM]Pi
%]D6\2]NQ5JPq(Pi5rkNAhNI=<g@;YMW,Nj4d->5CV&a.$jl!;KfLa):V46[QD=n+S`/DiZDBuY:=Y7eJ(CuR12AX"J:Xoo`osDJ>
%9g7r_[DMTEHt0^N>WX>JJIKq-neJ5D00\45GW"r5Wu*Ft@qGJ-mF0/B8j(FshY4MR<c9B1@(I)"/j5\C[.95Y"T?`0o!Y?*6Al;q
%`3!A0!#bHH/XT>p`J_-+=a5d>CWlWJ0RC1tMO+CJOti`<^3b:@=H;J6H52Jj_*g"XVPI@,;jXW/dd'rqq7%!</aofrXPdSY94_/\
%;1QH2jLC/8OJU%ke%XDSYL\=fVia]arjYnk].CM3G#@D^a/s.(S@iUX2`t$kWl-f<0J\!dZPM7KU,=r:V_[&(QM4lZgP\"I%9:?I
%M=I>GBlR47REr_:lb^OTQWnh]G]t+M+O[F"^5-BHOD^kP#-)Ds=q+"GgHi"N.>E7S4H4:EgFGjFnD6Je&tX=p=9o1o@<)`G!r3Ja
%9lA]UgGas&$6S"n]M`S$*HqW-I*2Y:G7tp#I'9ne,J)R]NYL?qSr#>:*!<qHW9B<DW9A5fKr5t"m+T`265]i='E->R$W/ih4Vji?
%kq0)Mj);bYEV&6SU$JaP;(6^3Z$dI=g"!CiHs95sj\N98a.j#Uo$cD=F=Q&nDI<-!>qJq:mISolC(He3$X8CHdI,5'0p=!sPlb8T
%&DUQMge]LEAg!:^@>!0/iV#7ADcu0P@I*PtO'"sc/!^;R>i,fV:%`d.S,K(n<UZlD)Ac90idYpFZ^-R%fI1elDSa?o;k]"jV4>(<
%agN"mluBWnXN^c]\lA-#s46aN)t*&(hSU(F:fX&ZeOZjF1]t"gFEsM"1#)#6_m20;,J=cTE^DY3<Cc=>HT>\pcY\GDP8LSQiV:fi
%XP6m.>#i\Wf2&dFkNHV8<]jD"p*<^1`X;B#P"A0ri?2<fG&DWIV06V:5'iT%g_jK$pBh28`d.KT\nhAKMf#bBJ15BlR)Ah3_WB`i
%UOCKoaJio.,+K,+,]_BiMm5mT,*C@mH:W+.`M:>B>S1I]V%,5.)*fQ2%IP4n+$3FpO-%h834k\a5A7eGl<<?C35/PK=\DWq`RR=I
%bFY0!rTig4SkLOK[m4Oea<Vh=)JLNVbVLl^,&Q.fiB(cu?[Z:$.$-]nkql,<4KPD&=73/)QaPte)t$$WKN,H2aHu#]Y]b&RC#F]5
%?:K,=?M:_rb'>Q2Sn7eROS+l`;-SJ:)\Ocead7Om9E]nLgb9kX`8&.2`s!$Ig,JT4]!'#UH=/'XZM>M;jM_R]q!CsuG=UZ7=aQ?(
%je@:Bq%4kk5<1_4-+=OsJ=Iq6Ph$cf5'slU*3C5;@C4WR02Q4kYHfeI?fs?/o\o$\RsVltp_Eg,JdX+ma4Q#HC*/L[_:.'X`lN#a
%Yo@J`]l"cA\bC<BTVN%37PR9M85JeVb+uNT4M*tlG:CJ7/P8lSgS(DoL>nQTbC)0t+PW9W&KY09?!:*Y3pRr`A<:1`Nr:U-]A4M?
%!eTd7#u?3\PQh\5PSo^Mb)C/1K!O#E+kV*O#`_2&+k*3bP-9no&7q_GTqkTicOrP;HJ511a;n8kUD19&.Nq/Yg*O)mQDS<2h%/o=
%fbagW!&=YrTUend4lf!BU8i[%lk$^R?O<_bl%:#jGd4g*TY$s=mmFEXVTD\:/kWPGeb6A4mbtu@&3/4*X62-gSngtT<aRpf<Y@]Y
%7Ws)U,OkLW]af]HOQicbB0anJ>.49Im.I[ulh)Q:#H0\lklma'Du*/>gN-[&N69L:KM82b@_/$uW2nY#,`+,[?E`X;1%Csd&?V]8
%TJ!jtG=Q43,$[&r^ZLKn-FV@2]+bO;Q]f2icH-YU6!%)i\dfN"S\O^g5cAE,mBThTJV*Kh3A>nqg$=hkEh?pD\.N-Ei!%USY">dR
%V/roSSU>-afCpL`g>ABuORDX:.'Q2lX7KFMh5rs-A)XZW4>5ep@qJu>V-_iLerjX-(-aL!#@3NU2YplrQ]46]<j6`h@IV#om#B\=
%j?A9hV?oM"l\pg)@._+gkp+(smU*0#*@-5LB&R_!E[NV]2Hm0GRWS/jZkYg^nLk>Fj5`c1l;Eff2\*sn3I53H_Mfc;4s6nAo#=.?
%V7<e%\/[H9"+pG^3\&p(Om^.t=-?tR>7Cf^\ZN18DjStLjQNYEInN?BA-T&KVkbZVd4'&<-br`\s6;+k=*\WpVmm2;22//!^%t@g
%J.kbk3_lfL,iaHm8P`-l0&U.7)j<Fg1Hi+i5FCe_S`p0CmUS!#Wu&HE4Si$"p_Z5P8upkrJK43/L>+dl-/O\8ctA,^C4c?"@N\]$
%-X*tIhfC^YS>]HJ7!.SogEL@dh63-FFr\:c!bVYrjr?!Sdtb?shD>;r[*_LIr"+K0VKDYqN45?Q#1BnM1+qF)_;0aqOQ1$`>?WF"
%iKO'!mGT+V]@c%Cc>G9$ZfVT>=$*rLP<-fC+c1o_Z1/Q;p*-]f>2qZ`'\1i5cNQ@ROP$#L_l1q=1@3"\bO5SV;]'?Bn>rUOP>M!A
%fB7?bAN@A?J>oQ#CI6]lL+e.*fD<+3,qG15Y*6I$Lk;qIlX*l+pi<NK%LR,NeaHVqrfph:XDVr-D*I<fFZ9KcIOdj5@^"SP&2fYC
%4:[#o;7P7n>Xf$6>dG;6rSJr]_ciD<j-`dZ&3Yc[']e?He,!N/dHJ5`bA(>I+]m`Pl8X*PhM:(\Y'st9\tBWfc8+"in]2"tNH3$*
%0!o30NoIHNn<&WjQAo0U-1oee0UTAa4`o-P62TSho@6O;SK(VUqT$g"i]W%_n@`(Dc`&_.-RV"o:=<2&3Pidqnf'Hn>MS[SZZ0LH
%(rj(%f,GGhN+<L\0GHa[emCWP@i$L0`],2nWF-kT3I"Vb7oM'P-Mb0tpS5Z,L=/FBid-N*>K9u^D#gb$N'e,B7&BSk=+GsDfh)D!
%V.+Ae$8l1bchl<em5B+'SWiDeHo&l_L=sK1%0Xe)DShlkCOE%7RdY&F&67,?Irf$;ZTs"#+su=h;K.Oor+F-e?+TDE_JT^MXtbH@
%h;)b2g#-B"<GJu4kfo*Ek&3:Na11@d-6.S<'eT0)DM&-,q2<#u/jJRH.C[:cOj$E[\[$KMg7gH92;k3)Q?j26!"Z6DT8ar%/oXfR
%;EW0gp:"ot@D3g:XlHN,!ET:h#8h0%D;P]"*N25<2[GRAjKbiP,M:n,8gOXC*`"T^K=h(kr8]-HimLY:b@l("*f61!fp/C-nmuh&
%)/Q:/_c2[YnaL*56uHFQNH]%hBd)/cfaG`A)lCp-HR=mUGJ!(W@u#uc]lP?<43_rnSa$Zp`.h[R5Uf_`Q#[f#p8:4L0J3bA8)^[I
%,G9Y"h&$Mg6,\EQf+B-?['o5V`%pBllJs<)[$_Iki5@r]&@^Me/C7$J_nLfU07s!,#1%H:[s?jNi?1s/K)]]n)(D\YD^A0P,LNBh
%D![0@Cht?#+*kFi"1F:OC^5(l]I!Nh^Ff7'+pSIIm2!dO+dGZ!:V;ES2&LF1_MMngPK$aWbE8<8&:MYrHqt?Va:5\%,OJ(3#I1Vf
%2;9Y)D3lh+=2?iF"j#'-*r)jb(G?OW\.L4PpU<Nh-E.0oX4N_WeUEj1m,8-C]q[4W.=7&tE>=q6L:m`Lk'F5B^V/C?h;OI@,"giY
%T=]=;b=RU"&5,K,?Z%YY#?pq&8GWG=LQN]O3H?'KYNi7X@O9R%>1F6g9i`ppdpRPaGgfE*U8J)Q^h"9'd/'ZfqY@;X9ien*lc8RR
%8itng'LieG@F.\d<?5!YLA%fHDC`CX<4odUF5to$Y=#gbr-4j&d78>eUFE`cW>BWa$Y3i7FA4bt:9=%>'C;7YbKSAO_7&1UY3)]Q
%[a(8obO.u7a4fC[gYPcMO,M9Xa`4S3\FV+f"&;3Qc\o2gQ@@J7e2!S2a0+Bs$RV"^n$:?p>G9cYWhO'>qjZ<M>#Jh-i<L3sem=$g
%&@gW5(u6<k'p7Lam=@f[MP7_p^V*Rj658c8daH"pZMO9t?fEL2MA%(a/6+(O.n>$nn#NIZ?QCK$9698b'9==tEcnEA7g(S14lDTl
%k]U?J3=eP'ZQ^tQk4iI\HR^=OHP+@7PYQ?H\`te8!*M)]2O'VmqIZkdNZj$O%=/Is-eZ!J&T"M:S67k4(UXC1(WD`3@=9_.2=^2#
%#d4f1a.Fi*M^-?6Y%\d4j^8LWQ*uu]N#c\n_tEcbFu%tG'!ga"]h.1<!PgI7n!JQ(H=\:MZZj+%]r&6u-Vml/\Ro0PDI?JFK-T2'
%g%EJYE<1hP-sEgIjLFE,)B7At`/^pJ[mKV[UY@)bC"2.^p@ElZZ+bJmH*P#<[1b&KJt$aM<qfc$;iL/Qao0Z5/Xbd_n20l9IT6MS
%a[!V;&`j0l:.1b8\[ElMdc$ptK\4hh!m4km>q,-#2j@!Q0co+L?pMB;g))Q[KHLu[(2t8*7i%q3iq-FMW%&)2$<5f*j#U[dhCUS@
%"*dQ%C+4UZ*`9tqJU]f`*+&oVR*<@Bmm64DZ,;:j@`29>%q7'-o1f8qb)-9p33[NDj<(aFG57jk8<_[BX7*="`'l+Y4Uj%&e9r'u
%f=(SID.XfubcY^'`_d/bgDXBd#r;GT>/9!kd(Xo2]8CW.$Dr-F"Ys:$Y%pNC[rsgW@YOX)4BP?jS'bEq<;Mf"EO0ID^CGoc:R^oJ
%E(;usI7f/<fq_\pZqJ/&FOTDLa&d-b8_Q>O?H1:MXa;$<U61Y9pgZFcXW6eJ+3)/"A1eo>@AJo5O97jiN3;h^gUmlTiegItZE^sG
%o,-@?j%"f]G5QT%/P3*5`smN>"&j6Vfmg7(ic=7R#dD&QFk,<u\QjX4ZX18-^<*c-rH>pj\6XXTL4=f&'Q(F6&`Uc$2U8rYI4o5?
%3Xnbg47SI^/So?I*\5\,qg)^*PBE'k2h*gi\"0g.p.Q.D!G$BIjb5\IUB&M#`T0_/gcfC(4bn?aM-G[#5.eeulfi(7`+BNtmr'08
%i^Gr_>LK;iB@"+`o(At\-MMeL<>1P3Co'_O40)td`lTKiqb15'Ds#mbh12N.f!IoLe14c":d/snA?<;]]Cp9lb\/67ehZ6+LZYtU
%AU!FH!FQsh-"hSi;lfe6.?M2kdl4O$28A!5`Rn^))RFkCF=l_ipPl=nit_:_H=\lCA]%(R_[]PH<&Cq/^>96mES>UFACi"3-s!*g
%mJQ$Aa+ELb28KlrE/JG;Fg7%Lh\cq:rPj5CD^O=+9\$3iSo;eR0\m&kouTIM?_sgpLGq7\A5gUj!TZCO<*Gq80b\g]+@]-/JVr5B
%\d/d!I+-<S$F.?fT*X7%V5S@NLKlH.H/9r8enhH]mjIrQ7$Y"]UVSiM,Y]*&qG&<F<ScmKjTC>"lWOW^X'TH9RI29W04O&A!Xspn
%fSsKX`O5]I<kVIo^>CVM.d3@<9=U@oR`K[g._U++n'Z\-l$ERHp)spoA6.`ljkd'82]':FZ6cH!NI2,rfl%g5A'^d%,4LH,TQlD;
%qhpDk3ue"=F6)Q_n5@uO]ukm_#$rO)61sL8!$0?[*QLh[X/H"pGRV,nQ*qI#4RHYleX'\'1oNb5"ZIQiZ<0@<o"._a8$5m]9BoO:
%@7`',=MW[bJ<POs\h=;um(Y@DfZa0:aZUaupJ#AX#Ik1+.L.'ZinV!hX*p$^EhdZi-_Yb)%GffpO3]U2gu-Yhh'gR'T00(nq+_C"
%A/'FS\Mmp=LC]=;oc@>_Ie!aaX]EU^\?U#:?7<V5$M90Wpai,IfmTP^GB`'94`lfN]!'C"GZ!i`^?QIU!q_96Fh)$mk9'_4mFTh9
%(Y(<*=nUb>bK7qXI3Q+sEe"""/Z7d4po]fMJID6N%C-9Q"<$m,Z)aY0Dp-biKA)Z;JM($[a/UB%0DKj8%6n`[+u<C9O3bp@dqt]G
%+23JsZ+1"a?hj"*No$GrViPD:VnRp6``Mp;:1!qi+&6:00J@L[0>slJ']p65n^[[7%t#&-U;6E/Vu#+IKaeEKb$hUac'[WW/5XQe
%>]3"W$LWC4nOT4W7+n5W=WO:.05K@L_E6hJ9BT_Q<&k9BVTj&].oW>OWrgJe;X['24`bRKbTZR-W(Ic6YfI(O)FA%iYfcI:]/eEn
%/BDR.PrY6jX'n:+5A9/rU+E<3-q6/eC025gEMsc4p^OAZ1JF0i>`*Bg)HIPPk\Gh=$GOqOp;_Y.L;PsLPO8j;YOH-9WsHtE#Tsgb
%PuM`k1XD!7:pV#$"A/:nWZ(""*GK"Lm5tnr@[Im0f%lYlj$3<N4[u`h4.qH>,21inPjUH!3f)^3G3MXr3)C#/Tb!T=VW^B&Z<;a?
%@3gGW(gKouVj6GE3Jiq.\%)A=,#$s\YUiA%;c[I;7O=2aC/u/d3_1MA=^IE3,0qc_]>VhX@(Rg8@?-Uug<N8u5ucnUg'*=!T+P`u
%bCsMqclLjn_]bCtZu[c?jon3PW*KN2P>p4Q#J*#NI+/XR8r?%4A/-Dl.b(04[Cbt5.R)3aPs9#-o>ujuqX]L0DEWNE_jhn]l,V=,
%Jktnf9s#tALg`RbP`OOLXsD`G4<LH70=!-J6Q8$?XK%49cjC[i7%(i2>Zfo$eS]$:MCJsV4+r;AfT+?-X.ntHCBWg$<(?+j"Q!5j
%gaYcILd4hrh!M(lG)6a9W^q!FJFA+W#MW6]#qIcN4W[LO`2UV0ArqsR63XEjWpQ`;,Q\0)o22iP79,Ge]IFA2mV6pG:^(4h(hHOM
%@-]MAdN%.%"6_0bW&3pgNPL6!d:`c*4=:[f<(%RE"d19)1F!:&RN:TH8:&P:I$#><7VIDLXRLb&&.C5FNhf!Bj&jMj&<]_SP??\t
%mY%U7E9^93%.Z3s0YFG,L,bJ2\04!5m6/&KFuQ&Rg0JfYj!p!FQFM`#\]WrG<6IXcH"luc;8B=fqC%.$#c"Ce)KOO:-0o>jBjt>Z
%!:AdMK)1p_<*dad-H@sTB`9@G-k%@@3#pG.dlo0\?b8r=j4\'X=/g!0iTY:Ld<2q1q&J#SUAHTYLfC/i,65J0O*jNnKS]ra`%bAX
%$*<?*:(9$IGp>TI9&!WR`jPQfN"s4IHg6V05P/-Ui0%!ACi.!.XfXNS2.LDPAm,Y]_V9CG[MWX<qJ!-+/El'2=8TP-EIX/j48;L%
%OYe]`6D`/r6%bf/:n3U2F4:0QGn5.T?Es5J2"r;0AoOn:#[K7XeXr,p9-Bn7L"_rIO_>/H")m)2FeGGF%'))?IgCJs2m(!tc$nN_
%_<jVHWO[@952eWA?i]ht;8K_S>]b(8!-[+\"!&;ThFTR)Uu@s&XdjVo<V^'6auXR.eh+T'gsk'8F[.KZVaJ-pW#=/hhtq-b@"tQ3
%9ff1a7>Zft$M-n.7UjK2<%Cdo^q>WB>#9dE'2&d.;&lB(P*Hm.G;)(qS=F+o8V.6Ta-,u6h$f"1`7+O`,etBi;-:G[C'Z'/EK\9"
%Cka$+7V0F<_ajl?E!i])Y_(+R`$gcVk5[h@7E.?C.&d=sbR/Vn-R$)G$rT&0K9:qUBdG5P0N=/:bq9tk2Y63AZ\*RkVMJ6W5`,%5
%=@!qF0#>=V_T-nqOp#h4Ki82F*Se(e'psaFUbEk@V[V[l-n@[]KMi]QFD<^6#W%(r2HrC8><!4%?qP%grFAG:$PRHG<[fXVUfi9%
%0Lnbu).m9NX=?B/!uQf9#\-$30pU,&@?MGF5oiQ19_(4;"!,6%.oD'?L"iJ^Djjc'@3#t0J@5fM`h7:6N%]s_eq$dN0Q'_l0\U%S
%R!dT;_iU^>X97^Ghq]i>^q[Qh,XD\KkB2UQiNm7Vr'M;5`H6BW%<HVllY`Q!Z^[Z#imoMJ<Q?8,D?9Y!$s?BGV%]4RP8-$L`KK5a
%cUp;6B=p>DN,BUZLPP5(Z\*RkVuii*"L9L%6hCYA2!?^#$p%=@%pT>%AG@Y3_.ErH0NAEQLX2_]W\EOeaW`s*?A+^h.h8PoK`q0[
%_4Lq$*SeP33P^9J*b]!tS(Ssb%+GY,''5Oc/5o9'6;<;g7Ms55S4GE?(hOJB,I7Su3t(Ea6^KG?L_r],X+_0h'!N/oh!HdP^kbAp
%E(8e.5oNf)6pV_8/]ocinBqjS'qAR(l[F9L$B*)56^/V`_iuHu%E$Q/%T8T\n6fLb(n`!$,-E\Y6g\8k(r!pSdTubqK]XOb#TVDS
%07g`k_a;7WM<0J'L?o:hXWbhmoHT$D;*`+>gHhN5*l_Q,Qipq^7AN:]?TSX`&<c(8cjp$eUa6NA)TNAN``56p*RZJ!G?heDL\.^c
%4Gsf,p$LZZTl6lN"N=\'E4=#XiT24I`W6j.)j4B:TO$Ne+b`#Q7n=(d-OSW?BrJ5PJi$.&M?g),7S#*t@DU]6YG:UAU_QFqN4g"P
%Jg1XSF`=f(TKpS`_pTuSR,L#/)a"Ac\6V8NGZ&&@4/@5%`f\9[GZL'"KS!?,jG-9b^uLLVBiS%*:c]R'(hm)5(c`;LYr-W8G]?is
%&bnl+PCi-"_Jo9:i@#'2O=/46O1$!N1Cd#4<ZY#&%fS(p]Kl+o9u/t8#n9O%(8CSt35qRY(@@so^35i$7aZ>e_1Sp>10H@ILI,0t
%NWLF6@@(rsig`C@WL72Y1:b))4b0pj^&Vuj_AHH1:r!XC%aku`P%,KR'aE0<M7#ih!37=\N-I&=b%#*N^>L8Z./lZ:7hs!dCCV>D
%7S[$fI]PH0mVM<0?6KK04C545!fL(gU^ED)=m`VoqHF-9;W>W&&&jpu*Y.*G.THuVN$m^-jC^7D,\q'ikV=om>.a1$rcS=$cNl@!
%]((_pGN2!;/<94WJpJ0IF\pDK1^#q.<ckgKqV.\_p_>A@h0?rI]C?U8hRn2CM'&:?;<UsaY9q]mKj#Ab/4k@#QK"E?FS+9u'a?PP
%8LZ3Y2CMiVWDT%RW)7LnUt+KRME#_l+O^`rKF+/SS[19r:fO%T,<1A/+UEWiZPSu?YOBusN@J!'_r@p4:lHk5[=cqJlMkMcD0mhU
%NH;r)!q[T"b6!j3F3O@p/`q]8>57A,n(q@+oif@E@Eaa$p8kkrL+M$I^Ya8[aNS%(ZMN'ENN9'@/R.Xl3_thGP/2r^0Z(tA4:p@.
%#Zh$]IV^\_]HZeNPQ"3r(QLJGI;I1^B8$!g"urTq*ucK>\a8=,1+blAPR^'9Q"sWk[!Ts/`<72::Zi;@mbp,D\.jQg"6j:9=Gb#c
%^i`\%/Tl>P=J%+m*mgcU2B50qp8=oYX`6@\lZQ'LcX^6uE(pd(VK#b2O1_:;O$rnS/]/N+9$/B>)rYq3aF-Gfc&ThWphF#n+kIT2
%EO-D.#g/2A4+39H3k_d5gpRil`^Q%<2V3L&'G+KL4)9Q:O&Z#81Xb%J%N[1,Vft3(d0e-41,-hFXEZtB'Ma6+oF%r,jaE%48Y_20
%>,3H_*1uSs77TW?ZA)0K($\#;\'_QS4jY/C#A5;\q63/i8mD2LgH^_ia/)+kJBOCb/((UN3dlkr\g<h@7<G?%?>VhV^.@sR0fJ?p
%)UYf930eMkklQ-j"?;Pi/'Z"QQpTNXZnJFcJ1K0!KFOA;Lr)6/c-$QC6e[K9&Mqk>-QOpfnJX9`rJj>_)f%r9D.!g+HQk:(fu5.b
%fn_Y5T9FIhq@<7TDLadMeq+$f6rLipo,RrQps0pd,ep.S[SBen#.:'<,QFtf-oLS&rq]E)gG"&>\jj+,ZpX5![#Usb*O.,X4#55)
%fgYL(#I9.fqF:IYfL8hlY?aP3h?8ad8/gd#L)*=`K(UG]:"$sL9ai`u#+iXoIJ?W4^WdfKN<@7D_U*QWoUWs.L@ms*,!@@q#6<@t
%C7!1,>%7refh7EZf97LQIgN[i>)&hESIE=;q1n'&CLiRHW@U]n-QH?6(dc69AWChn?'Kh@%]"go9?[:rq]#b6^L\&/2&gLUXHE3<
%G]7G^S3'W^!Gmn@,.=[X]0YbOKGW!Y*E'rbPgqhNd2Id*VBDk4+uTu@8:U/U#fI)(^$[iapo.2]KH72/mq@]ihlcioK@ZS_LCjJX
%%;UUI]f+:WVE*'g,W.9`0Sq&9Tk4T4^3hoaF3Ied@6)d$>[e5RbBb3fB^KcSrK\>`6(hX-7U"h7+OUVsp0iTJ(CFC869RYhJ!fjj
%FBZ?]aR_4s@7A`Zi"RS:D\'<ClNd\eirEbBV)7h:ZmPdciiZjkBZS9`Q33t7HoALn8RBeO4%4Lgs%0=.Jb4m_#`UgbaOYou^q]#_
%Cf"f)/][R3Y=Nhu%'l>$)mjXN-7:l2S<Fo!%Uc(iZF**r2oSi2m7]fgfJ@%qjOt-2,HYt[?tV@nE#RB6].fg^nOL#rO1I+=67@g;
%33qp!k?oDZnm<(cgmHbN)%:r1N\\,n)I(:!*]46nMA#qXOn6'cN5l-A!XCmU/#@fG0l008]d+<fbF[GeDs]KYJn'V'WO_nFIe$i(
%_2;1B"a<pc!nk,e\V9db=pq35(;ZoqUq*Jl0AB)dR&g[%0>@-IfD]2=dMc=,'I^o?RiX@[@T38H+MM44U#7V!64&Mus$\Yo_s*(D
%1*S+ALZM'BA9GlpLc^N:Tceh^/JO@&ESu<C@5@BabE:AsLg%5&B^,7,<Y:#Sl=fIF)l<MNEhkRQJP;Ki]7*.'K)_RbO@[UE$m!CH
%X8KkUUc"0`c9FX444`+me/2jX72o%BOP2oM7p=pi*4B[#=sTX[r"h5FJ@fW=<0<n,ndip+ei3l4>tmQ#T2b8Ng,.NqhM8Jcel7=l
%?bVjKGBFBr#Y%!&4gect&D:,X^<'[!$84Kn_=,`Y7:ZI<7&\F]qpV1eLS+PCiHKdlrO8&Np1W(Y*-tK?)3YI,Tc4*:)q8tApgZID
%Q#rU.fPaDd0B+7U+0aFmEuJ=RPbpZ&<)GVF2[Ur"Vg:/LQ*L8fH`=<H<PR+`C.V8^7iuN=/JD&*KO'++dLHml8QLH@=+&]]Ud;/n
%+u=d/.VIR&860-+Gj#Ab4*'G>*;VDJ\j9&'L-O6&B08:`XGqRO!+V43Q.Af>;B9-<3;p5C,Fo^dd5gor(eclpg;e.?Ehf-Tc=IcD
%*F3h:m=%>+$KpVFiRiUuRj$1f<;XX8>bHlBf)rUm1f-/%+)/J4IQ^g4%Mq4dXC2&ni[*.&AVV2fnD#Ngi>c,P*8?71p!r)K_VACq
%Ol)D_0.E)6c[TmO@;h75XLk^.rWVVe^,0>PQ9Q8"6#\mKD0+,+G7l_;g_Z$\3!@sb^ZA9D`on-+%5bGanSeta#&SA2kFBRU3Lpie
%dPq]n.llU1[31R_=)ZB8iQfOI+8?Z5D2CW)<@n*R'&r9QQ)SgGAo6u?*sC)mRtI[`6^HpYLZaGQ3m!%HkOH(g@JDoUB!Q,F+#foC
%<tMKY@5i:YIo#o1Yr:kWF2qsZPM-i,i%glV'&A.aIdS*<XE;bb#(#M74I<5'f!FB^Xcq($jR7TpP;FhBs8MYU^s=Y/Y]:Ma)He>A
%+U'#KIQR`d!%o+!=G2#Kr.]Cqe&NTa(H_a]\>!+;YXrtf$-k\?$8a%UaK/U,B+dl=DpGG+".FQ:\(KFaTV67t=_8*;?\C/0Q\<_u
%%]$\!VW$T_R]IK\F<_umjU:e<=@E2YW2j^/VWI#?@l_2S`r#Ha/NS:GWL#nQ!O=GR_k&a3T_fiG87.VUb%mW[D]W\ho^NeM.,"s'
%XZU&\7U-#h+P#g?fC0:=h.3+KI5.tR(6`ScNg=jH5(ddoL;*V#:GdhfSu7[tcu?YpHXJPN`O>AW$IVCP0T#c7OIq/RbnOi,,agE5
%;9KYE`44=kY=Z)7=\Z?H\@0_(Bo@OZ>6tt^^'p]*!o]`m[dQfFLN)4T)&XM.[^`B'6$mcE6NH0mmu>GtT[f3qHsFVe66Oqf/pD<!
%>s[(%hP!Ep"f;83&;M<JcO._jFfC.P*598^-$DHt?ZH6Y%3<BMIlEdmk?\O8KiK@%)Wm3H5cqh-Ou3VGXuW3W]:(c#0TD$"V$Q2p
%.M%KA.0Y@%N8IVOg(Kfj<*XkH8n/>KOd$j\mLhFN.1^YGkp1Y3j8r&PkA?,Ydlt&^JM0r"A]kD+UTG+_JTsG)CUd<O[=fAAg;+V@
%aW0b97LF%GK"T[Sd48iNU/JZ4r33dIi<l:^E"s$9imMA2p"&YS4;=(5qmEWO.JR5Um2`,+:WQIa]8bcR98eEWkAA7;)sYPP4SR?l
%jCgf[Es.CG27!uFr2-t2%!pn\"^J^q-/iuN,U!DO_p&@[UJNYq.j_?p<73P9L4W?<[Bjf]"qd+',>,!tq)RFA4Xh6PJ[P%]eKajh
%b$HJ.R0<;@n28$XeC5g-CG>mSnr:&2%`FMkeHuW*6hS)]"+n^3iMd&5ECrKQ$'r<DN<Dm3[-sqH%u!DFOiPd`j7kLk)Bqu5g/V`!
%#n\g,!n=r:S1+cre;Yn[oFPCr,.<%kBMIs@BB@O/s/YTKqab0mS":>YLJ_#RXF/\G*F2.!(3;I.LquLK*IDA922PhJ6JcbD>_sB9
%JoL3+nO.;&W]kQ_6U+f0n'8Q&HlN[3(>GTIBP(PNN=InefpSpM9UWrT[^HM98>kuFJVECB4bZfrlpfDHN5Qj'ZDgG*7^S4p\mD:Z
%eu*`IjhLZHK;($*qJ4_q2N+bHS1%$>R(+;[=)hWd\&fQXc<N-8YZ-S5ZX@R&S.5?5Es;tJe##/iFK^lKqn,YWkucH:=]1%u[``RB
%k]_j&CZ`VpDhL4+3&4'rc.#J/:-!RrHjjL_EsJ1uD"_&PO#*"?E=m;uVg\I;oJ*84"-96*G$sojibCp[2@X!d0Qu%[7Z]QL2:/$(
%B#\`G&k3O,B*tWEa_;=HZj?OAWORAXqmMY.3\4Q]G<QL"F7A;r5+4Y4c2CP#`+kTRV@KqN'),"=QG=YJT_n6W;\YE.-Fc2KVh$rM
%>0QOq:45c*9J^DueO.*KF4TI]2as-Q6QAF@n-Y7)%*GC_/Yh?!_eg0iTu,LJ]-#[^AHJCg's(:;]@DH+"uoRO&Fuei)5G%\9]h`E
%^OG8r(o&'H4E/bCT+23l9NOKgDb3HMIb[2L],/3&F;"!F0YjggNX<YK*h`Ia?t#LeGf+$c#I+\?@2"8b'Xj$q#EGA6@Q82]#$d4U
%Y)"GfAtjH_T/j/'O<b#d^rm5:Rm]IJ=X($T`:]lRJcrAF8K]Sk0A_3hEZYi`JUjZW@oBp21Hh[jMYnB?.;IuC]#3BFc.:p#9i:Pk
%L`8JQf[JO1.?N7sU"^-G&bbTLpbgs\5eST+[s4tk>j/<+'(uef!lLeP6Su:aci``F2Ra`00eocM25=TRYg"iS&Z!hl[pKLa&S]L%
%hEHZa,)GKTnBd#:Mi/Yi\,7E(+/X13N1\nD?\'QOik7JBP(GZ0E5R5IbVq10o:&nHb5'\t#'/=/*6GbIa.<tsf+e!.=suJVA0P_@
%ZT?/j_]ijD3Z#'pjD$@nk1mB5Bs>/,DI%!fS7Gm`nI.E*efbJI*N-5pggc@EQ:#0\(otSJWYoL@XCgsbU7p]"(/%b4;JtS"p3&2S
%."k?]ghj%@T1e=E=A-p4E%J\Zai5UZp'.d>]3WcLh?C8t@UYD"5K8U`R=Eq?`(9d@s4iibKJ",1>F,pJfKVhtR`8+CQZfdGaEj*/
%,V`gcFU&0k_Q-h!Gda10kSQrG3:)e7_m^UL7b`s&-7$`a6qVHAr?-ElVS%d>lD6$_4;ht?aVL4n^59J5/Ju\$MJ_ECglj9W6SWR_
%SV+j\9:7V^g/'5Z+2_C7jg]4j7"_8]=#^m(gF.0;9a`FTpaH6LY>>]GLBHesrW$a/1-*u^IE[2[QXRT]6u9G,ql#4sDWc#[QQ8iU
%OaY:icFsnG=ZaQ-opa=XLQb;biHM5oMAb8:p)FY\EqWr:(pO.DJ-!l'rUY)e[W"BBN\f\].gUffif'g*X@oW<>eDkbi;auT8>&KP
%Vl2=l!RJ-9`%7p,q/q[5<<T-b)VK_@'Iu3QWBM&G"7?5R\p3b7^lJnB+b:nFK1M>GA2$&=hK+6!CKgJlKO;KrT)1D7<akK<,67Z_
%:Zi'pg-U]j5FH)beE$sc0&&f+VP12FlFUN1_FtCpDr`AZ^0NK^WT-jG+&+mZ%'j<cB>"(U#MSl'YqA[16&=?M-a"4#H*6J5K);+l
%N(\jKf3#6c;Hru$(N"o?DB:uue0">B"[We]?Enb=(us:ef2dpW7sA&Q%HAKsSeX!O[Vp/M1i3R`,@p6&YZXk6=FFfK\$VD$dm%&>
%1"ZN8Ki]5g\D-b61MLdj&0qq&N.g<b"7M>#riKuU[Zf]jc>]Sd]siHL_a.$1SiJ(44.Z;1gH0Y!OA_?<L]HckQe/`BY[YCiGhKo(
%")rd9_nh7)[bE8:OJ2a(M&1&)b_m55>40<Pj+^?lHnU:2$mA<"`']cJOBi&m+'SqAqK!69)<NYa=gHcs"`t/NgCOf9Rk<BfYE9QP
%"CAAP<@i_!@0bi.VDdpfkM/uT11Il<9bA.<BZrp?F#-m!GQA4cBN\+J;Jo#HiI.T)=,SGl__<!^@F08@BXdh*K/c9]5<C6,:FB=t
%I.\l1hh9(/RPZ6loj;[ZG"?'T73j!Hi[6B^`lTp[9Q>o%39t:"`n\g#esc;Rh(d,2N.j<?k[A_XJPBkm/`Z\H`je*HpVc?SX@&e+
%o3(,rBoh!pA]'itSjiD+j-\CcRY.GB9XYHN0dJbt\;nL#:;be86a1&4>q>p(oeSS?RD#iiq$C\\)^F](LjZP'[=Pr<0,T@9P-jCR
%1U1;[iAQE9)[@bNBoiPHI_qSdIKR$-X>khhRs;b-ZE"H7h1UdaQpKA9'^%*cNal]X6GAqAFiB]%o-4f'*iSTo!]F1$%cT3u1\Wl+
%"u8uJ$\^?`$Vkih)1"NmDIRCFa^=Oc*hkBCXej!PI)-VWYs1gr4-\0P!'Dt'Dkc`=ei6fscqVSlGi/h</X_JbLNY1u&ajKi4ZHpL
%%e0nc3d5hLKqn[,NHb.6*T",\-3W:7?j+:.AckR"#E:B`*-\;N*:fuD<s"qG:2dE)Ydr^@+`f%@4$JR*jXd2o&1(udR$MtYnJj0X
%&o@f-V9F.(dMBSHL49dKfC*QKQDD&$'@[J.UmB#!7-@[GC+"<0d0I2TRan]l]5\*kK(qJ6[P]tUS$5gCG%+C9huSY.+u\$XDO?)h
%]1qMa_DmKhf2Z*S]eC`,$*47^'Mc?S+&W2d8/?-=8fg4:qpH[4M\Q:W![A$?R]7Cinm8ik<q/W=%nRi5407KU;ch4BM]JH>9<2Mp
%@]A@$),IE7''oc$_-nX3OB4cSGbMYE3$;9k>@>r*ZEbQIfm1W4`uVP",PIo8Z6/MP%Z]k-1(EhJ+Lnon&"2Nr24gLP>3#,>1j*iX
%0H)3toOWR3>3Y=Ca#,U=H0?@sM-:qDC3X67Hkj+;[!;'A\f^<jY.1eloZBJS0l#N+*3\_fh`aL(K+#E$:@agG/G_RLa4safHNZ%.
%V%4CR?-1"e&"<7;F5Ch=73:nMg-o8eco=V,G3,uWMBof/1u;p-(0"d_6o>@$JD3\!c=]pk0g,ue6m.Wgm(WhcFRCi1#ba[tdc*!W
%/`C"[g?tDAV\/ZVFDrsEJHkYfHNZ#nqC';H>28W+bnP"mR7/c0OQK<Y^n&9Ej21;"i90NF)B@`eOROr*$/=gUUZ`=3*c0ePlmkJr
%O?pp@p+^]mTm5PG#%-Ic`6*%Y0(O''(/_ur;hM"=,+L]Q4m6q`Pb^1Llmsq]/n7:#bcug5$/sT'_&cHMq,p4L!(!Cp7d)PaN6m++
%(kP70p5>45=Zq$Xo6c<kB7^eV&Y%1ToLH+gUVs8hlm+Uf!#r2/G-Gh'A$Amk4AOs6I(3r!$,U<PY1V?h`Apn#+s!gG6e[ktYs\*i
%e%(0d^dcE7&ALT2,4&753GXieLW\Xam8*pUdk\J9#&=p"[Gh\2\^^Igff#<?o3(PsTgCZ&hRaIWcXBh&?3knjS>ga!fYf_E'Y?4n
%6BdWO6&>i)4^;0=]M=3tM,o4_Y\%1i+cit,G'm_*.6Gf46'(tU$\Giijto2uT&Mk*@rc`+EPqq<JY=sW`DV_KBcn87cU:CU0Gp$B
%94Q/6`;9XDY8WP'#-pSF8)tP+JIaI&H\?W4fTQ"u4?q8;%449'd(L,55(o>?;$*+D1JE#qcqh_Af7)F;F$YBbRO\a%b%`k4!^eoR
%Q"F)p_SL<1oP-`P)"DUOU8V$RXq.4qneO1/=QlQfa>gG#p3WNB\3ri%$S)_*p!\k)IN07oSJ1t]CoT^?UPJ:tNp[9u>dLn1*pB?t
%JEWlK45V\q+jIUA$4i'J`sfL)l8E"se07`UZ$nYffD>shEA`XeDrlfeLKiBQ99Fl\SM7Qd``BRs&jV(rB";8^&*c5OVZ;?sOkr?J
%0Uecc=UiNM<u*Nk5DDhBH0XoVPT?\2P.n>1J7Da)K`OF'Pjl*C)e=/<>I]^($4f/VS%==]>mB/$G!oi"$@=n0s*VF3J?p],emP5)
%l[^_J@e)[h%[)[R]_0K9e!-FmEGT)$1ebs!0=VVRhVq^$.d!r?CBZeH'@Ru:V<Os"6jJ!dSCBk:Yg3hm_0"+/&OfHT>B,CJ]0=gr
%T\7m%?T%I;YFJZ@'K0BnouRXWcHa9c?70O_h8*fTbcgL)>*WWTPU>@@%MD@,EHj^-p_sGX`?:[UeS@:a$Q)M54s<W4TCapeUndFQ
%?%r$%me`dKGt.EZ$kbGGs4j(Vh;P1G/_4rMOhumV.XW)eL6&E$bbg_!)A@LoU[Xs_Kb#^ql2Ph2aM:W.#7bV?d*W:D`jNZ.)_A9h
%[2KP<pddm56`UP9fQ6EVo5Y(M@q*X>Kil&3n"_e!/'QAQYmNr?Z'4na$B>a48MV@WKBX'fI]?f3OFhhgQLirs1HuEak$m0<6c!_C
%[S0L)`cLj8j9^]ul*0D)<0GJ7;P_=S"P,t!G\C!kRPQ>iIU:=8>Nd=P6?>W6Wga@HK@6u55t$BW:NKL!=OEhU%9:;1lgloR-$#/k
%^ZUK+e[!c1g&qb#]7p4FV79H7po/jf6OMEB39fi%o&Bs#6A/Y\`9G(H=*P8G@=SIH4H/bmlu(C>lm"4-&CM7!7REE`@0YmCB;r"a
%dBe;7=1KBI6+B@KUetZ#1r!8Q)c?;>XRJ!\!QM+(pHOPV"P,taWm^X@-Kn8qYS@l%eHEYdj82(?l-;VImG%)66h(!)D8c&lZ#]=>
%-Ph!GMQ=???:AC"[B7pnWpbdOOjVZD\.(F]L6J)Gf:EWl6psW__i1C.lSW%3Y](if8hDb+^@q,J:Z,=rJ<e1WR5(3,:=_MK$@mG=
%=^I,-<C"+76;$Zr[]mW]"Q<nT!4_Jg.$,`n4>O3*AFX$c*iK3eeP72GDV9niK-C^)%T:BaP1sJq\=8Z:0]LWieBLASA+iSb2P27;
%!V&#;=HEqTafl@,-gr,OfAb.E:1]4MnVH,mg^4pDr,[*J@PaVp/'&Jmm^%-.F(\]LAq[Wc=\N'V)*,gE8*MqRQlU0HCN<4+lWRFI
%g^Q:naT+<_\/m'/nHuG+g>j?u_St0Sgn'"/)L0HUhIR=0E&Aq5I#p3jZKNGVGR6i;IK[/3V;"P[,>SL=eQ&mA!9-WQ8Qm"B!%"B[
%7jN?mBUuL]"tWhBl3.`?9>-_&(h1Z8UuCA!IpT)`J$lb%iFQ8_</DDl0L@cl.q=E[hU+q:rH!30ZCKC0hXgC?_H$)KXd#4JaTnBg
%&.6L&O!98tN/.047*no%LkhW$p.KWgs5ls0*Zfe',u)2$=g%\jTAeg!2DN=nR-Bh\_jo$aKMD`n?B]<1jYXt[6!MIu@!G&0jLAE.
%/E`g?*4XfRi\2Dl`Th<:%!AVlE[3ii!QN\@XcVL2rf":ml5d"K\<c)W>HL>;rGGG6:J'n7%H@JAaN@qm-a[*Y8:Ma*ppsJN&J=_(
%`I1'1m!Ka[I`,@_@lbjj)?k%Go(tnm8U3*NOq7&6m"^HbX<dHL6Tq+pXn'X]8[C1Z>$1:kIB38uY3a1IE;a/8I]R1hgK8GU-bF&*
%e`$'C*EqPp5OQ==M"b&$5H$BlD(@eh8/<h8:uiulhLq3B[LK"u5+LC6\^#q>(QeKQY>q7s+kKD!pCj8&6BWo!*a[6/`>$+aWoTk>
%0\TEJ0HFi&aRb)dEnAejq-`1'.trDjCQlqe:Y$-FoF:RM6fiHQn<Q/Gp',5b+eNR$.Eb$$nVBY&T#D`:&PQ/`S\o+q[_&6>N_$&[
%BIYRLBT0>oim'TbM8QkLRqP2M.V93tCi1\jc=$iKV'_[-]!5oP(b[ImS@P1m4"ZUH\q(/,N.e.,V.iao-EniFQ=rl&lbVM)*Y**K
%-QF0M@XAYen-:s-Gbs[=%/0je%3GDaM'IA$QN9j/RilmQ+u4^,Om0,uPmY1=<$27%I/YBA"Vqc^B'l[Yh6'X`_"A?JIU/3?T2I,B
%i92RFY.^)uJKEELQ*ihe;^Q@n"X9]oWR^2fTH#L0G*=7-JJF/;GWg]K6FO*,s2(Z^^2h3)0g)VOYL'9-f=-eK]1[P=`"un3nuOh;
%>7k1<jdJ2k:qt7H^.G7t27141%:2L@opF4.%X&cRW$63fYNI=^N8u+[*Vh,kY6+=:g$.'K<+ui*hVf)RT:>?(MFH?nNFoiK$409(
%3>=+j%p@.G4Crc],p!H?%rEn9QgidgoJ=+3c\T5P8ZKs.4DT3>OX+$?(E8'V;"-/o+?*Bk30kmD'muhHITOq`IZMj#QNJ&<`9Hhp
%&:Dts?8DCQ<d<<6't&$r^BWmYcI%Wi+(U<Y$hZ2[*f^Y;F;[onA3%2Idj-9EU7hsPm2SjA16M=FoSId>i_*WMS:Wge3po7\],=Ku
%.X7V,maRl=l-F#r]4LP]GDO68UKHTS#6D*L[M7cO.iU@Y$uh(R$hZu"!c'"H@"n>LmdOJG(Y4tGKV7iL27s?:icO+X/_ZK2"P-!?
%cpP9(a.DY<)YY&\p.hdT&g!Zi,J/GXER.)_PMdX\CmKV9$+pmRc=p)4/hVU$`fIW>l3]1C?;J(T7XGWS+POOjJ,KJ'31TrE3He7%
%;<2O!#\\(EV8:=\,GAc_#Il*9JJF;IYjbT$@/<l@2<&2&[!&R#\j=c].ea?Bar*7!ZCGt"5r,4he7]OHR5d'_f^U5JhfXhj\9DI:
%"+K0c7M:ba7u>8Q'-a>S?-kNi.u]h0CgSdsOU8+G>h6cuph?LkqBk+.X[%6]86NqorNqU6N*W<tkNA`@5pm*+&Z55Ec^3F]aXRo:
%>7E519G4qhd]Scm+qn&jJ]]AE%G\,:BXtQUh#0LUMS(8kJ]Cf`j.Jr:QSa=QSmAtH72AZj?lnjncIS:7'%PqZN5nEI-pg`6I??FQ
%Ib")bZl_@X&8.3se>(k>B>_]VD6"e=JG:T+"\A>p#IBCIEb*^C]1rRV<=bq7$h?C$JUSmBB[>)rjNH@"pW0l(g6FNCZP3!a+pjT;
%kVAlY3(UPmD:jj2K_"[s65#AQT\-Pa/u#6aoUKmIMGP6pl=DIakGTSEBb/PKCIC3U(_r[;r_RE!IdU&#oJIg]"J.8Q$H/-UNC]`3
%[^ClH(Qd-:_c'.91KuDYm="22HEa<`QRD:Jp6dqE/5giL.c(4P959`"'>L`lc-;Dl/%1%'X-()O"0@;$<I(XeHUbUbP3QBUC5oU;
%KF117qd.ts7GO'9%$Aoh[*UN2;g3TQoFoYGYE+MFYMs6$EpN7(,_I'jCJjI.7]iQGHbr54OUmo%E_cK:gWYtIZF..1e6(_JFq1k.
%ijEA.Z]3$/ejQZ^mTHXP@&I)aDu5dB"ck6s>4g*=%Q3;Eluqn[j\AT3G.bk`C@G9L\XcBBQ!S^`+Lun)l*\?'GP>Iml]PTK8M?mI
%68#!*H<ntbETs=-WIfdB[4@094DO@\9HjBuV1VAuJJF;?H9HoQ6I*`:50\&D>WaK5hX+c;;J>,5qqT/WI@?(F[c]"`]eV?)\Zc`R
%*Bi[cVF:LO__P!FNQ*9U0%'?^U+7A]2s9KAbi^@bbkDB5$qN_)@=ecp@0c"O!C[=.<*IY/7i`2B5@.)VLg1;n-^!\EX_:!N2MruE
%Oqo/X,\cX#4rm(3ReA!b"C*T,X(a-JUg'TB-L+e(hg(tf0@6<*%PXnfZrA<m,GfD8[sCBQ[ArFa>30MhP*LpjV+T9gJc#h:7Xei%
%!l?4=%HUTljM`.:"-oZ-dJRO@OJpJtHA*U&6\EHDn"oNa69,_:(7j!fNC^BV.7h?I=qN#K_[5ElP7]ZsUiq%!!sX$%5)]\'>$Coa
%o0L6E/_?sLKU3eG?Ohdbdq"6,hJ;f]BX\I)O$pTs6mf,^E[_@ATIB<9ri'6([M8spZ4Z^#(u$PJ%TP+*j(cQrTI;qE72%[udG*4c
%69t*^5DZ'FP2e&b1&!sR.<p[,h2"a47H>(fcQTsjp>j\E0;H)^ndaLO<]9G7KmJH'4NYZ1Zl)i32_McNf?(FIl%O^6;M'6pVD_P7
%.7IbK?de8'??]$q,eu2XH2`+]Y=j1]-GP->**cAtPJKtC8AVee7OJuZU&T$j-S<K4(5+)W-9m8ZIUp+hl:^=*QH='3)]!R@$cb3D
%d'#?>.6*%:RmEgmJ4>e#Om4Zi_us*t0&cRFn\(Gum*eYgPcI0Ba*b&m4!7K[>^9/;(-6F+`m2l%[iuf%`/>(">+abh`d9)G[6ZEl
%8\a$-AO&EC(0**oC(_1^dC<`=-+b5Mm%!fl6Irb%htTCqdd0.bfp.Zk=>H6ZHY]hP+q#@("R5,*U)@tB^6Knp85.s$`[/3f-&!"H
%iDZZ'>8LTCroN#&!7^FqF>dI"la%71cFa'$<i]N)BJ$X5[*#1@V-dpL'DPJ;Sl^(qeA*Ig`T1mZY$=h8*C[Uo[Hiu]O/cL"=(+h5
%GpHh9j_bFTUs`)'Um*=T.*9Rk_Pe275u<aj%u?$JE?3laI8"VY%*oog$gsd(!\P(/=dCVui**8Wju,_lg)T+KSc)(l::BWW'm!8a
%?Cnj[Rml:U/n9q>B""HdV@UZ5N0ac,K`mk+4%rJ41<thZ.H>eBpC_P6-MO$>/tp_J2"efGiD$fs;m/=#T;e@X=RAHpOF/3k*?H:^
%9bL)c)c<hFb':)a1?,HK;Ym]3,?/bs\>F=MXO!'JW$6fCgPW^&G7(orZU'#Ya.GJtK$KHq)p/lto!B6qLlthJ`o=I:ZWa!m%FGhr
%=QEQ,20b6l-D?*lL6ho^,hke!!c'!Hr4:t@a5e$Xkob-1II\n"<!9nQf9=-S\Colu^A)aJk,O\gq5?:"daK>Ad9B[/^5P&'BTp)j
%R`koc<%\K#8[+7H0S>.O`ngHF!,@#)e(o8*YYu,L:k7+mYKYm]%$RU;Up?>VM-MQu78T98"/N*58K%4:IQtWKb/LSZGWB"N_,hTI
%rPU%25I"YST.>H\&*i0.ah>&E_,n2DIcS<Rf5r).%GFq_7t$$g*;SQ);3KnVo.j2=k&OCr'>gh2+_ZXt&OnD7@U"jd7:h3(14S4e
%Sd%'h\O*a,\*/3R)E\AQpn7.g`'ZqWGA-b@B811_J)E2?J!-hncJG:4q*,NO+Z7b2^5Vj6KVC9?24`R%PNQ0tBg:kthi0\Vm]EoS
%UO%"q>gqAc3dEjFhiG=A]+GS7ouJKT7YU.t=l,5/NX+'k8!OKX2k+JBP\;qgm-mQ$MjO28".^=4kj4a52Vs<%ESpDGn!]7sOP(H1
%^53`1l0OkYo5e,&g,H_)];AMLn1PiPR,FFYPOk11*.nRD<$gr"TTl0_CFu'#G>LmH:.bN.)"0n,.i_b($\Q6JC]aNlN9cQQ7j.Ig
%8#\#q_6:BsO<M`*+)ft6A/3bonF^<C)iL;Z$o_%AfdGW(PupeU>rF=;3g6@=I)hQo?B@[Nb6CCJL+><Ob5OMi6Y)F2RN[QaK3,^)
%](Zi-o_[Q2nrDdPd+Fsk3QC(;jVuh':UO9t3P_As#O/t=cs9;hp<41iL0m-"k8%I0*Bqm*mE271P.reJ&_:9kiQBF=,QSZS"P;N,
%b?m#[o$-;s-oi`h@mfdqR(:.uG(V8h][5N6b]$#5P$lT\_+;iN<$`Bu`Nk!1[86;[;Serj1s4]RR/3Z:NW;Gtg;(69I5I`RRHFN8
%!*eLc"=q3F\>s/sVW-3pS47.GCH@dj]4BPabX`OfFC<s.S)=Xeq4)"5MT8/GK>pnl/AX2FR(XC+#(.;.TAbZA^0=$=L2/i2<lQuo
%5?CDK1Q"9R]_aOD/QZ!t):Wj\Cae6,m<-VN,[oj<1,++h_TjIfRZR*fFhb].o<%(Mf*bJ\`3u2qNQs;Qs/<0.AC?oOdj=<4=a-46
%9D+V,7rf:oitU0lrFMK_:"JEqajVc-6.YT"S[%oh#X"K6N\><ZI(J%7c&ltA(c1*nLkf[.O6n9$d@&s^cDB?&'(<@VT'*0K4"h:a
%L:(Hn$\]s"4??HY]NW\:dI'OB)9:]f&5o4SVVPsV<g-BHB[PE'.,O/='De&=GKIGZPBAe@EqX]HJ']CPj`"Kg4Rr!,erM8(agtQW
%h'LXd;VGo1M7'jTp=c(S#;&]uRGjKUG=fFh6/m1@mc'dUKJ2`\1Y1t:N/Vt0YMBYtdc(i2*[S_o**:kM)?!4?]4BahaZA#@mW@8j
%b2)6`gaUhn?K(BZo?MKfi]Gat,`tm;cNb9B"P7`JjmEb+0B0Pflf(t1<TW4]eErK5%5/<OX(h%5M`KXA<"CFILMhun3m33UV;#:M
%mY*cI0);!9k))J#>a;oCoYt7O$I>D4hRWTco+bV%4;Btp2tlaPI"H,phtODCmTHhn4-B$aiQ0oU[4AsiC[o?O)"/"#lNGg]0"(D9
%oe3&j,#Lh"^Gii:rF_kV6:cg#h-R9Z-/WH;U:TTmF1fn'-M/t)p6'POUt9pu`NoNbZ]e&5ICaa,^+g\!QKmUXE*DOrC@.P@2pW08
%E`uc^n&94@0;mppX5'Z^j2#H/EUB8q(XH#b4"\eB?cq1Nl<`U>qXRd<m^erbiFXX=n`/tp0!su+g"`;T"2=-k=Dm!*Q6(#j1P$:+
%B?76%8\7c$g>/A0RhhKGKB0cA)cBR]qT,Gk9ACOC;r+NrG<MMWm5ku?Y=75lCO2/tRU]-:]AX']IIic;2L+[4_`OE#6N8,"/me\K
%&pSU,]OGbBgO!:kTTkO6QRVg=,V\s#]XO]o+U*$A2X^7M(#S8"Y\-lcENdL/E)#NDn1K:d&fR>ll1U6X06-`3k]cBRo.KD&]847c
%(uek_S)U!a1803^GF,gd+oMn=A)bP7A6f9*o?cs9cA6DhC6TdKi]I)K74aBHl(H'kE)#NDmk01c')GlfZlHE?AP'W>hWL]nU#8fu
%0((U0<9qes<k(_8Ec\n@=XNbo%IXpS0;RQP12(I51q_.9_aDtGMD"=3!i_'!6W"t5r2h4[@(@1RhJul%s"lbmHrh'(-Gu[Y%b9]@
%jg:`G=f!uEB80asM4Rk%>"G&<P8g](L-D<*>.D+>n&u7^K#??>98#L2TGl*`1OB])AchfkWcAmFjOnc6/ftFKY.,=inWmSE9#sU3
%Xa[:E1W))@5E,W,]XrI<P2#2(U)i,KNOtEi;qX)a`>+qLdi!:HmBNVUMXR"Z52;lVFl1+O=*3r%n7I&f#*0'bEL@RRr?2@(MnCMJ
%eN!JV]ICc@8hJ'7LS+P=9,HC$hgF[%U]0OO3kTsfO!fGOcc:(I`.$HG'u&OPN3,!WcF8HXB*r!h3(dl6`]d+0L+>=:WUq/6>#=!t
%qNg3%T1Z';=d".0T\2/KkAI6UI%<l*3L/UK`p*>F1P\j`Gf2/D)+fu,lfFQbP&6S-#o[/o32G4Wg(^(qY39+7lk3_K;65\>69t:!
%(Zfa[50PL4>VbYEQ=1r#5+"cK9XgI;WT"achoeIKb78`^6rMJZ'q#B0W*BDj&n$b.0H9&s]6h5l_'*C57l7YIJ:3jf/>M41D5!!`
%(.mXF4#5ZEZ!$,1%ZcJ5_B]Uj9kT223gU8%"rZQ#3;$5CDYc]#-%=nUneM<q#:m)T>r(b&P[U9JS+g%uA#5[6)gBlM;SF#ni=s#m
%n6g1SA4bIIl-+*8kE98?%/Yi%Q>t5Pn+;;;?Z33FX'"n).)S_O,\[!<a5hg^Q[PQpIS3oihkE*j*"Ce?GT#IF*LWFO?"08F$s-sl
%!V[RgAp-*tNP]r#!j71`nU5?2@^W\6/k=UDjBK@[GoiQd,2XB.J@Ada"Q%d8Nfl'BOU/PoOJBg^&PmX=>d?mY7;%?j3gU,!N[Pf6
%M+0GY\8PZ-+iYc(44@XBdPjetaPFWX`:cOAqcchgXiJgKPb!h@KG@rmS-3+3lUb3t!FJ;Y`c/8eLd>/U;8Hh4EfjTHb<S20GRHNc
%*NWsrcK\d9$i[ih)spJt*HDF3\V!-lZs9FG<4t;!jAH"uO"NuI%mi[doaO\UPAO_J<McF7n1"M&UR,atHOI[!IMI>?[Dq%sVu;_f
%>Np+B@OT&N-'UI1juS?<;@hae0*<1]\><SY(sX'](b6QeCsPU+au/i/BLGT:-_@b-n.DWLS?pZ4N(Y#%Ni%PEE1uXo870g#7CVHT
%Z\`9TQTZFYN_ANM8!N(,1s)6rNTRp3L\.r<"!:5I\*E6l&^[0+/WG)SM@DWHp@AT<=TXp9E;(fM>U9[umL;Y!/:l-u&dSMVN^DBD
%1+_f&CLS+aO+mloV5VW-97C1;lYcMunLQ<KHeiecYKp6u+auLB?Uu=s[pVa"/$6SrBqU12"9M52+[$?B>h35VMdH92`:&h++]Z/K
%@qZjVbUG-Re!]0Pc6_tO`U=D\Y*aMohmgTTQ5':Dn!eA?aC^kG9O/i\iqG\H_sEn<9-WiH`N_sTZSsXHrVjeDiNflX9N2I^f)J3N
%L0o8`o8:4"n@C*!\l(3%O!K?WHCfcXk>LrDWotc+.6)[8=&:",]7NX(hafQh.c!R,L0pt8F_15U?!6to>"As\=$ua&KU@1F&?E99
%5_SNB`@\CVYm="qQ;-ie?Ujtjgq%\jQO%pJ&Vd;2nIpn@/9DH7G]2@Kg#93)R7@&K#d>]6\N:I;>^J7^b[am,=c,+Q)$Wm)$bl%?
%R)2A>g.#_0?S_!$eM%\WS`qSA>__?.LL9t8EHhep98Gb0dNH&h%4up0]A-r)c(nRda-[<q]0rBq?_/`.1L/><7,DuIBSj3[ngE`d
%_s>XJDf@B#+t[SS'jc/p%FL!%;4m*D_'k\Zcp3X.HTiNh!>OtmbrTnipa5bQ"F(6e+"I%0nqDLdd36KX+tiU:[=[1,\R);m;rsUY
%e!dCW7IH`3@NY$f`Orh1i^jBGDMBZ&QO(3F[qF7I*1bVoC3Y.j1@.T!#*JPIqWWkkM^6t'Au<H<)ns-nS`#h?HX7;MDP-3bV_PY9
%:M50OK)'5dB6m>d?RacN[Vu,q'5"+31*DsPY1+:uF1.oMO92!Pi%eWSD0ZoPRV/<:%S^gC6GCFchC1NZQ6qL1.XW+R<(c[UC?K:l
%1L/C3T:pZd]6U#!_H@eW5E90iOl!XE5)*=)2)RRLO(0dS@gJ.Rj-XZbO7FOj8EZfKMgG3mK-iPp3f/ZHHffQNZ:Sf`I:j6XFC*@_
%iBQ$!Hal5]\/7Ghpb7iE7Q>\b,PWtT5dH]%Z(D#U%qG=ihEma,4+87JraSW>M?/VimO*4tGEWt]-!o*4T>VVMl24YI],SYBRs7T7
%O$QM.%+f"?P;pC60sB&NNpc[fm/++`Xqn"*0d;2[j4rRdj,1tfs3[^P$+>3uJ\q'o2?B<h_hTCn!'X)7_T+Bh!'VrTKo^=NqVQSj
%"")UJfR1jSBrN&sb0+R%r@L*+p`7Hrc)J\f)G@RTce&'A'+!S"(`_dsVEB7N"5e(_E2c6A+A3VK+TXEA+d$p,81(u:f8(*j'L.!2
%iiO&!#,3$c4j`uX>toG^fGPL^Fln-(3>@<))gG()RL%+^M[Zno$tj^?oV\4#gSGBq.Jec\hZr)@kN;#i))'DE,`T%N)fu-uTft8:
%S1"!@c&@D]a*_kc1'P3)oZ*1'K,.SnGR!Am_1^#HYh_Xe4ccO][:Q'^"hF=PO(_":Obt#D*=XGN''kNhLo9c&B]0ab>%iD1aT:>!
%;l)Y=-_,Y*0X70\mt!48Oq9eT.pgoPmqGT,&hej#:4!V9c:DgR=q.ud@")9M"Io*=;5%jGUdM`Hck6R;*]Pg$$k_#XV8\h8/0AD[
%TH9X6@pK](kB<]Kp5RKSOr#6NJRga][jl[o$UR:?>;IU&T2XJXF>W%\NqJI`]/29'Ept1a*;JN?OPn\@nY+Un%X@HfdO*=-M?L]]
%Km!Y=PTo(26f94)lN8M8#Y>MGMo6M<]VEa`6T^[:D,X!'68>IJ7ETn:H0tJO.2]^'fDZ!BGBCm#8(LNgF%$kpAV0:4XUefIgH2FI
%#Z]#&L2C=C!Ec;*JI<Zd>ha[m,Z.B)$"JL-8OZ4I3.f$b'J<:_D:MB^Uf)LuSV_R:FeTfs3\-j2#4!Oi784Bk/80DKEG1dV<HOOh
%c4&<HT(>XR51NjD>jcGfL)#KhSQjJaRR:7-cJ(j.h,bKsmC"i?om!I\!<2a`n/X`SI=F.t9hu+Zhgi8La^+GmjJ%;KBCjqRiXFF\
%I]UZINFB^6EqM8OW@)nEX1kTJ4@Spfod%iP*C#U5J$-o$'s\tC4^X9]OS"5o?PG]tI3g\#J$bUqOWRFB#-bpYrhr2[CRA9I_[#%&
%j:"ZB&UYF7#mL7[YAoP_r&j]P8!r"(V_opGG!EAb^73hUm4GJTUUE0FLGb>=BkkZhCcnbgdHNWE'7:Y#R_fq+$s6<a"<[Gbm/7GR
%Z"t`BejtmDUlLb(KdgR%P-Q7n$(^kuap\_*M\[_p5r-CJ!=U@_9fi($4RNZVY3/4%1m!Di)<FSJ5-U%\$WIF*P>-,ddeGP2KOb)8
%OfSV>4t(gEYTg[gm=Z#E)-K'KB<mI&OhXaC,ucWu6I"=/p!L5P7(DoarOE7k'^_*dPG;4q"F@"g%!p^:!\D^HS1l9Z>#LMlc(V@A
%`NVnr/D5\g]_PG-5Xu$Ta:Hp;:k>#9"s.Mr.Q1a1V/L6Wgp!>#&kEQN@.fF]C!!;0q;HGF:&h8)MH*i#h7eG/q4ZccGMgW16@/#$
%K5=$YAE*[]8SoCkC,^tQA(lOmo1q.#onC8r->Fl],E@dd-e<c9l,C0lV9u!mAmfB[=IMhjDj>f3*Q_o,4X"d2oF^0&A+9a==sJcH
%+QhFEI#`MJMA^-pa<jD(3H'&)`pa9Wm/TMK@$$`lS)"]4bucZ_K-#m4@Pc":;,/=$@7LR"S5AWI*mMTYp9m)Rp?h1dC:\lqIB3S3
%e^_lh;>58(njPg/9=`YCY+Qd1;#MTrcgnG-P8P%-j2(^I,"5@Gb@"jE&Mr)d5QVC?Ke`-OBLc1f=@]3m(+VSK0AsAu1@BhQ5lpOe
%J;3FFVkt(ochd:HU\9fQ;7<$t.I\r41GW)Fj##"%7iq%C.uC>]'@F\.6FoC)Ojg\dcK4^02h^62bSc1_iW0;5>t-hq<RLHsO`J^$
%p@I@dhEL2Jj.doI4P=Dl]q^#0.HDV\aI&59Act.d-iptMK\+e!ZIrsFdTXE9FuMn1J5<Pe*9tZ>l)tY^bTdAWfrleZiUf4g%h\+O
%-fIu,:5js*+%dbDB5VrRmFXoh<QLhZ&uV>&b#m^P#hF*S9nO"FMZ)N[GpMruP.VK-@=.@ZaX4&Q^`d]gfd9"qm$3f-[,RrbG-(rO
%B?2D]lV5ha=VgmT<%&='Ajc=)(rnBj+BaJeFquM`'@*\0jIj&9J](hUor*pL591d`#Ed1W]JW.u(8t:&g^&cu&6F"Ij#AX\a+8&Y
%1QBoceH]8t[%,m]WB(H5m:@!dcj9807^;JLcD9/`JK7mX;M./0_bnWCV:6o4(kogqWSq?/,J,B^-ZdZtTc@fGAaP]Z.DDgK,Rl+_
%g6e1+eQSJ'H2)iVcrlB'O;a:!DGAJQN$=2c9!n22I>iW*;_<Y)hMIl3>:_$e4:J>1\6Xe$9e">lS;ALhZE3-gVkr9o`$tB9YkeM[
%qV&U*)Q,`%]1X)]QjTHSg\:T2(&j!.,b"a'Riq*keeAXj')V3''<$qRCHXM&6N;_@UdgI>Qk!q$qHE=u/`Zb(mar`s[3VOGJZkXB
%1/YiFC^4';1h-i9RFIEg.-\-G_oi%$T&_0]P;aECW$Xg$W6j$gkXftc'#-\_VJ(D)5BoC;"1/r%BTa\Fhi^5Ke_f#$MYiBj/\GK;
%HLd[)Lg&h!2+n@3roB207V6\ur7(ps__[Eoo2?q0!Z"Y!oYRPlSr5W&rA`.qB9mi#X[.PrPh.qdEq9Dh[5)mmU(qaF=<&o9mCAE4
%HT'1Db0+3&R6&@^'Mrh<;-6=^$=!cHX=)+7`U#Ja'6kaA"XcLSF'u:MS5#X<HXO,`8UVmPmG?>j*e']]g=&t6l32"K[iM/e'N-pB
%E7\Dg*lO'?[>:7WZr>q-8Zq6tI2kdLG52f:>f#IoqVHheQfS!j-.`[;V("r>Cm1[2o46HGOA^q$et-QF*@<AAHC/U0qrV9!.r\32
%UXCeQ4Zq2f7$h,6`U@cs>CH3>DbZWf,4"X+G]23=*e%*>E4@o4:XFO)h`oS$Rkc*W2g;*j"G=kB0_Ae3JYhe2cE?;^;N9BNdHsUI
%771Fh4aPq8CV<Q_M-g[]pgOM37#OTDXH0i(>S:&MTKIX;E58;<LXZ*BJ.\;'0K)$;QhY^siU?#03p;HSUm3L?)B_9lAT@+t$1,c]
%Q'=El@FillpMidk#a/9GeP7BC@"goGAm<@%!$;FuN'!g+iN1RWhT(&r1!S*aI2(;B7LNAE1im(ir:9pu/+S%'cYg/Uh5QD$%PJ&+
%gu[`ibBJOf&slem*!TEFLnOc)?`Y"G)Q"G@btoHQr2-HNG,ZdcC'bNHKc/4nMH2KYgcYNGT2e)%nKQ@t*F8r;V:7!h#MF5b22OtL
%4bN+Da>3a/jpNWJSW'H&>uNN+0jh)mp.mKCE3ip:-W'X9#n\M:LBg:BC;,2-mB]8bf5u*YQJ/-97*Np'H#s+',!RdPN)]ctjH!u/
%"J$O<\QYrJ?Gjqd-a&.OYuHV%"P,u4*4@Y,4rH4<lg?=?AS"P\G7H%N,Vm6t3b'CR$=;o:o:@2r+5iUcP<;A;)6"dGHTcG+:a![E
%3_5i_ORS17l*\c?3_,cXoHX()Q,LX)K2$\qf?h(0>7$gOlM$XHHPW.i:U*)X8VbokjaKck;BJcCQ_\tcUdG=*[seL#,)@AKEe`11
%*Rq5$[N+sAG/ESc<?s35oc-RBXprUQH@6-=30)Mc7$k/;'0fB=nT,7I:J4E9jIi-3XcHl_(ut]P;E&o^!R2sQ;;^4q2g?5!dXo6#
%J]9^M86gc73V)WYB^quMkZki%j6s[C.;YDZ(G\e7dH\ur3n&]<MP*%p7dR#EGl/0Jib3rLMfU*uJMiQ_H9HoQ657HsbP<(n?G=up
%Nool9[7s<3.jI17qqQnWPI*/^at<I(4Mk;7?f*Me7L/8KUKihH;SbEkJ=e]R#C33k9/557KU/?)_^DgXmr?fRn/)_eIO+\<<-^9b
%/"S,TWo7M-eMW0a4/9Lei;4`]m`\[?i@J^J(-+qfStufr41ktUc.O\&.*D'LA--Njh`&=$mM[NX0a`D,a#>1UGh;KO#lNXm9_,)#
%kD_"`m-jSO,3rQp+";O,3?3TGdbfJ_,s,].><)`1jO&a0"K;l%*JdDINQ<EZStglDni,],<.h*&E\hpO+%V:H9_c\M][&lk4\:8r
%^=R'Eg09\Go#(QHKk-^`3D&;A/>51riR>p1:I+a]I`n9Fnuc!)LXcQ+,[j]:gV`um#V]QnjHb<.bE&9QS9<o+MUrqV+uH.2=Uq7l
%Kq0g2Q@k7rGf>qPcLTu/(f!H[p[ALVjjA8peHFs8MCkjN`QZ"]YSF,Im#A9kiZiYZ)Fb4c/;Y;QNO)#W23I!j[e'ba430+[/]9.W
%^W)*jcA\#[[!?050X6?VTh1A[.b0fK%?4Ot\nefS?HsLSY%[)+M9Bnj'BE;rog$/$'dRYQG6QqOP+C`go(%FjD:C$qA;-l=4MWR3
%*akn%9OLTU3iS_tPU"+Bog1L$FGhPLGA$\,8r\8ma7Ri4T++Prl.sKd3N./]Le\`;cPdPebO@:()*_qU1_c&YXGC,ulT&iCnZ4Ws
%U60,.WF^Qt,asc/HIl_?4>E?N`TcL,>EN7:bi$nfEdLA97&]KU0^4qL96O*`8i0aMUY=4/Kk_Ms4m2_DDPT^Sl$m-B\/+V\YfRIN
%jH5i_8K+g)X-.6Xm,:_:fW%<`7qje&0q0F(e^SSMi:CH<g*d0UE_?2\Ao]gU4RGGW.pR#"R"RL<rSBC^Xs1uR42=T4PqM7,O0+SE
%QW":+;/hBO?J(D'GOEcE@8n;Qk.lOC]="Yf:a6SnaRtLD91A>PMet:irB'uNE_`EmV_K)+*[QjkMuGtsQ;n@%>m^`\o%fKoUYT+m
%.jS'L,HXF.X6eL9J3#iVrD`BIlsH)*:#>rOcC?`E3YOKnCji*8a?45.@G)d8VJC1GT$/CF_S4P6g<1#@!4+:jTnVaQ[!!`e"Q?<1
%aH^eMN4AEgr?"q\MK:$$p'sZl*IIi^XR6QB_k]YjT,RY&Z*fZ.AL*1M6?__5]1Ln'(@C-R[2nXW;u"cP)2h`.;E_p\W`PoH)IGrr
%=.5X/=WB;i)6W4/9&Ob=JOVE*IZd<2.<GjSaLjS\;K:rYl$]!4l]>n*G$4?9[(sBA@F#o$BO#H:;Dc+Hp`S<<ZKd\R-,Z<KL;dmk
%dJPH7$gl-NfDUe>l12_T1#NMEL[nZam=/:N)&,7[k%2F?C"Gc,E=Tfs"Z![U;(qTU7Ac1[Df!br<gn)I+H8MBd3%:Aqtl+^&MYQG
%jodBWn<I<Y3GC*oYR4]+37j+jn%D@EPo6aG>f-=tZ<]ImVk9un[K3A?m_(EU(:=u4L%@kC-OP(K[iaDp6OKV^TdYb%Lf3"%_[^mh
%d,Ec46]$mSj_f'Fm>rRo,t!KH;P9t@-n1%r'=k32g[]>P733lf[ZT*JmfQM@n3eb3O/V)2s+O'1[`:&>jG#k"+=Nm>MO41hlJl_p
%)qd#28GST*//NbVU&C1SU<X9/WqC[OjG:dRFXq'b`/^cN'<B[9f;O:ck_L^;psd\5XS@TQOp^O"j6%AOf"/C(g"UPn?qI-$](HfU
%cO1qON?:>a,MHh&%DQm0fUJ/;?5]SKKB+*%E3NTW&uDCpjQ3'fqM=_beH*=@)M8P-radP*g/4Y^Xl=gCEXM$T@^7qWN`h-r3WW"o
%SKuVTLeAhY>qrPcSnH*YhEFs"kS2?tr3_ER@D@)%<=r)ob@RXt$$Re3;7Y_LUP:=?Kpq4Ho.rF,TOo0TiM?6,WYV#^XPcY*MK3ZC
%Zmm?/d0V5uCID5i)3n#.\2?fmdVt7NEuY??i^fi+_uj+4Do+DW58i%!n`sb^`g&Sq\Y.r7'IZ:BPoQVsD4ugU0af:j+nUuNH5^Wp
%%?Dpp/D6n6&X<!7$:nd`CT'3j(`SKmA`>I8rO13?hq3ll!#lmM@jg0k=60rK<3!I;M)hP+oFj;WC#XAb>cUW4iS7jW>/;2S>c0BG
%H](>2?q/7Xp[E+V/I4fpE(,+!6lIK2Z$7d:!a:KtiNRgh`fQbW<uF1pQn3=4<*;R6F.r3rqOpKDDt+qM,o!VZX:p(?XnV%['G^`k
%gS1SDQO<!+%!$po0/t6ZXV*-lPsS*Q2Q8+mrN=C7&=?EPMZpRH*Z8U3CQN=S*H4LnPQrF<#E<9$mm>[6ElAl(M,NpQ_0'=AP8%d6
%>i:ZTcrY2mUU1Gh7R5DT4+S5@BHq^L,LRNQOMQ<JV;.(4<!&!9*C"-J&Om_:(nZIJTV!NE%^iR)NUj?>_WR;K:hZUYfpZF\>(fDh
%3SCjJoF3`YQDZ5%-*h;+222nO.]Z09GQrLl8+*TDho>U"2N$uOGUY9q[nsK$`d[2o!"6$,;&D!@"!208lZ@spESKWblV_rGp"PRo
%(n(DogFR[#l:ZP<*-Y;m)_ecqM7bMS94t(L*5NKrflQI-$>2Nk\"(.COXGVU)h1MM:#Z4g"'Sm^ekh"$Z4IAcTT0f]&`B%QXIqus
%bp&dC[SRlSnBV4u?>EneJ7Aj_4-*cQm&b4KX^9_k<k]%1mZ!FlTuNqFeWH-"U@^NJTMWFfX`ZXMmk?@"`fOr1i;)r_AC;j,:TZ3I
%SLe$0BhF7V$-N1=RQZ/UP+,r-8XVA<--59gg50C&eR'_D[BSG*)etIqS]EXCC2aJbi"C<I"mJ_=<JUQ#Dn7E2+M/H0;9PoiIk!(X
%b!67$oJQ<pNtN;OGV5^F72uc6Y%/g/'q7-K!Em]Lb%'#pcQGGhXEPJ!r'<8_-[kuup"AV*^LoYq$qe)tgrM@LJ5-VaV[2`bq_Nm0
%+/lAUf_8-YaGVBJOn4APKC[!P7X`Z6kElQrT?_3q"Bc*8qU3YDPS[lNU>QOIMY@fB>8nDeC%:>*3Ht#[+N(p2gGd($ULPc,B]<(c
%,$^6?SrT3DmPAUP(:h``=OYjDB!X(J]7[e8QF+6f`ti_h4dpBNrMs(.el4a9jXl.Qn)e=GJX6u2b3rXH=]8-9=[^C@a%ED@*cYWq
%;K<@`8:oXH:_M'(TK62Q0Sg&$E&`.A.<j($2"S7k$?SVp;84&R)SjoUVQ4Z!$qhsRX)e4P4<AJ&GpXt0IAZZ`2Wi001G7Qf-lO$`
%(qC>NV7b=?NAi][]6Vk5jVV\!6B.nu$J7*U'(c/9,.(gZDsB1%>;I2g7KjYS>n\e<G2/h`Z,(,kX)-I5nQFIl]Db<'8n[(Q-'JO%
%X&4g7?mDtH2H2_5%$r>qkEaU$l@"*Ufl+XD1%I81,-C%3^3$OWSGE,qIm2F@O%-FSI_g^HBqr)AjtsKjIVJ;WK=bEnm&8.tNQgM-
%I?&nOLn:'G0Aj2g\)R?\5mZ@rY$<AOjWiHr/m%HqFs-ZE$U/hd^0Fm9J4Lt1M"sr#CLraRXf7C&?:Gd`;F,op"tDE6OgtVI-,:Q<
%?kJ[,msJae&49kjo%<,g?_=.lEmDHWAZ#pn.sTO#Ihsk7koA4JZGYW-W(s@6CH=7VdCCOT-,CXf?j0CE`BTs.9;Mt\hL'ZM[/:n4
%=R]i<47V0?6n?qA=5p`80$\0Yg#4BsSs@IlRa)=CF=n/KM6P#gQo,ZJU?<h4%r)sYG:jL$)2^,/]!'dZ/dnJ_n.O:3EPX'lQWALe
%iA'..I%STBc4!cr/eN8`YfB2"E?8gH*`!rWSl-e[<Od(PIYKW%I#hIb&Q.Lu]qaP<h&cVADISN8N0P-_=<dmDjH2(ZqcTNB`(Krc
%Er-d1bs]*f#$cfJO.^?Ti.to_O-Mbp6pN)/DkU#T1eM)H=NdgGU$Uu^0"/T@i4V<Op/Z2P+_PP1U/q,HI]TcU:*Qsubo:pGc<hNa
%9c\4K;R9ir.EF@c?m@Q,c57ku4*&an$)!G(%6cf!7iLr\Ko!aJnUuV!8p.aR&2MU?F=c,Z(02qs<X'VnkX%9b&`F"9;*6NEJRA)c
%6\KmL,7amJC=`OuED,,>g_:82>+MuaiSgA,_Sa.ektgT^c[Pl_]>+7-:R5A8ErP0=i]m@Ehu/$"l9E#Ydhc@Ji)eh6j1!o#K\J6W
%O'Eq+#9!mHYN*SC!A=E@:OhrApYUEiRq2>4HHQ6T^Fas4RpSDXih:cm47&<KZ0!.l>J^pJ$ifn3J,eb/rke\N*r\5RkieO\1_Km;
%LO`#W\7ZF@$Xt7G'E@,):4TCWC(S*lO@9SSja[!Y02peE\qaX@)<:^ZY$[!RL]9trqYpiupBPITrnG?jrVr7?huAr?n[F>N7Bj"`
%;[%I)X-I@&O%;j&+2MGH+!a!N_h6`di[S%!7OIlMF1GHX&(K3&j8T"K<aME2+.4WCAMODCD'JC`N>"[C"AfL+kjU@C#pR)S]T"*:
%3(-=E0u/#I0>W5]+]0>4j/jY"U$n)1ZT$"B)K?!,&&2m#<(&'P,%9DljD*;_F'&s%5!a\k,>Sp_2G7/<RO$AumnYsQDJgju;%(<@
%,\2e$(4AMpBlE*_9sd"g'[=n:3;S[o-7`1F:kCVa)DZf*!q:lK[/3pSq[kadqT%^*/[Qct5HM.^/JJN%'5Z+d1;L+gept&k`]:%j
%FB0W3<pD8=89ej9"-/:/(QG;&kZI+iCb(>KXD,<K?BYASWW.RB)Aj\Z->?g#d1eFM$uefRkqY]MCd]VS-IUT71**=,NIVR?DVFt;
%Rm=g5!2g7V9,ic0"P,tI"2fs]8]"5JMfsQE<*670>t3=O41CR6"dMjD3=A`F=G`;2g((($J.\g5:&qqT8Wm)!6]poN7-7:()6=Gt
%+$6AJ%-`@i-R$99^<#jU2Cf@2;#nB8TqB+ckmM4IQ;?=mkW\6hF.'Bu%L?+6KskmoNg^4;jW12c"%!Oq3IgDLl^7*rA$:ojpkRZK
%\I!\48G[oL/Wnp0OU6DYEXZUEG'$-JJuON8>JZ.k&`;:ZcKA.$PoUo:*F;/V?TS[N,8T2,jqu+3?k9`H]I<iNUV$[QR+<jm1(l"B
%Who'6LUA>C7Q7<&SFo9G:S>DPRr4FIl,e`7CrFh.CRAq.-lJn:*[,Z>Cm%lIhS)0hno`11Y^\U2LaY]@LnKI]"sRi%#nk,\Kg%?@
%'#[2J;d:='*&7lqAlg]G8Ea'jbTo$[FQ<ZQ&8<RabnEM_2N!WE?,u)6a.*8fYs"6rMg.fnin+?-!*S;I_oi>G3JE[iWG%fsMF?WW
%n>Q5l(AP2K@5r#uY8Y'40O?H?-5;G\<0;D7bV!#KHQ+ZsI@dQfqa/2F7qO%tSt^4bSfAAo?iJQgI1ZhCU[5t36:oJahLHe)JR@(B
%iQSF7nC5#r._#+Z9W^m?_VJV\To#L_Nh3?;BKc<0fe)K&;h)T](8O9Z%&q_5.%I'9Ce<Y%,$A/tq-j'Khd1\HW8aa&0nI[3LUFVT
%ls>($TJug>8pi$hEE1CG7pd(9,<mR+]k'rC3dU.$BF9LKg.7)p;Wh]t7-D[:(+bKBBG//#G;qL!kh7.M<&nfV^!O(e6bPG5jq8WK
%+eQqd-`nLCmNVWW2IDEQ0a^g3eTUEb]OC3rpe0rIcl?BPMdQ1Z(U%<UPrfGHb%N*X`5DQ"]NEQMUF]W?pnIL(\Ke1iXQiRIc[kV.
%`7Q-oZMGG?GWC'r>8%s8F&\?JSCdcI"ut;JP/n7hCN=0;`cKKI]F;#VBgcohHhfLN'd'k2-a7LZA\?C-,2(U(/;('c__T"pc]\NW
%$GZL(EDtfWXpWh^@.J?0.ccR+cpa]YQ<Q&fS$u9T7l>u:)C$-k\\7%OK8^[3bJP_eGSndsA-0MtJX18UP5PMtrQ19?=)gRlYb^5h
%KM*Ht]"o>FF&\9HTc52t?m&%FOd2g>2!A2N4*VWNe3-opN/bm]ejNhXTZHIt9s9@PUXX]7>7jJPeF9br&Q$n`9k4<D6saQ"Ue2q)
%$'8g%Efd=+'GiCH6.!ti7,_!]W$X6M2]=>*9TE#lc"dJWc3A:.A_Msb&(TTLKLt[a#&>Cr=:ohPJ^W+`g%tmB[oh%mE?a&2iFN6=
%.A=P7`$r2.Ge%$T)sJWGh1O8>,8(NpUuT8q$2[Qo1?,G\kE7)ef5tW7VR,.+"ZVWJ4'4)JrJ4G8m<9RX7bh#).W=]&3\t$iGm3=2
%3tc&^S/3kg$sl>3kT9C*nPEHKbD;31g$$Y!9kS$#"AA+KO@8C$7ss*AfC3@iLF&YXb]$;>26\,*-F5K>28sT,QXoaXcI(pW:?0NR
%%kLS"B"4_EZ/2/s7d\:tC2Z>p0"Lq`j3*7>94FYP__n":^j;g<#g([]lh/U^l\D1gIbf9OUdoYV2Wj!eM64_\Sa'_[5R0"MZ*Mhm
%L?i_,-;<@HAYYTW?8e<9X8PdH)hmnSB[*?o$!bmu*qjRtO^Hk1-hng)LSNcI+6[D628ODoLHThg^U>GLd)IVFU[X.1PdOmbb8ILX
%e+b]X\A'u%-%o3=B"4_E/t7Y@Q+\2+9D8'VUU:'(iQI&Slpum*FuDB;>gms5XH1k,bP?\HJoo6D6>Hu.2Qu(NJ4#up>=2VO)jM;D
%a_Zq!:aU&`RGl`:M2#_/lhE6pJP4A`Al^Z#=AsJS>YiQ[:9$6l4djjD3NufJ"+M&V)1Ka&A6(qV_"bhVQJZDr.t$9ZU,0\o)sc%;
%7/1?!-L;NG$BGQY-KIrbY3U.2'004`aePM*DgGX=/&#6U1"-u#bPDq'1gU:)eRBLXXqp]GEkMbnF7ktcLJN2uQK#]%[A4&)lRed^
%X&npRr9Dp0\rnY8d;@5TEHlbE#CID/q#>q]q$7_+)1JTDiQs0Y*Nb798!DZqZnA4pOs@HigJN')phS>k;@X?0\mrDp\n:mpFNrg)
%c3upK]q1[Dp";kAn=K:l5-T:!qK)SbZ//WZSb9S;+82a^=@F1#X40FBG'%?+U3!d.f-t4\>@].#^Dh@DL?$NRDb&9EiJPp]?p1MM
%Gq#;e=[*=C=@F/mYZT;@iFf56VFImU,9(e&h6;eq>dIP]RGk?.okYH!E"k9H_[cf]__]F;Ums@?>3O3"F+L(hd_Y?h^H:*(XW:k^
%md2D`1]4We*+`0S?/BkLL7r9CQWlZK_^;=VETSQOVebHF)Q%MinPXAq$_*h/NRtsd,m+C<leuQDCOBWpVK.]gZ!:(]B"9rm#*oep
%b1qQj3Vp<hXrM?^bI&H12sc9;bgf\<d5.)(TqGPkS9La4deLu?J]^"L\leq6>k#@"J%DY/9GdV%i,+'VK&861s&4Wp;r-p&`]'D:
%jAC:=;Q$gLk-c;S\-Y@GJIdq%__c%S'O7+MSD_"jo27NS_'W\oQIf+.]p"f[f$h^7O&"`YL^+XB-rQU>e!]0`cF-T3j/UM--m%:"
%&(\-T7N9).E7Adhm:\O:>g[g31.ng+?WFReYJ(pNOW3e$`-3cc=?jVZSW3<@eCiSB1%ai,XC(K<lc1<Fkfe!7k;BIb?)uh["7&,/
%;Xo0GrIth6<chsK3U?51Wjea*O!tS;GDc&3+'>W.bj\]RHE>8&S32bQ\:WJYRh"o*:!ETKg2eW9AVM]jB@7"YMl(T)j&+g3.X2ii
%R,Kl=N@684>`j;K9Li+tn&o%eXS>Q?N!rS=4bjc;1I6WuO/]Ukg"u71594Jj-o)H<;0`Ue=(5QJq^,'-[OYVQ=-K&fVek7D^qb+>
%9Eqq@>k;$ZRD?"bm:nd.#>k(:m:FM!mt=B7a;bqUl[".u3bM=p[:;OA?`iW/hlle>j\c"`SkO)tkI%QY_W)HL?I5eK:=/?0U0'Oo
%'qI-XKCYD;\$&rlnRXp2H:]MG1L/=Q%BNXj?tB3_<(>Fh>dIP]RGk'FhZUg3H6lSren]Y@Z(a%l?Q&0D7J'S7HB9]pWssE^=5fYL
%c..-U*EO1U%i/_AZ=FtC-<F.R`*I3cX^mo/W.r:ep-XYRVd%ae8Hnh]hbD*F30P>F"NktDX0Ge'/fq492LHLB_MP'YMu\FeFBE<&
%*X4)2%ho7DQ?Q9nVd&$m9a)"/4W2<kE1`p\qcKkh^B%?87XQ*DOhV6In:8#"]^3?>>N>eC:jDgiH+4b=plH@]43o9'In"$Wc]c87
%.JWkCI.*HBen\5+F\%0?J-4t1LA7\Pj@>N(k*?[q_@!^+6LN]kP&G5n00;:Z3:a+"[aCN%MTuTh2KD),IMich?(['Z]Gg9$Hl;Gc
%;.lq"bA;94\>JlgF,Qh7`ETsHgD/VjD6"\^T>Co9WP&.2Z.o%_GW41ghi/A[Yr*po6[g$,FC&]&8+]7p)0<NcFDQk%j1=Ur??S#:
%D_%ogbj^V9bE!AZ*a`4,NHKr!A$)]Ch-i1<$*MC_e14M>&(ffQQ$c2c6T]Z5nNdX63]$[KaJZthQ`s<"MA&dZKSA]&4Q'tf%Wl=X
%Mm$X@Rpd><;%3n9O&iGd4fShf\lNkBaMcV605AJ/phhAkAP';=?a18Lds2+<>Ob%W't`(=g[Sj9j0<@>24YW!d<YQ8ik5gLVV7#Q
%`Kr_/,kofoV_c4L3\RZm%P(]HL;QX7\tiZ;=uVu0Y@&[Bo2)W$FkZ,7XC8MC#:_P-`RhB[c*35;5n2">_eQRh<+bngX8'_bMnH_V
%5U$PjHKX>CKb[nuQpVm0Io`4K.84\Tk2c2%%Mb61b5V(NMD$4"Odg,BgI$[9=AsKZGD=i+8=4=9Iso#PL_\ghN`>Z"?mR$E\>Jlg
%q^Eb*%I.Mcqe:bN*?8s7Kf,,5^6*[E@mp`',WXV=[DTV]3b08uYbEnj'q(C\FC\4h61u;RL/oA$4--1@P)";$QQ6QcDT=W*)6W29
%ctMsNhHMX9I,Z`nG2goDnF$io7[tQXQ<rlkUGKeFSX1739XN5W3fFguI"s@"5)sBQ1W*S9B[o_u2ViuLUYSu;MD'>3h.jt83\u/Y
%oC=CLLSFI8lrWb8moD4,!U@eJoST3tRa0*[jDhQ]MB,3f<qn?u[:1NY.i>B=OgH^4pFFqE?`\6e^QJh,Xk83M%"If4m#i`e:9FTi
%gq!W',JK-30SbP2%"A_-)c6&K*sV%&lP\YmJB&h86mhD=)!JELE:?q6c0cA;MXM<8'Ss!QMTuW3FC'D.j!`u0A[dIsI(tJs=d./?
%FCr%WoAY[Q*:1+;LTtad0Vj]L"MSZE5CT^Z7%\$Dq+?dC,KW9\RI%7f#(.<Y(_G3EC3:Z.+CE+*@uZEHfQ#ub0nQ/sMe!s]mDd54
%0FkU1GHFMI$YmVfIZZeHq\qMr^^p2qi\<bk#]]5bV\M\9_MtYb?CcPA%m/X#_98Y1O.,>58]cW1f1+!/4]dc6oYY0+9Jhu7&11No
%>AR4W;%/MXGt'-Ko?+*"MHl70XZR!jdchlgW-=6_-iMFkGd^R84LS2j*aV8!Dij_FdZ3d9%P]/cFY!7,BeG$CEFYrXe2G%P`kY*/
%mq]5[P4WGli_[FF"jnPfqDCsW/")E]juoF,]`ahO0b\4m6s&[K1?,e_N\(dOVDH+ISTP92%+*FcG#1D7D85jMC;9*01?&VPH>R;i
%1W))@f>.5j*:gsj(8iFgP<EYi1`a3Eb6Z:fr+^,O<+`WaZY^_d/-;&6C5nG5C>,j0]SnPS]33!Wfam8U,4c_?Y1G+;9]_N4l[?`r
%lQ%9R?0oW#7V@Hk3bRb!\^84I^09,cl`(:>_`G!g-os.hd<Q2&f..Tp;7<GkH=_;J\)P6`<,13llkutjS1T#jVQT<e`SL(_U*nBt
%\"i33E(/qiYTALE*@I^:GeYP^=fPAqWe8J#NnVfK@>:sR2AIaS>A5Z[-4,GW1pqbh.aTVXV]`.WT&Je]jGsjX_)GYrd[gobAQMHC
%-um%:<uWSg!Hj1D.KtN<_L0V_^SA.R;#>X5L[6+;FGZ^]%XuZ,a@L9gn?GLJA#V97WG5,9YOT$$Rd)r0Zgkfbl"^1SOTiZ[?-Q@^
%YY?M23"7r?9p!H$kG2E5B]MrZ8_=sFV$"O:>PZXX#4hP*Ob0LKa,[r!kY>02",@T)G#jf4#Be%;G;"D0k7!3Lic;fMLd_ZCe#s?^
%SM\!<YU0+ti.9#Z=(GXY+?(R?9Zj&3c/)D[I19(XmdOf+iR(HKM125`b]$;>L$n,=U##*0gl7V=<9G.hA]48?1n>N`ntX_c/bakG
%j#UN*AI#"0E@XgJ:mp8]R?q:$GSIGf_RZ)*H<"%PE.d4F*EMD-D^8Y<iO7_0[FtC7/7UPr@9H@p(ET/baWT;CDf,#5,p4I*k,%+]
%%`b,[a#0D*Y3<MtZ'Cd/$=#;XiDCY5oqG51Hl6p!P`]]6mCUf7iL8%bNAd!_T1hD,(4Mkr^5VhHWf>:4^MgJD]&-Sij0/N8e=&<!
%Vp^aA#eZ,c?q1XJr]..&XBMIBUpRO1%&k8LEGaDdpgDl*MaC:/iJPipYVl\51(sDnFpd1,UU1^m%:;RE[P==]Fmk9\iL8'3pQU%$
%nB?ae>5NrY^Yq7e5>'_/hN"<d__mud`qm*dSb9\Kni2jC-c7+\VCQCB1L/=)XA<VckWWQ>erNb/E;8F=4.=G'=*.aPlX>cudjrZ)
%fL-2*,mETK]^0$2laMb5"-jb<OkKNTok82LP--Z[&b=V)-1J3m&Ne>Yd8X`Q7cm])4V3Z`Z?oGYNUN\]##V.88+JIdL+>;@r(PUB
%PC#<K;:H^b4K`u$2Gp5g8(Pi:NhS>ImhRe\$"j"A%5lll&Z/KVX[_."2<'K69)QnP>Ye8LRsja6iH]\s#8=)M-8$]l>@[])(?beN
%oLWbVo)@c+>k]=?E]]h5*7r+][n;"qccjLu8;Hb"m%kL^?_+N9m!MsLaWN<Ub,io9/"Yc3O%]O1'2FSE^5m<PKkb3YQu3FTg"MY$
%K1rn0`V$6rWl)7Li`1s9$C9SqMu9h=)f97ff)(-,?E2gQ]g<o6EL!6=9TiDE.qEA"c%VIRZ&d16J[>jai\Xfqc6AX#`V,5@N(<!a
%i(UnQ`N;Yjd@iM&7#KF]B^M[G%iW-&bralbUU9()LiY#eeK_KLRGjU[3_qU^q`3-\\9<%A@VbjHa-RCYc/.S-9$6?]a#0Dh^j7bk
%@6a::_Ne@4XY`b'Hn[QoHl6qZ03R%'01BN.CH=!3$a*i`43\k`;buSkn%[>#$AIO98T.,JRGj%K9>C@#?3hg5n0tu_QXe"$4\dN>
%irbhi^<q4O01VmjR%!X'bH^%g01R4['j>:oi6@YIRa0*'3QBHahMcH]b53oP8pN3>pjJq9dGKq_9obmoIX/&L`JX,;#dT3X9BnfF
%9Q3_h9Sd6-T_dcX()AF7(Et`<HI*cc-FfrE$KUr#jItdZ:Qqc=aH#_L:<;Z:6f&oI1L/Bh4$"NlH^`=?M!Xp9kVV^>=uuhW)6W29
%\,i=o?e02=PCm5goLp[.?Vd`kA.=i<O6Z_!.l%5p4ad_[N>V&m43&)(QP:O;Y]=uagl@S-.KZq;;X/ZNE8%oFC:meeUUkF^0mJVL
%:k-aeI)F(+j\p,kC,;t?UrLhgkTEfs24"AGU/<![g(V<7OfSV>4t(gGYG/T;m">c8oM/?bm`=$G=+j5B;.eiG:*\)`+k<=j>U<s2
%!(SqaGU2ep4Sl"tdLb]KNsud]dB9pWN$"fE@3>;;<e2Kb2LOhp,.e<OKF]/a'_kH9`[-^8lD(.E-gh]bKdg-okA9?;TTEs:a^\=>
%@KJ%uI;'gj=m@TcO/1Su`bb%W&TemeaE,fK:a@BlU@H[S1TkW+#5u>MN%DI!GT2]S]O_QJCI57YFE9oDf.4AZFtSp+"4@KH#+XjT
%W'WJu?9caZ<ue!<-\aup#/3051tjGf`(O$%=^'$bX9W2Vf8]t?krut"Z%J>31ihkP+8HCAlRh"/r%OmXprL7;;jZ`j^Y'AZ6VGa,
%M%-4T7Zs(O_p*dAVOQ;'@<e60;l5n'@(KOm*Z@MlHe8LIC%2@.l15Mf&,XI*^Boc4\%)4W0<huhYJBZ6UZu$8/V<(q@>.a@NE_'W
%Z*X]sBk/3B-6-U7Y\#tE=L2Jq@a14ob7D0"D,4E]UrrPJ+%gFMh%8F>X7*u"$Q]G_9rZo88*5.1>6A`N3TK(/GpQM4lJsIX5"Z.[
%+(2<Fi9CbG<6-(t7(D:)a9@"%jn92DFIg(ChNBZe!;i=scVQ92nDi@lNlbVp_E]8PmW+GY,eI<V#J*O[B3/aJSJLO)2+K)W49u.a
%lk9SO8WgRi"n-]9GNb(TlS*<6=1M(Ta(@(>!Z>Z52OggNB;*RT`G_BlHJ^Q36,SSe<t.p_ZY?-/A)TRGMd8uel"SgI`8JSj!9Ut=
%k8Z+B2JMKi8R)$)%3PH:8u?T=[Y5A:*(lVN&;;_=qW)AW1tJ)::a^UEnC625R@SZA'4u/>c;@$i(%@Z&A\.!_>r2";96Q/-0U#D]
%n1qe3<j<7)^m[f,2nW:u[=OZM4jTukhV7b1N\;W[e[CI[3N?f+!flT<.>B2gSFP.tGbnfMRd2]#TkE`3W>o+MMVWTU'rQeShJA=6
%`]<n<QsF\n.sbCE8UNrDF#Dc_?/]@F'4:&`c"81UJMiR4F^nm,)c#1!e9!"-Zh@b:eU+1O`)j%gL*AC(23CtUn6F[q@>eKJWuWr0
%[S,',U;0mT>)tr]R)#0/._1\Z?KaoLmsbn>an4K/oe!"l,Fo:W&B.9$'\!7l!LjI2_'QJVd`P.EmM,E(OVQ"RjWfp(.U4I_=$eA=
%L4/<E-l1=JOKc@u-6cL?I]0*oF3NMAUP)$u=!GUTAQFQ-G%dI'RQ4#aNgMqSos2D<N4`B1aJ9+O@tj^X_PaU@g>eG`.ZTWCMD0c5
%=oSI`WEW2nh=tF?Z1E"]-G=0P\X+T0Yp>bSiF3+rqtsO*=bs344VjfZX@*>-j9O6!&1t!7TcEBekSeF+5"<M03WQX@_PmL]"*OJe
%9m1].ac-pqSuB@:M]l]Ap8h$knZ=n2Ah[p>2>MAT`"qQE`>c%O1ZNU/FrYKJ\(kAupSiMPfXKhAnFmoFf]Kc5Vr"SJ?bf-;R\07@
%YGZ7'+9ucM*CVf=4D/#0[,IH4WUD6<+gQf'1o2;&LNSM.m#C%mi*:t_A<r_1*nj=MGT#FqWfORpZ]3$/ejNia;8mO#;V(qjk`ET=
%m=!lu>/l^OY(rq+8QJ%AIj6U:GXSC[N[6TFm4G`\$Z7i@,+QKVl<T%9U]p)O*i@IU93V6Bn`H=Ek,dGn`^Io9?7uWudbCWHVd>?m
%KpNAu3?9&D![8YBgVFUGN#&7D,GI9:B\.Ug4`;\.g(0<o7p_-)Hlm4%.SUEDck9NYFco<b_92g+^2.M4Z]3$/ejNhXT^^>f@o!UL
%*m,M9%.GsFNQ;6O"Tq2]TI:"q+bdD$AtmYpF_6/j!JUiSB>[S7-EnifncL2o`rud?df]",Z@aCD3IqDZ'6k`W)5quYjhLGm50/4)
%s6"T5d6B\Ao5SQ_UR8("R3A`hQKImWpp.d\er<r&%!6*kU-jA-TDmfQJ,-!,s8(KRs8;7+^\d:ls7,Rd`]ab-lo3i#gK3jYrVb%a
%rq_-Bq+omspQ#hLqs)pCr8P3CI/W63^AGtFhu)IMn,E*[n%SVHs7mc:6@UmXJ,#Z)qpfWbpm:Gu:]Kq6hs&_IpMA*_hjK87rp;XO
%]q;\%gTQ)+m9fj8q`;P%+Lut#S%njopOE1?-dhT_qV"*slcr<'nCPGOiu_(2IfIHls7tQerRYuAGGUD[C?bM];?,dj5C`:&hmKY'
%JDC3bi3BKcrd2qNs.7!;Il6FIFFS*&=+*dS#Cc:#T+@Rnk.>R3r9[SSs,XpBp%pt%p"c6%PO[(F_Qs44c+!`J:OiAb*<-ZOYC6#W
%aM0@brnBC3j.F%PTDnSgrq+`rJ*k,kI_$J_qU'fglFYrgs5m,WgK,J/KKG.mJqP:G+S/lIk3H4`?\sG[?12gpa;\!+,Cq,S<X3!4
%@1<N,0@HpIJk2*VTC6!#<mc`$l;.;opn9VIosXIs2f,^p6aQX\A#n$"52fW;s%)!ga*4<L]Ue\3)^X3rE)9,RI0Y6mrVrA!Q57Ya
%jLcS%s3R6AAto$0BdYeU0%^R#9iE[a#1ngu)/T6>*FCq)d()*id)GePY5%:XXqV47nW'=(jDJ%8Mh3+UL\V$(FqA*8OUC7UXh>;P
%\#0oB2@QiEW>;S=SDTL.6]7-oiAds1^n01Q/]Pp>3t46l-2PEgT9;64@o^Z0<8Na<FsJ9:rITJMY9IBHGPsQY_g#d-Y!eEND<)X0
%#,kGTj<`&7DMp6BZ&!YQ9p,(kWI9H07%Y0!+&0TlR:/191D6i$ZQdI,j!Z1?'VSeJ91k-gQ8M5q=Wl0BBH]J;1!)S#G>B0O%43.O
%G\rB%8FGCf%*2eA`2hb65/^YB:o72s`b8M.i#Ma,,lLQ,&"_s]+QaG:o2LZqmc2#tC1-.f$C:T`[9q_+^NuP\63r*BgI@>ld9_JS
%WAmf"*e.F6Y4S1Lk1SdBL:_G+#[TnJ7f/`#+ae;BZrI:bnAb\Sg9'@S)<Wg2NUn*nf#7d09p,=rPQ"[q,Q4lh:LZ9.BD="*+'[bs
%5@F5Xj,*C<pEVr2rY,4=7f$*@lW>`O;q#(+GZSV/jRL9IT-W+MI"qN<2V7!>d,.,r%K$*gU?/"!r,L`ZC#%`rLAPt>';Q]UgZdfl
%H>lMQX^+Nen-_1XEB_9IOrdhkoQLendiG"Pmgdcar&fscSBp]^*pNQBWP\,+4C8[I2sNjS(R,tDQH;h;Cc.$%M=R:-kK+].Mc:od
%57qnN*kuuZo/)g*Hm$"-IiT'"DUAe<<:k0!.pYAtEUl`R5cHUm$@Im$^46.,q`OteM#*^Lb..,XA@nW$65UO:EPY5$jAL;bb;c-Q
%DOd2,aokdQ)(UY@;N=9l-HXT/O"6+?s10X5K35ENfWq[m69'9k26@:(E-2"eG&Q!]9^\ZJUlDWK#mho;,nQ(SQ=Sb/naeS]:/4!X
%//:?4Y%N+op,E:1;&eO%YM&ss;Q`UL&Ohe,Ao8IjZLCQaQjNKSj0?Nr2lm,[3hWcanAc8&>+d.%,]R^j]ccg(MH-ihQbI?]O4L#P
%:Yh.D/b(pDZtS:G-%,':S(b-$*JlAK=IjjK"350IDSnN^c])8aH,1S(gt%72_U'r`s+4uEmNHu%;*%c#HO+%h8sOBTF[qY'`p]SL
%,50)U>Q37j2mm-+8R9+!+9_]0d<:nL(O)Bs^)\20/#*,%il.&<"heg/4iiiHofRG:``97`9mm\n/b.H?BMj&PQ&iSe_bKIL\_/57
%s886pcR=Re%I68<ZP5r,^>P&&DMpmTE=IHU7!M#&qt;\:KqZ(0rVjX1dj2QH:YjE/XmnL:AAj4*WQoU'Mk?Hq6eJ8JcgC:CVi@87
%19:TVggXCJVIOKbfC`P\mQ0G9nVV'?mU:cSp#uOsC=55:lB<K2M8,KQMq0V>h<rp\4gSW',ODeF?G8jmD_.5P*U'De&;tqqO"5+k
%Md7Om%QZ`$m)BKfqGmBUe=%TJh/-D/mRXXLp`3mK["^bT76];*\>^KQR&\Bnr)i7eS\mM8cRfC,2dbb1EEcf8R],B4n:G=4DIH!A
%fmJrNiNhB<\T@%r,\r7o6)I(d<&rQVBmWq:e;c-)8C7h8no9#S;]II.3q/LUK#QH-KQZ4]4rRpaE7r,F<4d,\93PJ=`u\j"OZm.=
%P9t1,^R@oUfLX7f\&[>@2mm-+90jQNj]c8ulB0nt3m^Z^1JL[CEQ)d?V-1+.UVdJ6h7/.r8Z/'D(8?=V3Zm^P->SUu6)R.fX3u0-
%MjrG*KsaID_t.B6#0`!ij?Z#>$70USMcq12p!rI!gOsf;[2\kETi62_(.lo&%)M>oe/_97)S^o"MqBU`0+YNDDJI35U4f`()r/L,
%4dL1%P<A'lek"?'i/]C+l[pj>p5;K<Jnd74+Ug'fAcGJ+'1T`mUn/iLM8,KQMq3\OM#FV0HY1;.p:RI9mb@<hHb"r(*qWCs;"i&<
%XQ=G+*\9![D:irTVV-qJ#jY-/Z%F(^hYCWQ,[!e<%Phm):\16h?#`e)[W#a`Ucq$"*fiIc#Q<GjHXp@,]j'VFHE>$E7Z1-0M...c
%"bgmLDgKDaI9iY=qOf2f8cu5JXM>5C3:VaoGGAojW'/F=\0'nBeM_JrTV<?k.^[b"+Y8<;5T5ML5=#'8.;$,Jg&nZJ_sT">+Xg#.
%Y[.h>Mi7Q"2h4=[:apR=&pABE8Lm:FHK@>8%S&j@eXPsQ1(ZQjJ>'\%/I!em*/lH@R-)>rFDPG'^J]HO\MO@,*K89e99]Qfit@F"
%GDS16oL!n@'%a_J/s%S`6cH9V&I\NR]9B'4L]<b(Zq:\-@4PN!`9Rh.nL7!5gn$,rl*QMM/8WN4oL/3<,$6/Q]uMs*d_=?=hhfN0
%&W+D-MD-A,0M9kE_hgp_?mW5I:pDbgKUMlRjOH#B]Vlsk6q/`>FA%=?QP1*IS!G?5o`dErd"CLF40'[`e;6)HIP%\6%_BLJ&f"q$
%Tn&QbbgsflUDC+2D@PpJK?=SYdmXGI^gV50?(cSmaA,M6S752WhZVsDO](4T'DBBtgtrS-NF\QtO2t]2SE+e)Z.*`c&!*Ft0JN];
%5^S19W#suiRi-;+4D?JU\f'[AMkm[`oj/,+Z2+po]QG)MXKD>'7FGZ1H7N3$mT2d5H7?Td,jX1_!,2up7>F"mAYnTpV#)[nAC^31
%SFZ^mRXklS@WIN&fiDE6IF5G#"^MZC('CB),VJE=Ea,sDhDe#$>Lh3qP2RqU@jMd!FP"N%XN<+$IuWbMb]J5hlD9o6b<9<c]q=-N
%a,fD80#Yde;r+QuD)iOsQL<["-@1.*#S0_V-aL>lfIr-sHd&,80>UQ;4T'qun0-nt6@-rYHH&?PF1'bh$\e,B+R#P#X11Ej`%T%O
%mFpV^98tI7D=Fj3)c((k7^pJgiR^N$8\_]VEP<SfdE6t)G=3P=!PF/.fKn&ugBcOj@HVB'r+E,:Q"`T(f<oZQEH_(m18,+Il/a&N
%1Z<fc2f;+@?Ys`rUad.d"&eqjpi4(teeF$a>^(gJ!rG9$\ou8S<lO1";TB_;b\.`0<%6$Ho>4S/#Wm-#K2a(mD`L*%BG/SYnT*Rb
%(5WZW\e0b\!Jb-L.AA.oo'dS*8X*ap)C]Z6E)^9.;af4O=4[8a2U\`uWVrCZl5B2JhQ0a')o2T'AO@T18VtjiL]!YVK.`YTflCam
%gn^1O/0G2rYCkcE_8?^:B;<Pt`IUZAGZ$$lf/r[Q(.m;I,ZZtAS7.!).b!5WC%?qWoi`pU4s0D4EO/sg^E)bgItdJm>'/9K^YigY
%KaKSUOAt1)s$V_RPB'Z%BVbAmD)?eOaJ:]sWD*pcTa#e.o$5(_B?g,4fW&!Fjs7&rAt!^*d7aaH<M$^R`YI)?.>E8DXUfGj)p0Ib
%q4_W#MW#?M`EH:VSTM'3[?eI?KiJa_1IQ3<(ld!eOP<'VU1sskc(b!&M#Wr7?a0-Mp*/SXBOD!1Gq04&E3g-u4[:FrRO-S$Ob/u5
%"\O*l1ls0/[G\!oTP;n(>`uLY8o6=3`c:qnOie:oK"15N`E1O!0.IR?$'"<T>\h@5p`dCDM]QmL]:mom=O[[pcVhAZnFV_h6H5eq
%@b,;ensrM!(,U90its?OMQ:M*84uV)ElPD^qga7!br;1aeeEDf(8Mk'lr%QKf*:5;&B@eSi]COEHa7kZ@X/k/ASM@R%)]j4:k*-:
%/&@&3,UL<(S-h+h)/Q'PQ4hY2U>?$F)!)kCi5s&"%%95J`@]AbejWA&"?Nk4:Hd;Y@I-:KL@>J^PK^mMe.GO@:GdclgNXrAEHSH;
%#(L(p]%Zhq[I$aflcql4\%E.!(XeY-GGs,%*g?m.&fdJeod(D7P_)t.*g6h`pP!h4daKC23LJL`rCO$0URtDL'JQ,8HDs7FF%JdA
%-I)m]O&MeebA2*pf3EAsIP"SiQ7W5Zls%>Y:kBIXAL>td8Q)2pa^phn)gZ%Jd>)!%]a`(N:h).(?Y6:?&SCZQ+qd2G@T$J\I<2%B
%3(?%KO&'rb:>Q;XUKu;SA'@"<M[B\A&s0cf!-8N-4(VN2'S%WI.<_Z@((6&aEc;m\@rl1em2%$[ns<7gP1^OTiG8M[Pm1!8;b*pf
%g'NU\\"`1M$W^,05)./ZS,^fQ95`(K.9d..fEfW*OMlZ6%$)ne3:&r*fQp>4H)ZCfRK^(c:]#K92e/"/+,mV-Y2UiQ5W1?<r'^ln
%IJfa4=>\BLar0/$,N[E?%eKIi)p`dXl?%hE6Da'@b0+mPVM'4ppd0l60j&Dlcj/:q3[5Ze3/tag*P%SpI&aI`V%d-IqYc(QcL>L%
%@#0pO_[->.a%US$ZmITY_Rba\?SM#`$)4)\e;_Gs\Wto.KgSMq-F!&n/-?&MKoLD5K[8ST.est&2-c<M74Ui:#hDo+N?ubW2`5%^
%`5KRTH;S^QWFhi2,[54ZCS"s7:FY^+G\=bSI;1BYY5OC$)!0nW]\G=nB6Wt?(A-8ilAE!MhY<).<hip@<[fh:3LB[*MO-gP6BU1$
%k@Wu@eJl'b*;J1uMMakJ**"me`N^JBbHCX<.DEq#Zs/'ORjP\c^@%,tG+n2B+ZDVu&/hXIrdg9cc`87/C.lqu[A'%gB&A>Y!oYA^
%g3pZ9d]ikHp7&jpk9_G'Q-]cr6*]fDf=,-V$3k`A%^Pf`$pt(:7%Y81,H*t2#"Ve4$[Cql"8[]po`Qs6)1(URWHQ%mL*^S`F5B<f
%Z$o(PAlRXkn#TPdGjaUVgT4q"Y[YJ1?1f25[=k/$%2aU_O6e3]8+ACV3;dOEpS1>_5umr?I35?)U!m_k@/Binr,38_i##C95khot
%KU=1*TQ+B'"Al]_2J6`PnA^F*PrRkH!a!KQ99rCa_=QqBNo#tp.Ii=^4id<\VA[uC-UGdAj`^Gs*!Nl@CYcP*0BR^.+[LZcP:Cl`
%&</-\2&3O?0sk>`5i.(,,<C5]-3ogLM4HWlm\+i,SO+<*miGY;'\3[F<:4It8%tA9S]&o&Us_^Rfc]0oA$pB?_2est[o##M.u)+f
%T>=>[CYJQb=`KaF$l;KKY\(au/J5IZE]bYBLdA0LVPMc>:N3uiB]lHf]KD9Ym2A:9rmD1/4HN9E3kc6:qqN,t#Si]0B[Tf@Q#A&"
%HiKi:RgI<9<"#X5IRl17;0DE-Z8qmj?i>apq&C4r>h+uds#[.g-R`T=)khYYM@MGc]"@5?S'g@-.QrDr!JWmlZoM!t<9AlbJ:mo.
%8RBA)g(\<W%n6>HeU6<cSihGM6+I3E=p]Ln7]Ts7=$^-:SZl1r9-s))UAG@7\%AUX;#Z<Po+)(a_MO4NQ&jOuHfmD`[j`\GdDm6V
%+95uKWD_=n<R.c#V5e[h`KlgbZ5%lGSG&`K&FdVA0TFJf;%Ue.1T-u79rf%e3(u34dEF1=%7:M-%+_H&-jX+:W%ZhUMX_l/G[93d
%##CUu22&04n`ZH*C.\%6NoW)cAVoR?jD)Q6'h</(5X<nlm#I\'K#)23bj,S^"L_RSK56sUV3kZg??1nO:16G2G!4=L+EWpXPrRNU
%]Z\Xm+g`>fqe_]ebQh0t261lAD?=[3Ja[Z?qg/^Sb*kW82kU?_JH25MlDU6%1d84&1ARV!H(X(5J[\^m$:3C%da5.<RiZ39Y+[Gd
%[Mk(10j4)tl#nU@Y+%#BnHVYTU'Td/P/t&&;5AdQ;b2lXe`8uU/i*#ompbNH:f+W,@q0(/q/D:u%B2_&*\c*@<4-pc=cOPqE8>q$
%%_U4m=%*L(-HI%X>-6bE$XTPq!^CdsVJ..XT'A(J(f'7E#"`jIe0JeU!MX1oei#b_.2B17jIBf1IL4VGXuOp&E"#IeHk1&#P1fZ-
%./7d*Q/Rd"89j$H#%hY18^.lF_qe6pf1<4O'*dcSL*S$)\"RYg04"*Q-2N8o*g`DJ/K"'B5&=KKXFYR0mk.CF]iRKTDdoBK57UC@
%SC26q1.-TOV:L2Hjcq(eS_>6?*Y%Xs5I?["0_r-:RDGMgL!GeE3Rg0F/u9IR`caA47072Fl=XP/0hgIA=Gs54%TDEDGfFLij;p+a
%8W6eh,"K^eU>P^J"Ve8G(8o>".rt^4[H]`'A@riW$5Z)\'GmlV@R+?*eHJ$N?@!p4)#d!Ja1F(+3-8iCW^I!*La7-fnLAQ65+Xk\
%Bd<l_%O:[(aJ-7G"Gc<'K3X'8W;&$L"Sf&nqgLPfiQ&!!>r6YFhBf6-U1]A[8-E%6@PZaDh&@&XT)O_fm+p1D/>7n'O\"]PLBBgS
%Nk@2&CCS<8!C_/=X_];0d`eD<l:+])lLK3!q&ARK>+FlRNDVgjht1fOV(>_nUoZbZ=AROX:cL]d,cfm;/LQo`Tn_[^?K8Pfr=!nb
%HfKsP>,Sr!]*`lD=?)Sa+P<E^7gKjH;O^7FMoIB2;kqpLN8('0IaM35^uK`R3X!c>_t;2sI@CCK=&;2EoP?)$VHKBL3F5G[:1CYK
%og+'7Xo65KL+5Ij?ECq2`PnoD67Y^Z6HUWN&qh6"O<MmG4m@k]`;D14\B>P]7lY3//aSXsl&]/r0-$%HX[jTB1ZQT+-FME93SPX!
%r\ZYOGTHZf:a]5%.lNf&Gh/*I0]WO(oJI.Z6o)]G%Q.hU0X26>qW,`kG[]uFT6&;+J*>)#?=MGlF._c";jX"uA8AfXLP0n$9:Je&
%dP57YBM=DD28![q;Vb&sGSl9tjmBFh)DASq(Ra]pmcOZ-/<);1Z!MoY@DM0!TZ?Hdh;*(!iM-\9L"n8=Y_i:66`;;NPPS+C4o"BE
%gf3/%=:]+O*1aliFY:>*I[d^M-e#?$*uhA2"CMP&p=1%G_q2UNX3[N&#LT@%@I:(FEAq&:s6Q<eR9Ak!aggu-ZYP*%dgTtW$[K!N
%)+5ZX!>OoH5*S^G\sX,41"-o+UDBSa0R`Tt?amt#\H87SCL!*%<=S8tH6?AfL.WN@WXHkf"^,RCAgsl6QbjB.!F#l;l'NQ=O;L]+
%=kk1Qn0Ng53V2eu)@^-PO'P#W$aAKT<8r[%<$R/pV&9%PF'-lc'7fH7`#`MRQfpM9[#?goTjG?Vp,E^SY.U=KPq]<V2#BLc>lR%M
%.3n3[gG.SFaJmCZ@QLCtj9(_RD([9TDutm8g8`Ub;k+X8At5Umlu4q`U?V<Jk5>q%ELq.H;5i)<X3.R/]isHOB5(P5R2KuMUTq2H
%h(KjpQP2djM]8/ogf--"j$NG,c=B>(T6(shRgdlo*MB1qJa6L2k.L5rh5h/;\OX+k8aQ0MVAHoLW5(^3j>H]=WlXqc<TdeWLV=Ra
%h:Qn;<=OFIe+%2M7uBZ?2OJoh]U6p&2DJlY@TDTa6?jrt-<?HPIZ>-M+%_F!?pbF;e2G%ZCXLQVfkFl\_,o[S\6?sD1GkZI6i`==
%_/:,7*&"$H=M._pn,*kPZM+Eq?("sI*f&^V'o=f:LdN"KZfg#s.k*o/581@<<:go1K&*72TQlu/@9DJgW,N?Si!C`n>*=PR31M3s
%OYPmO7A8lsFnGDJ(<@`]?n'n!A!5_@CMN%:)a*<AnMT8gXBXBd3r$>bR,\b$auA-jH\)^i<Al'n&22-3qDil79"Km%()'J>F#<BE
%hYOA)o@jZaD//74*^%O)n3(+teM$9W$GR=,K;@.elBRFJS<hs92k(KqnU#Pi3']tRLMqog_`H@R;`NGImXBR"p9u:cCBK^D`='9t
%U^\suhIASfIO;nI_JX[kK0tlTbC64k^1P;;N]=h,64RA8[YK!1\S$.@0T"+ZDU3f*r27`pK5Sn3aMEd_pR$tjT1O!O9N^C/,L'[Y
%fWG&\E3VB$(gBRukI1WjhO6`eehu`iq'C,6PX_TbbM'@J9,GRRU;:W0(bfWRE++7SYM4*r_:]q3+a"u`8aYY=bV9sM-#IV[E?8'\
%!/JRDI(WeOD8H<#UC&4U%.!R[pok^L-_Uqa5$$iMOJ=:m/>im809I8G9;32Cqq=jLb<ecW+beA[`#)3b_#e\CMMK#W_eWC!Llnc$
%V%YKEfKd0fGM4P^'4M1);7kL[\UR=br>XOfeL%N!CqGNUN*/ms3qT6un2"WngSVuLZ>L,3)FmS&"M[>Z\TC7>L_$<,\OtQ)@^12,
%VdRLO6j*]_@DZ>&J@OJc_pc83K@P")j'U'k5,-!VW[_rmB;Pti=prHi9U!3MLsS>0Lr'4jWa_-A1JI\^U(_n]EI!r!HV`AZlDKno
%68;83)7*mg*WAJ;KGgX=KSqReD[MC+oOqWYa>gtF[OB@XQtEn7d!&-8pUP$rL6a!h#,CGbB$l93BPfK-F`l6P+J>XS#KVi]AmN6O
%)J."[,;==iOWQ)Z$q?$p5o^IY.\.C1&-jW!M6*!L<n&hScuW/=5&QB,M1#g:%Q'ZD)cFc&\8?VQ\m;u5OrVc`;)gi(S(nrpBW-3Y
%Z?elZ@>>`!`&YPM'(jJ&S!FZ0)&f2jH#JdN&hGJC%)'3u/l[IE@hnn%6bYIRF4*[*$F:mF@(%&,f.=oI$:3Ta+`BY&R%n1D0`N^X
%1;b"jbcp`OB-Jo%M)P+qdmS;/"Ml=BAP2i:I`++XS)I,?):g%7bCH$?r4nt+__.@9P+<[=5`CjXM2\Lget_e]7/pCTc(u7O8J;<@
%RRAD-XPn$F*)*/a^aXp3UgTfp/S5)A=tW[8E34o2m!)R@(heUf&Ia5G%[_u7!opL;?m@R&BOO!j(Eq5,O]d>r.g_$4)C@cVQuL!Z
%ZWdc-M+"0nEoQJ+M,c#[2%kD60lrI.+^d`KkBWb<aIbt::&$%a.'Pi8)]F9b6j`c)=IR,Yef5=(J%j>r[)t.9[#tP2^#)sHD8a^+
%Kj):o0;J?+cq\W;=*\K`JW$+-"QGmfQ7E%)-t$'H";$ZRCn35"h;rP'kCs\1e":dU5oLa$YLQ#P20&)C]^0X@6DRiq'JEZ$R^P2O
%[gTCfdaa*M[r+^ab\^,=@MYHFgqKA?="!.=YSN`Do?tDl2'o=-#B5AJa-GcfiS'/T,'c#u4!2D:q8RE!X`Z]FQCpU&rYCa^kc63a
%7ld,`^1O_4IPY$al_G[skRsX2H<s>C`[``Z90Z+TicBW8e'r'I[=BPs*-]!J2pcnN"70tkKrja`'E[O>(=lS#B58ru+:BYr\AHt[
%ofR+;8j'-)kFh91'JW3fX6p$LB3:L_W+Q?]L*fZM-9:dE_Mb:NKcT%\\8"Vo_5Z"">S8@%Z;$=QPNuL(A5#_H"I%pNEE.$BcWWgZ
%0ZPKuH6OPi4"Z80QER#2JbWp-Mq@npY+h^=7pJ?j1h14mDTEQX[)X%K"kr@/'oXKK@9=DeHsc195LFO$2PU=O!\s,iZFkiZpl^22
%9-(l/61'T1dReM/nHOZbC9rWe"US@s-W<q[M``Zh2U`o-FA<V#`<).Wk*FsO*2sTbp(HELG0=f9k70$0-EJL"hU\TLAah%t)'5tA
%lUEeYn!5+p6sfegBFnUB`Ape8GWV+HF/TD-Mf#@PLEO:qdAP6IRd6Kl$EC%0a!+YX=lpSB3d-X9A!_F9Kj,$&K?7iPqT;ub+%rKN
%DHYc:\sh!$h>3HqISOguVZ$D^\%ht!O+6a3oj@^dO8o(Ol$pGHr:WUqO8nk$+27aGcThC*Ish4jpV6UCT7?^@Y<VsWa$9Rf00fEs
%l[R?4rU>T7^]+$^J,9!,%tFSf5Q*MPr6b@n++O4#J,K3$s6b@;0;;-2~>
%AI9_PrivateDataEnd
